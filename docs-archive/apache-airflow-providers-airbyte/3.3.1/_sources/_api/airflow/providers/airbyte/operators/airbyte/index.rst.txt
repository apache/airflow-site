:py:mod:`airflow.providers.airbyte.operators.airbyte`
=====================================================

.. py:module:: airflow.providers.airbyte.operators.airbyte


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.airbyte.operators.airbyte.AirbyteTriggerSyncOperator




.. py:class:: AirbyteTriggerSyncOperator(connection_id, airbyte_conn_id = 'airbyte_default', asynchronous = False, api_version = 'v1', wait_seconds = 3, timeout = 3600, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Submits a job to an Airbyte server to run a integration process between your source and destination.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AirbyteTriggerSyncOperator`

   :param airbyte_conn_id: Optional. The name of the Airflow connection to get connection
       information for Airbyte. Defaults to "airbyte_default".
   :param connection_id: Required. The Airbyte ConnectionId UUID between a source and destination.
   :param asynchronous: Optional. Flag to get job_id after submitting the job to the Airbyte API.
       This is useful for submitting long running jobs and
       waiting on them asynchronously using the AirbyteJobSensor. Defaults to False.
   :param api_version: Optional. Airbyte API version. Defaults to "v1".
   :param wait_seconds: Optional. Number of seconds between checks. Only used when ``asynchronous`` is False.
       Defaults to 3 seconds.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Only used when ``asynchronous`` is False. Defaults to 3600 seconds (or 1 hour).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('connection_id',)

      

   .. py:method:: execute(context)

      Create Airbyte Job and wait to finish.


   .. py:method:: on_kill()

      Cancel the job if task is cancelled.



