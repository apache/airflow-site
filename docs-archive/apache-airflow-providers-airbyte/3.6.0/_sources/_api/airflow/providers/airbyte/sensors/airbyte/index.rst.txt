:py:mod:`airflow.providers.airbyte.sensors.airbyte`
===================================================

.. py:module:: airflow.providers.airbyte.sensors.airbyte

.. autoapi-nested-parse::

   This module contains a Airbyte Job sensor.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.airbyte.sensors.airbyte.AirbyteJobSensor




.. py:class:: AirbyteJobSensor(*, airbyte_job_id, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), airbyte_conn_id = 'airbyte_default', api_version = 'v1', **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Check for the state of a previously submitted Airbyte job.

   :param airbyte_job_id: Required. Id of the Airbyte job
   :param airbyte_conn_id: Optional. The name of the Airflow connection to get
   :param deferrable: Run sensor in the deferrable mode.
       connection information for Airbyte. Defaults to "airbyte_default".
   :param api_version: Optional. Airbyte API version. Defaults to "v1".

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('airbyte_job_id',)

      

   .. py:attribute:: ui_color
      :value: '#6C51FD'

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Submit a job which generates a run_id and gets deferred.


   .. py:method:: execute_complete(context, event = None)

      Invoke this callback when the trigger fires; return immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



