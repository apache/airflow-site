:mod:`airflow.providers.alibaba.cloud.operators.oss`
====================================================

.. py:module:: airflow.providers.alibaba.cloud.operators.oss

.. autoapi-nested-parse::

   This module contains Alibaba Cloud OSS operators.



Module Contents
---------------

.. py:class:: OSSCreateBucketOperator(region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator creates an OSS bucket

   :param region: OSS region you want to create bucket
   :type region: str
   :param bucket_name: This is bucket name you want to create
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




.. py:class:: OSSDeleteBucketOperator(region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator to delete an OSS bucket

   :param region: OSS region you want to create bucket
   :type region: str
   :param bucket_name: This is bucket name you want to delete
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




.. py:class:: OSSUploadObjectOperator(key: str, file: str, region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator to upload an file-like object

   :param key: the OSS path of the object
   :type key: str
   :param file: local file to upload.
   :type file: str
   :param region: OSS region you want to create bucket
   :type region: str
   :param bucket_name: This is bucket name you want to create
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




.. py:class:: OSSDownloadObjectOperator(key: str, file: str, region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator to Download an OSS object

   :param key: key of the object to download.
   :type key: str
   :param local_file: local path + file name to save.
   :type local_file: str
   :param region: OSS region
   :type region: str
   :param bucket_name: OSS bucket name
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




.. py:class:: OSSDeleteBatchObjectOperator(keys: list, region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator to delete OSS objects

   :param key: key list of the objects to delete.
   :type key: str
   :param region: OSS region
   :type region: str
   :param bucket_name: OSS bucket name
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




.. py:class:: OSSDeleteObjectOperator(key: str, region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   This operator to delete an OSS object

   :param key: key of the object to delete.
   :type key: str
   :param region: OSS region
   :type region: str
   :param bucket_name: OSS bucket name
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   
   .. method:: execute(self, context)




