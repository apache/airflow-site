:mod:`airflow.providers.amazon.aws.hooks.emr_containers`
========================================================

.. py:module:: airflow.providers.amazon.aws.hooks.emr_containers


Module Contents
---------------

.. py:class:: EMRContainerHook(*args, virtual_cluster_id: str = None, **kwargs)

   Bases: :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   Interact with AWS EMR Virtual Cluster to run, poll jobs and return job status
   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   :param virtual_cluster_id: Cluster ID of the EMR on EKS virtual cluster
   :type virtual_cluster_id: str

   .. attribute:: INTERMEDIATE_STATES
      :annotation: = ['PENDING', 'SUBMITTED', 'RUNNING']

      

   .. attribute:: FAILURE_STATES
      :annotation: = ['FAILED', 'CANCELLED', 'CANCEL_PENDING']

      

   .. attribute:: SUCCESS_STATES
      :annotation: = ['COMPLETED']

      

   
   .. method:: submit_job(self, name: str, execution_role_arn: str, release_label: str, job_driver: dict, configuration_overrides: Optional[dict] = None, client_request_token: Optional[str] = None)

      Submit a job to the EMR Containers API and and return the job ID.
      A job run is a unit of work, such as a Spark jar, PySpark script,
      or SparkSQL query, that you submit to Amazon EMR on EKS.
      See: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr-containers.html#EMRContainers.Client.start_job_run  # noqa: E501

      :param name: The name of the job run.
      :type name: str
      :param execution_role_arn: The IAM role ARN associated with the job run.
      :type execution_role_arn: str
      :param release_label: The Amazon EMR release version to use for the job run.
      :type release_label: str
      :param job_driver: Job configuration details, e.g. the Spark job parameters.
      :type job_driver: dict
      :param configuration_overrides: The configuration overrides for the job run,
          specifically either application configuration or monitoring configuration.
      :type configuration_overrides: dict
      :param client_request_token: The client idempotency token of the job run request.
          Use this if you want to specify a unique ID to prevent two jobs from getting started.
      :type client_request_token: str
      :return: Job ID



   
   .. method:: get_job_failure_reason(self, job_id: str)

      Fetch the reason for a job failure (e.g. error message). Returns None or reason string.

      :param job_id: Id of submitted job run
      :type job_id: str
      :return: str



   
   .. method:: check_query_status(self, job_id: str)

      Fetch the status of submitted job run. Returns None or one of valid query states.
      See: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr-containers.html#EMRContainers.Client.describe_job_run  # noqa: E501
      :param job_id: Id of submitted job run
      :type job_id: str
      :return: str



   
   .. method:: poll_query_status(self, job_id: str, max_tries: Optional[int] = None, poll_interval: int = 30)

      Poll the status of submitted job run until query state reaches final state.
      Returns one of the final states.

      :param job_id: Id of submitted job run
      :type job_id: str
      :param max_tries: Number of times to poll for query state before function exits
      :type max_tries: int
      :param poll_interval: Time (in seconds) to wait between calls to check query status on EMR
      :type poll_interval: int
      :return: str



   
   .. method:: stop_query(self, job_id: str)

      Cancel the submitted job_run

      :param job_id: Id of submitted job_run
      :type job_id: str
      :return: dict




