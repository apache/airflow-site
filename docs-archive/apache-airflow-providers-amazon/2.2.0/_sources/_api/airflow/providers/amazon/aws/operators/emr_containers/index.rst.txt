:mod:`airflow.providers.amazon.aws.operators.emr_containers`
============================================================

.. py:module:: airflow.providers.amazon.aws.operators.emr_containers


Module Contents
---------------

.. py:class:: EMRContainerOperator(*, name: str, virtual_cluster_id: str, execution_role_arn: str, release_label: str, job_driver: dict, configuration_overrides: Optional[dict] = None, client_request_token: Optional[str] = None, aws_conn_id: str = 'aws_default', poll_interval: int = 30, max_tries: Optional[int] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   An operator that submits jobs to EMR on EKS virtual clusters.

   :param name: The name of the job run.
   :type name: str
   :param virtual_cluster_id: The EMR on EKS virtual cluster ID
   :type virtual_cluster_id: str
   :param execution_role_arn: The IAM role ARN associated with the job run.
   :type execution_role_arn: str
   :param release_label: The Amazon EMR release version to use for the job run.
   :type release_label: str
   :param job_driver: Job configuration details, e.g. the Spark job parameters.
   :type job_driver: dict
   :param configuration_overrides: The configuration overrides for the job run,
       specifically either application configuration or monitoring configuration.
   :type configuration_overrides: dict
   :param client_request_token: The client idempotency token of the job run request.
       Use this if you want to specify a unique ID to prevent two jobs from getting started.
       If no token is provided, a UUIDv4 token will be generated for you.
   :type client_request_token: str
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :type aws_conn_id: str
   :param poll_interval: Time (in seconds) to wait between two consecutive calls to check query status on EMR
   :type poll_interval: int
   :param max_tries: Maximum number of times to wait for the job run to finish.
       Defaults to None, which will poll until the job is *not* in a pending, submitted, or running state.
   :type max_tries: int

   .. attribute:: template_fields
      :annotation: = ['name', 'virtual_cluster_id', 'execution_role_arn', 'release_label', 'job_driver']

      

   .. attribute:: ui_color
      :annotation: = #f9c915

      

   
   .. method:: hook(self)

      Create and return an EMRContainerHook.



   
   .. method:: execute(self, context: dict)

      Run job on EMR Containers



   
   .. method:: on_kill(self)

      Cancel the submitted job run




