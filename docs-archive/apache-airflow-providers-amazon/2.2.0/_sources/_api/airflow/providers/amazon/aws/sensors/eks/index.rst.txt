:mod:`airflow.providers.amazon.aws.sensors.eks`
===============================================

.. py:module:: airflow.providers.amazon.aws.sensors.eks

.. autoapi-nested-parse::

   Tracking the state of EKS Clusters and Nodegroups.



Module Contents
---------------

.. data:: DEFAULT_CONN_ID
   :annotation: = aws_default

   

.. py:class:: EKSClusterStateSensor(*, cluster_name: str, target_state: ClusterStates = ClusterStates.ACTIVE, aws_conn_id: str = DEFAULT_CONN_ID, region: Optional[str] = None, **kwargs)

   Bases: :class:`airflow.sensors.base.BaseSensorOperator`

   Check the state of an Amazon EKS Cluster until the state of the Cluster equals the target state.

   :param cluster_name: The name of the Cluster to watch. (templated)
   :type cluster_name: str
   :param target_state: Target state of the Cluster. (templated)
   :type target_state: ClusterStates
   :param region: Which AWS region the connection should use. (templated)
       If this is None or empty then the default boto3 behaviour is used.
   :type region: str
   :param aws_conn_id: The Airflow connection used for AWS credentials. (templated)
        If this is None or empty then the default boto3 behaviour is used. If
        running Airflow in a distributed manner and aws_conn_id is None or
        empty, then the default boto3 configuration would be used (and must be
        maintained on each worker node).
   :type aws_conn_id: str

   .. attribute:: template_fields
      :annotation: = ['cluster_name', 'target_state', 'aws_conn_id', 'region']

      

   .. attribute:: ui_color
      :annotation: = #ff9900

      

   .. attribute:: ui_fgcolor
      :annotation: = #232F3E

      

   
   .. method:: poke(self, context)




.. py:class:: EKSNodegroupStateSensor(*, cluster_name: str, nodegroup_name: str, target_state: NodegroupStates = NodegroupStates.ACTIVE, aws_conn_id: str = DEFAULT_CONN_ID, region: Optional[str] = None, **kwargs)

   Bases: :class:`airflow.sensors.base.BaseSensorOperator`

   Check the state of an Amazon EKS Nodegroup until the state of the Nodegroup equals the target state.

   :param cluster_name: The name of the Cluster which the Nodegroup is attached to. (templated)
   :type cluster_name: str
   :param nodegroup_name: The name of the Nodegroup to watch. (templated)
   :type nodegroup_name: str
   :param target_state: Target state of the Nodegroup. (templated)
   :type target_state: NodegroupStates
   :param region: Which AWS region the connection should use. (templated)
       If this is None or empty then the default boto3 behaviour is used.
   :type region: str
   :param aws_conn_id: The Airflow connection used for AWS credentials. (templated)
        If this is None or empty then the default boto3 behaviour is used. If
        running Airflow in a distributed manner and aws_conn_id is None or
        empty, then the default boto3 configuration would be used (and must be
        maintained on each worker node).
   :type aws_conn_id: str

   .. attribute:: template_fields
      :annotation: = ['cluster_name', 'nodegroup_name', 'target_state', 'aws_conn_id', 'region']

      

   .. attribute:: ui_color
      :annotation: = #ff9900

      

   .. attribute:: ui_fgcolor
      :annotation: = #232F3E

      

   
   .. method:: poke(self, context)




