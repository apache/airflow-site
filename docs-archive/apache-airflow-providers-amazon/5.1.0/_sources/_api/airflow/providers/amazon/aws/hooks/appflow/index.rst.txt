:py:mod:`airflow.providers.amazon.aws.hooks.appflow`
====================================================

.. py:module:: airflow.providers.amazon.aws.hooks.appflow


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.appflow.AppflowHook




.. py:class:: AppflowHook(*args, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   Interact with Amazon Appflow, using the boto3 library.
   Hook attribute ``conn`` has all methods that listed in documentation.

   .. seealso::
       - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/appflow.html
       - https://docs.aws.amazon.com/appflow/1.0/APIReference/Welcome.html

   Additional arguments (such as ``aws_conn_id`` or ``region_name``) may be specified and
       are passed down to the underlying AwsBaseHook.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`


   .. py:attribute:: EVENTUAL_CONSISTENCY_OFFSET
      :annotation: :int = 15

      

   .. py:attribute:: EVENTUAL_CONSISTENCY_POLLING
      :annotation: :int = 10

      

   .. py:method:: conn()

      Get the underlying boto3 Appflow client (cached)


   .. py:method:: run_flow(flow_name, poll_interval = 20)

      Execute an AppFlow run.

      :param flow_name: The flow name
      :param poll_interval: Time (seconds) to wait between two consecutive calls to check the run status
      :return: The run execution ID


   .. py:method:: update_flow_filter(flow_name, filter_tasks, set_trigger_ondemand = False)

      Update the flow task filter.
      All filters will be removed if an empty array is passed to filter_tasks.

      :param flow_name: The flow name
      :param filter_tasks: List flow tasks to be added
      :param set_trigger_ondemand: If True, set the trigger to on-demand; otherwise, keep the trigger as is
      :return: None



