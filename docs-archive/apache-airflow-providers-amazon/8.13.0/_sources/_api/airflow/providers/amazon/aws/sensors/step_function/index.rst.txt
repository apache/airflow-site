:py:mod:`airflow.providers.amazon.aws.sensors.step_function`
============================================================

.. py:module:: airflow.providers.amazon.aws.sensors.step_function


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.step_function.StepFunctionExecutionSensor




.. py:class:: StepFunctionExecutionSensor(*, execution_arn, aws_conn_id = 'aws_default', region_name = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Poll the Step Function State Machine Execution until it reaches a terminal state; fails if the task fails.

   On successful completion of the Execution the Sensor will do an XCom Push
   of the State Machine's output to `output`

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:StepFunctionExecutionSensor`

   :param execution_arn: execution_arn to check the state of
   :param aws_conn_id: aws connection to use, defaults to 'aws_default'

   .. py:attribute:: INTERMEDIATE_STATES
      :value: ('RUNNING',)

      

   .. py:attribute:: FAILURE_STATES
      :value: ('FAILED', 'TIMED_OUT', 'ABORTED')

      

   .. py:attribute:: SUCCESS_STATES
      :value: ('SUCCEEDED',)

      

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('execution_arn',)

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ()

      

   .. py:attribute:: ui_color
      :value: '#66c3ff'

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: get_hook()

      Create and return a StepFunctionHook.


   .. py:method:: hook()



