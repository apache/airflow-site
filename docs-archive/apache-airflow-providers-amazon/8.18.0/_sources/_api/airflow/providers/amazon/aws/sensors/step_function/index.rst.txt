:py:mod:`airflow.providers.amazon.aws.sensors.step_function`
============================================================

.. py:module:: airflow.providers.amazon.aws.sensors.step_function


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.step_function.StepFunctionExecutionSensor




.. py:class:: StepFunctionExecutionSensor(*, execution_arn, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.step_function.StepFunctionHook`\ ]

   Poll the Step Function State Machine Execution until it reaches a terminal state; fails if the task fails.

   On successful completion of the Execution the Sensor will do an XCom Push
   of the State Machine's output to `output`

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:StepFunctionExecutionSensor`

   :param execution_arn: execution_arn to check the state of
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: INTERMEDIATE_STATES
      :value: ('RUNNING',)

      

   .. py:attribute:: FAILURE_STATES
      :value: ('FAILED', 'TIMED_OUT', 'ABORTED')

      

   .. py:attribute:: SUCCESS_STATES
      :value: ('SUCCEEDED',)

      

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#66c3ff'

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: get_hook()

      Create and return a StepFunctionHook.



