:py:mod:`airflow.providers.amazon.aws.operators.eventbridge`
============================================================

.. py:module:: airflow.providers.amazon.aws.operators.eventbridge


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.eventbridge.EventBridgePutEventsOperator
   airflow.providers.amazon.aws.operators.eventbridge.EventBridgePutRuleOperator
   airflow.providers.amazon.aws.operators.eventbridge.EventBridgeEnableRuleOperator
   airflow.providers.amazon.aws.operators.eventbridge.EventBridgeDisableRuleOperator




.. py:class:: EventBridgePutEventsOperator(*, entries, endpoint_id = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.eventbridge.EventBridgeHook`\ ]

   Put Events onto Amazon EventBridge.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EventBridgePutEventsOperator`

   :param entries: the list of events to be put onto EventBridge, each event is a dict (required)
   :param endpoint_id: the URL subdomain of the endpoint
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.htmlt

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EventBridgePutRuleOperator(*, name, description = None, event_bus_name = None, event_pattern = None, role_arn = None, schedule_expression = None, state = None, tags = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.eventbridge.EventBridgeHook`\ ]

   Create or update a specified EventBridge rule.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EventBridgePutRuleOperator`

   :param name: name of the rule to create or update (required)
   :param description: description of the rule
   :param event_bus_name: name or ARN of the event bus to associate with this rule
   :param event_pattern: pattern of events to be matched to this rule
   :param role_arn: the Amazon Resource Name of the IAM role associated with the rule
   :param schedule_expression: the scheduling expression (for example, a cron or rate expression)
   :param state: indicates whether rule is set to be "ENABLED" or "DISABLED"
   :param tags: list of key-value pairs to associate with the rule
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.htmlt

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EventBridgeEnableRuleOperator(*, name, event_bus_name = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.eventbridge.EventBridgeHook`\ ]

   Enable an EventBridge Rule.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EventBridgeEnableRuleOperator`

   :param name: the name of the rule to enable
   :param event_bus_name: the name or ARN of the event bus associated with the rule (default if omitted)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.htmlt

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EventBridgeDisableRuleOperator(*, name, event_bus_name = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.eventbridge.EventBridgeHook`\ ]

   Disable an EventBridge Rule.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EventBridgeDisableRuleOperator`

   :param name: the name of the rule to disable
   :param event_bus_name: the name or ARN of the event bus associated with the rule (default if omitted)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.htmlt

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



