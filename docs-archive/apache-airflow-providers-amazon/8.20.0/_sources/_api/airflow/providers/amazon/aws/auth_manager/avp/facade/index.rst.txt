:py:mod:`airflow.providers.amazon.aws.auth_manager.avp.facade`
==============================================================

.. py:module:: airflow.providers.amazon.aws.auth_manager.avp.facade


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.auth_manager.avp.facade.IsAuthorizedRequest
   airflow.providers.amazon.aws.auth_manager.avp.facade.AwsAuthManagerAmazonVerifiedPermissionsFacade




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.auth_manager.avp.facade.NB_REQUESTS_PER_BATCH


.. py:data:: NB_REQUESTS_PER_BATCH
   :value: 30

   

.. py:class:: IsAuthorizedRequest


   Bases: :py:obj:`TypedDict`

   Represent the parameters of ``is_authorized`` method in AVP facade.

   .. py:attribute:: method
      :type: airflow.auth.managers.base_auth_manager.ResourceMethod

      

   .. py:attribute:: entity_type
      :type: airflow.providers.amazon.aws.auth_manager.avp.entities.AvpEntities

      

   .. py:attribute:: entity_id
      :type: str | None

      

   .. py:attribute:: context
      :type: dict | None

      


.. py:class:: AwsAuthManagerAmazonVerifiedPermissionsFacade(context=None)


   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Facade for Amazon Verified Permissions.

   Used as an intermediate layer between AWS auth manager and Amazon Verified Permissions.

   .. py:method:: avp_client()

      Build Amazon Verified Permissions client.


   .. py:method:: avp_policy_store_id()

      Get the Amazon Verified Permission policy store ID from config.


   .. py:method:: is_authorized(*, method, entity_type, user, entity_id = None, context = None)

      Make an authorization decision against Amazon Verified Permissions.

      Check whether the user has permissions to access given resource.

      :param method: the method to perform
      :param entity_type: the entity type the user accesses
      :param user: the user
      :param entity_id: the entity ID the user accesses. If not provided, all entities of the type will be
          considered.
      :param context: optional additional context to pass to Amazon Verified Permissions.


   .. py:method:: get_batch_is_authorized_results(*, requests, user)

      Make a batch authorization decision against Amazon Verified Permissions.

      Return a list of results for each request.

      :param requests: the list of requests containing the method, the entity_type and the entity ID
      :param user: the user


   .. py:method:: batch_is_authorized(*, requests, user)

      Make a batch authorization decision against Amazon Verified Permissions.

      Check whether the user has permissions to access all resources.

      :param requests: the list of requests containing the method, the entity_type and the entity ID
      :param user: the user


   .. py:method:: get_batch_is_authorized_single_result(*, batch_is_authorized_results, request, user)

      Get a specific authorization result from the output of ``get_batch_is_authorized_results``.

      :param batch_is_authorized_results: the response from the ``batch_is_authorized`` API
      :param request: the request information. Used to find the result in the response.
      :param user: the user


   .. py:method:: is_policy_store_schema_up_to_date()

      Return whether the policy store schema equals the latest version of the schema.



