:py:mod:`airflow.providers.amazon.aws.triggers.neptune`
=======================================================

.. py:module:: airflow.providers.amazon.aws.triggers.neptune


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.neptune.NeptuneClusterAvailableTrigger
   airflow.providers.amazon.aws.triggers.neptune.NeptuneClusterStoppedTrigger




.. py:class:: NeptuneClusterAvailableTrigger(*, db_cluster_id, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = None, region_name = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Triggers when a Neptune Cluster is available.

   :param db_cluster_id: Cluster ID to poll.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region_name: AWS region name (example: us-east-1)

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: NeptuneClusterStoppedTrigger(*, db_cluster_id, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = None, region_name = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Triggers when a Neptune Cluster is stopped.

   :param db_cluster_id: Cluster ID to poll.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region_name: AWS region name (example: us-east-1)

   .. py:method:: hook()

      Override in subclasses to return the right hook.



