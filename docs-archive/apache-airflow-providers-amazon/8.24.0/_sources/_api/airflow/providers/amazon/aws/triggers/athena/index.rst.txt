:py:mod:`airflow.providers.amazon.aws.triggers.athena`
======================================================

.. py:module:: airflow.providers.amazon.aws.triggers.athena


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.athena.AthenaTrigger




.. py:class:: AthenaTrigger(query_execution_id, waiter_delay, waiter_max_attempts, aws_conn_id, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger for AthenaOperator.

   The trigger will asynchronously poll the boto3 API and wait for the
   Redshift cluster to be in the `available` state.

   :param query_execution_id:  ID of the Athena query execution to watch
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



