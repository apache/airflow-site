:py:mod:`airflow.providers.amazon.aws.sensors.glue`
===================================================

.. py:module:: airflow.providers.amazon.aws.sensors.glue


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.glue.GlueJobSensor
   airflow.providers.amazon.aws.sensors.glue.GlueDataQualityRuleSetEvaluationRunSensor
   airflow.providers.amazon.aws.sensors.glue.GlueDataQualityRuleRecommendationRunSensor




.. py:class:: GlueJobSensor(*, job_name, run_id, verbose = False, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for an AWS Glue Job to reach any of the status below.

   'FAILED', 'STOPPED', 'SUCCEEDED'

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:GlueJobSensor`

   :param job_name: The AWS Glue Job unique name
   :param run_id: The AWS Glue current running job identifier
   :param verbose: If True, more Glue Job Run logs show in the Airflow Task Logs.  (default: False)

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_name', 'run_id')

      

   .. py:method:: hook()


   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: GlueDataQualityRuleSetEvaluationRunSensor(*, evaluation_run_id, show_results = True, verify_result_status = True, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), poke_interval = 120, max_retries = 60, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.glue.GlueDataQualityHook`\ ]

   Waits for an AWS Glue data quality ruleset evaluation run to reach any of the status below.

   'FAILED', 'STOPPED', 'STOPPING', 'TIMEOUT', 'SUCCEEDED'

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:GlueDataQualityRuleSetEvaluationRunSensor`

   :param evaluation_run_id: The AWS Glue data quality ruleset evaluation run identifier.
   :param verify_result_status: Validate all the ruleset rules evaluation run results,
       If any of the rule status is Fail or Error then an exception is thrown. (default: True)
   :param show_results: Displays all the ruleset rules evaluation run results. (default: True)
   :param deferrable: If True, the sensor will operate in deferrable mode. This mode requires aiobotocore
       module to be installed.
       (default: False, but can be overridden in config file by setting default_deferrable to True)
   :param poke_interval: Polling period in seconds to check for the status of the job. (default: 120)
   :param max_retries: Number of times before returning the current state. (default: 60)

   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: SUCCESS_STATES
      :value: ('SUCCEEDED',)

      

   .. py:attribute:: FAILURE_STATES
      :value: ('FAILED', 'STOPPED', 'STOPPING', 'TIMEOUT')

      

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)


   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: GlueDataQualityRuleRecommendationRunSensor(*, recommendation_run_id, show_results = True, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), poke_interval = 120, max_retries = 60, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.glue.GlueDataQualityHook`\ ]

   Waits for an AWS Glue data quality recommendation run to reach any of the status below.

   'FAILED', 'STOPPED', 'STOPPING', 'TIMEOUT', 'SUCCEEDED'

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:GlueDataQualityRuleRecommendationRunSensor`

   :param recommendation_run_id: The AWS Glue data quality rule recommendation run identifier.
   :param show_results: Displays the recommended ruleset (a set of rules), when recommendation run completes. (default: True)
   :param deferrable: If True, the sensor will operate in deferrable mode. This mode requires aiobotocore
       module to be installed.
       (default: False, but can be overridden in config file by setting default_deferrable to True)
   :param poke_interval: Polling period in seconds to check for the status of the job. (default: 120)
   :param max_retries: Number of times before returning the current state. (default: 60)

   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: SUCCESS_STATES
      :value: ('SUCCEEDED',)

      

   .. py:attribute:: FAILURE_STATES
      :value: ('FAILED', 'STOPPED', 'STOPPING', 'TIMEOUT')

      

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)


   .. py:method:: poke(context)

      Override when deriving this class.



