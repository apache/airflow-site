:py:mod:`airflow.providers.amazon.aws.sensors.dms`
==================================================

.. py:module:: airflow.providers.amazon.aws.sensors.dms


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.dms.DmsTaskBaseSensor
   airflow.providers.amazon.aws.sensors.dms.DmsTaskCompletedSensor




.. py:class:: DmsTaskBaseSensor(replication_task_arn, target_statuses = None, termination_statuses = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Contains general sensor behavior for DMS task.

   Subclasses should set ``target_statuses`` and ``termination_statuses`` fields.

   :param replication_task_arn: AWS DMS replication task ARN
   :param target_statuses: the target statuses, sensor waits until
       the task reaches any of these states
   :param termination_statuses: the termination statuses, sensor fails when
       the task reaches any of these states
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: get_hook()

      Get DmsHook.


   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: DmsTaskCompletedSensor(**kwargs)


   Bases: :py:obj:`DmsTaskBaseSensor`

   Pokes DMS task until it is completed.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:DmsTaskCompletedSensor`

   :param replication_task_arn: AWS DMS replication task ARN
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html


