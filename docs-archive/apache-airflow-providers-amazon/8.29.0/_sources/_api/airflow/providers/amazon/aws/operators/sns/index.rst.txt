:py:mod:`airflow.providers.amazon.aws.operators.sns`
====================================================

.. py:module:: airflow.providers.amazon.aws.operators.sns

.. autoapi-nested-parse::

   Publish message to SNS queue.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.sns.SnsPublishOperator




.. py:class:: SnsPublishOperator(*, target_arn, message, subject = None, message_attributes = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.sns.SnsHook`\ ]

   Publish a message to Amazon SNS.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SnsPublishOperator`

   :param target_arn: either a TopicArn or an EndpointArn
   :param message: the default message you want to send (templated)
   :param subject: the message subject you want to send (templated)
   :param message_attributes: the message attributes you want to send as a flat dict (data type will be
       determined automatically)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



