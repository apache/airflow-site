:py:mod:`airflow.providers.amazon.aws.triggers.ecs`
===================================================

.. py:module:: airflow.providers.amazon.aws.triggers.ecs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.ecs.ClusterWaiterTrigger
   airflow.providers.amazon.aws.triggers.ecs.TaskDoneTrigger




.. py:class:: ClusterWaiterTrigger(waiter_name, cluster_arn, waiter_delay, waiter_max_attempts, aws_conn_id, region)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Polls the status of a cluster using a given waiter. Can be used to poll for an active or inactive cluster.

   :param waiter_name: Name of the waiter to use, for instance 'cluster_active' or 'cluster_inactive'
   :param cluster_arn: ARN of the cluster to watch.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The number of times to ping for status.
       Will fail after that many unsuccessful attempts.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region: The AWS region where the cluster is located.

   .. py:method:: serialize()

      Returns the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Runs the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: TaskDoneTrigger(cluster, task_arn, waiter_delay, waiter_max_attempts, aws_conn_id, region, log_group = None, log_stream = None)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Waits for an ECS task to be done, while eventually polling logs.

   :param cluster: short name or full ARN of the cluster where the task is running.
   :param task_arn: ARN of the task to watch.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The number of times to ping for status.
       Will fail after that many unsuccessful attempts.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region: The AWS region where the cluster is located.

   .. py:method:: serialize()

      Returns the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Runs the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



