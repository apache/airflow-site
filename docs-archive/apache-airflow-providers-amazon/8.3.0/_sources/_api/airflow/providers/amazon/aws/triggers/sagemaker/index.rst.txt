:py:mod:`airflow.providers.amazon.aws.triggers.sagemaker`
=========================================================

.. py:module:: airflow.providers.amazon.aws.triggers.sagemaker


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.sagemaker.SageMakerTrigger




.. py:class:: SageMakerTrigger(job_name, job_type, poke_interval = 30, max_attempts = 480, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   SageMakerTrigger is fired as deferred class with params to run the task in triggerer.

   :param job_name: name of the job to check status
   :param job_type: Type of the sagemaker job whether it is Transform or Training
   :param poke_interval:  polling period in seconds to check for the status
   :param max_attempts: Number of times to poll for query state before returning the current state,
       defaults to None.
   :param aws_conn_id: AWS connection ID for sagemaker

   .. py:method:: serialize()

      Serializes SagemakerTrigger arguments and classpath.


   .. py:method:: hook()


   .. py:method:: run()
      :async:

      Runs the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



