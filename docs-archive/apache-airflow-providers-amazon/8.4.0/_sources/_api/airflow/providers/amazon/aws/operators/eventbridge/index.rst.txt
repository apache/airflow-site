:py:mod:`airflow.providers.amazon.aws.operators.eventbridge`
============================================================

.. py:module:: airflow.providers.amazon.aws.operators.eventbridge


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.eventbridge.EventBridgePutEventsOperator




.. py:class:: EventBridgePutEventsOperator(*, entries, endpoint_id = None, aws_conn_id = 'aws_default', region_name = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Put Events onto Amazon EventBridge.

   :param entries: the list of events to be put onto EventBridge, each event is a dict (required)
   :param endpoint_id: the URL subdomain of the endpoint
   :param aws_conn_id: the AWS connection to use
   :param region_name: the region where events are to be sent


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('entries', 'endpoint_id', 'aws_conn_id', 'region_name')

      

   .. py:method:: hook()

      Create and return an EventBridgeHook.


   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



