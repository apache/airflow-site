:py:mod:`airflow.providers.amazon.aws.sensors.cloud_formation`
==============================================================

.. py:module:: airflow.providers.amazon.aws.sensors.cloud_formation

.. autoapi-nested-parse::

   This module contains sensors for AWS CloudFormation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.cloud_formation.CloudFormationCreateStackSensor
   airflow.providers.amazon.aws.sensors.cloud_formation.CloudFormationDeleteStackSensor




.. py:class:: CloudFormationCreateStackSensor(*, stack_name, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.cloud_formation.CloudFormationHook`\ ]

   Waits for a stack to be created successfully on AWS CloudFormation.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:CloudFormationCreateStackSensor`

   :param stack_name: The name of the stack to wait for (templated)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#C5CAE9'

      

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: CloudFormationDeleteStackSensor(*, stack_name, aws_conn_id = 'aws_default', region_name = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.cloud_formation.CloudFormationHook`\ ]

   Waits for a stack to be deleted successfully on AWS CloudFormation.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:CloudFormationDeleteStackSensor`

   :param stack_name: The name of the stack to wait for (templated)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#C5CAE9'

      

   .. py:method:: poke(context)

      Override when deriving this class.



