:py:mod:`airflow.providers.amazon.aws.operators.dms`
====================================================

.. py:module:: airflow.providers.amazon.aws.operators.dms


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.dms.DmsCreateTaskOperator
   airflow.providers.amazon.aws.operators.dms.DmsDeleteTaskOperator
   airflow.providers.amazon.aws.operators.dms.DmsDescribeTasksOperator
   airflow.providers.amazon.aws.operators.dms.DmsStartTaskOperator
   airflow.providers.amazon.aws.operators.dms.DmsStopTaskOperator
   airflow.providers.amazon.aws.operators.dms.DmsDescribeReplicationConfigsOperator
   airflow.providers.amazon.aws.operators.dms.DmsCreateReplicationConfigOperator
   airflow.providers.amazon.aws.operators.dms.DmsDeleteReplicationConfigOperator
   airflow.providers.amazon.aws.operators.dms.DmsDescribeReplicationsOperator
   airflow.providers.amazon.aws.operators.dms.DmsStartReplicationOperator
   airflow.providers.amazon.aws.operators.dms.DmsStopReplicationOperator




.. py:class:: DmsCreateTaskOperator(*, replication_task_id, source_endpoint_arn, target_endpoint_arn, replication_instance_arn, table_mappings, migration_type = 'full-load', create_task_kwargs = None, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Creates AWS DMS replication task.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsCreateTaskOperator`

   :param replication_task_id: Replication task id
   :param source_endpoint_arn: Source endpoint ARN
   :param target_endpoint_arn: Target endpoint ARN
   :param replication_instance_arn: Replication instance ARN
   :param table_mappings: Table mappings
   :param migration_type: Migration type ('full-load'|'cdc'|'full-load-and-cdc'), full-load by default.
   :param create_task_kwargs: Extra arguments for DMS replication task creation.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderers
      :type: ClassVar[dict]

      

   .. py:method:: execute(context)

      Create AWS DMS replication task from Airflow.

      :return: replication task arn



.. py:class:: DmsDeleteTaskOperator(*, replication_task_arn = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Deletes AWS DMS replication task.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsDeleteTaskOperator`

   :param replication_task_arn: Replication task ARN
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:method:: execute(context)

      Delete AWS DMS replication task from Airflow.

      :return: replication task arn



.. py:class:: DmsDescribeTasksOperator(*, describe_tasks_kwargs = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Describes AWS DMS replication tasks.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsDescribeTasksOperator`

   :param describe_tasks_kwargs: Describe tasks command arguments
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderers
      :type: ClassVar[dict[str, str]]

      

   .. py:method:: execute(context)

      Describe AWS DMS replication tasks from Airflow.

      :return: Marker and list of replication tasks



.. py:class:: DmsStartTaskOperator(*, replication_task_arn, start_replication_task_type = 'start-replication', start_task_kwargs = None, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Starts AWS DMS replication task.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsStartTaskOperator`

   :param replication_task_arn: Replication task ARN
   :param start_replication_task_type: Replication task start type (default='start-replication')
       ('start-replication'|'resume-processing'|'reload-target')
   :param start_task_kwargs: Extra start replication task arguments
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Start AWS DMS replication task from Airflow.



.. py:class:: DmsStopTaskOperator(*, replication_task_arn = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Stops AWS DMS replication task.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsStopTaskOperator`

   :param replication_task_arn: Replication task ARN
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:method:: execute(context)

      Stop AWS DMS replication task from Airflow.



.. py:class:: DmsDescribeReplicationConfigsOperator(*, filter = None, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Describes AWS DMS Serverless replication configurations.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsDescribeReplicationConfigsOperator`

   :param describe_config_filter: Filters block for filtering results.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Describe AWS DMS replication configurations.

      :return: List of replication configurations



.. py:class:: DmsCreateReplicationConfigOperator(*, replication_config_id, source_endpoint_arn, target_endpoint_arn, compute_config, replication_type, table_mappings, additional_config_kwargs = None, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Creates an AWS DMS Serverless replication configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsCreateReplicationConfigOperator`

   :param replication_config_id: Unique identifier used to create a ReplicationConfigArn.
   :param source_endpoint_arn: ARN of the source endpoint
   :param target_endpoint_arn: ARN of the target endpoint
   :param compute_config: Parameters for provisioning an DMS Serverless replication.
   :param replication_type: type of DMS Serverless replication
   :param table_mappings: JSON table mappings
   :param tags: Key-value tag pairs
   :param additional_config_kwargs: Additional configuration parameters for DMS Serverless replication. Passed directly to the API
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DmsDeleteReplicationConfigOperator(*, replication_config_arn, wait_for_completion = True, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), waiter_delay = 60, waiter_max_attempts = 60, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Deletes an AWS DMS Serverless replication configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsDeleteReplicationConfigOperator`

   :param replication_config_arn: ARN of the replication config
   :param wait_for_completion: If True, waits for the replication config to be deleted before returning.
       If False, the operator will return immediately after the request is made.
   :param deferrable: Run the operator in deferrable mode.
   :param waiter_delay: The number of seconds to wait between retries (default: 60).
   :param waiter_max_attempts: The maximum number of attempts to be made (default: 60).
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: VALID_STATES
      :value: ['failed', 'stopped', 'created']

      

   .. py:attribute:: DELETING_STATES
      :value: ['deleting']

      

   .. py:attribute:: TERMINAL_PROVISION_STATES
      :value: ['deprovisioned', '']

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: handle_delete_wait()


   .. py:method:: execute_complete(context, event=None)


   .. py:method:: retry_execution(context, event=None)



.. py:class:: DmsDescribeReplicationsOperator(*, filter = None, aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Describes AWS DMS Serverless replications.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsDescribeReplicationsOperator`

   :param filter: Filters block for filtering results.

   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:attribute:: template_fields_renderer

      

   .. py:method:: execute(context)

      Describe AWS DMS replications.

      :return: Replications



.. py:class:: DmsStartReplicationOperator(*, replication_config_arn, replication_start_type, cdc_start_time = None, cdc_start_pos = None, cdc_stop_pos = None, wait_for_completion = True, waiter_delay = 30, waiter_max_attempts = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Starts an AWS DMS Serverless replication.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsStartReplicationOperator`

   :param replication_config_arn: ARN of the replication config
   :param replication_start_type: Type of replication.
   :param cdc_start_time: Start time of CDC
   :param cdc_start_pos: Indicates when to start CDC.
   :param cdc_stop_pos: Indicates when to stop CDC.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: RUNNING_STATES
      :value: ['running']

      

   .. py:attribute:: STARTABLE_STATES
      :value: ['stopped', 'failed', 'created']

      

   .. py:attribute:: TERMINAL_STATES
      :value: ['failed', 'stopped', 'created']

      

   .. py:attribute:: TERMINAL_PROVISION_STATES
      :value: ['deprovisioned', '']

      

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event=None)


   .. py:method:: retry_execution(context, event=None)



.. py:class:: DmsStopReplicationOperator(*, replication_config_arn, wait_for_completion = True, waiter_delay = 30, waiter_max_attempts = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), aws_conn_id = 'aws_default', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dms.DmsHook`\ ]

   Stops an AWS DMS Serverless replication.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DmsStopReplicationOperator`

   :param replication_config_arn: ARN of the replication config
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be

   .. py:attribute:: STOPPED_STATES
      :value: ['stopped']

      

   .. py:attribute:: NON_STOPPABLE_STATES
      :value: ['stopped']

      

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event=None)



