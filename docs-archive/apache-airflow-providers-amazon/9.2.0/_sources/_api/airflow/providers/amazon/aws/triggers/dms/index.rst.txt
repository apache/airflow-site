:py:mod:`airflow.providers.amazon.aws.triggers.dms`
===================================================

.. py:module:: airflow.providers.amazon.aws.triggers.dms


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.dms.DmsReplicationTerminalStatusTrigger
   airflow.providers.amazon.aws.triggers.dms.DmsReplicationConfigDeletedTrigger
   airflow.providers.amazon.aws.triggers.dms.DmsReplicationCompleteTrigger
   airflow.providers.amazon.aws.triggers.dms.DmsReplicationStoppedTrigger
   airflow.providers.amazon.aws.triggers.dms.DmsReplicationDeprovisionedTrigger




.. py:class:: DmsReplicationTerminalStatusTrigger(replication_config_arn, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger when an AWS DMS Serverless replication is in a terminal state.

   :param replication_config_arn: The ARN of the replication config.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: DmsReplicationConfigDeletedTrigger(replication_config_arn, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger when an AWS DMS Serverless replication config is deleted.

   :param replication_config_arn: The ARN of the replication config.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: DmsReplicationCompleteTrigger(replication_config_arn, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger when an AWS DMS Serverless replication completes.

   :param replication_config_arn: The ARN of the replication config.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: DmsReplicationStoppedTrigger(replication_config_arn, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger when an AWS DMS Serverless replication is stopped.

   :param replication_config_arn: The ARN of the replication config.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: DmsReplicationDeprovisionedTrigger(replication_config_arn, waiter_delay = 30, waiter_max_attempts = 60, aws_conn_id = 'aws_default')


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger when an AWS DMS Serverless replication is de-provisioned.

   :param replication_config_arn: The ARN of the replication config.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



