:py:mod:`airflow.providers.amazon.aws.utils.waiter`
===================================================

.. py:module:: airflow.providers.amazon.aws.utils.waiter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.utils.waiter.WaitPolicy



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.utils.waiter.waiter
   airflow.providers.amazon.aws.utils.waiter.get_state



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.utils.waiter.log
   airflow.providers.amazon.aws.utils.waiter.WAITER_POLICY_NAME_MAPPING


.. py:data:: log

   

.. py:function:: waiter(get_state_callable, get_state_args, parse_response, desired_state, failure_states, object_type, action, countdown = 25 * 60, check_interval_seconds = 60)

   Call get_state_callable until it reaches the desired_state or the failure_states.

   PLEASE NOTE:  While not yet deprecated, we are moving away from this method
                 and encourage using the custom boto waiters as explained in
                 https://github.com/apache/airflow/tree/main/airflow/providers/amazon/aws/waiters

   :param get_state_callable: A callable to run until it returns True
   :param get_state_args: Arguments to pass to get_state_callable
   :param parse_response: Dictionary keys to extract state from response of get_state_callable
   :param desired_state: Wait until the getter returns this value
   :param failure_states: A set of states which indicate failure and should throw an
       exception if any are reached before the desired_state
   :param object_type: Used for the reporting string. What are you waiting for? (application, job, etc)
   :param action: Used for the reporting string. What action are you waiting for? (created, deleted, etc)
   :param countdown: Number of seconds the waiter should wait for the desired state before timing out.
       Defaults to 25 * 60 seconds. None = infinite.
   :param check_interval_seconds: Number of seconds waiter should wait before attempting
       to retry get_state_callable. Defaults to 60 seconds.


.. py:function:: get_state(response, keys)


.. py:class:: WaitPolicy


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   Used to control the waiting behaviour within EMRClusterJobFlowOperator.

   Choices:
   - WAIT_FOR_COMPLETION - Will wait for the cluster to report "Running" state
   - WAIT_FOR_STEPS_COMPLETION - Will wait for the cluster to report "Terminated" state

   .. py:attribute:: WAIT_FOR_COMPLETION
      :value: 'wait_for_completion'

      

   .. py:attribute:: WAIT_FOR_STEPS_COMPLETION
      :value: 'wait_for_steps_completion'

      


.. py:data:: WAITER_POLICY_NAME_MAPPING
   :type: dict[WaitPolicy, str]

   

