airflow.providers.amazon.aws.hooks.mwaa
=======================================

.. py:module:: airflow.providers.amazon.aws.hooks.mwaa

.. autoapi-nested-parse::

   This module contains AWS MWAA hook.



Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.mwaa.MwaaHook


Module Contents
---------------

.. py:class:: MwaaHook(*args, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`


   Interact with AWS Manager Workflows for Apache Airflow.

   Provide thin wrapper around :external+boto3:py:class:`boto3.client("mwaa") <MWAA.Client>`

   If your IAM policy doesn't have `airflow:InvokeRestApi` permission, the hook will use a fallback method
   that uses the AWS credential to generate a local web login token for the Airflow Web UI and then directly
   make requests to the Airflow API. This fallback method can be set as the default (and only) method used by
   setting `generate_local_token` to True.  Learn more here:
   https://docs.aws.amazon.com/mwaa/latest/userguide/access-mwaa-apache-airflow-rest-api.html#granting-access-MWAA-Enhanced-REST-API

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       - :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`


   .. py:method:: invoke_rest_api(env_name, path, method, body = None, query_params = None, generate_local_token = False)

      Invoke the REST API on the Airflow webserver with the specified inputs.

      .. seealso::
          - :external+boto3:py:meth:`MWAA.Client.invoke_rest_api`

      :param env_name: name of the MWAA environment
      :param path: Apache Airflow REST API endpoint path to be called
      :param method: HTTP method used for making Airflow REST API calls: 'GET'|'PUT'|'POST'|'PATCH'|'DELETE'
      :param body: Request body for the Apache Airflow REST API call
      :param query_params: Query parameters to be included in the Apache Airflow REST API call
      :param generate_local_token: If True, only the local web token method is used without trying boto's
          `invoke_rest_api` first. If False, the local web token method is used as a fallback after trying
          boto's `invoke_rest_api`



