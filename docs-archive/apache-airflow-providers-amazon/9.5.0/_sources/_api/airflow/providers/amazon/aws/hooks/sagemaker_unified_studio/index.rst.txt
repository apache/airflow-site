airflow.providers.amazon.aws.hooks.sagemaker_unified_studio
===========================================================

.. py:module:: airflow.providers.amazon.aws.hooks.sagemaker_unified_studio

.. autoapi-nested-parse::

   This module contains the Amazon SageMaker Unified Studio Notebook hook.



Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.sagemaker_unified_studio.SageMakerNotebookHook


Module Contents
---------------

.. py:class:: SageMakerNotebookHook(execution_name, input_config = None, output_config = None, compute = None, termination_condition = None, tags = None, waiter_delay = 10, waiter_max_attempts = 1440, *args, **kwargs)

   Bases: :py:obj:`airflow.hooks.base.BaseHook`


   Interact with Sagemaker Unified Studio Workflows.

   This hook provides a wrapper around the Sagemaker Workflows Notebook Execution API.

   Examples:
    .. code-block:: python

       from airflow.providers.amazon.aws.hooks.sagemaker_unified_studio import SageMakerNotebookHook

       notebook_hook = SageMakerNotebookHook(
           input_config={"input_path": "path/to/notebook.ipynb", "input_params": {"param1": "value1"}},
           output_config={"output_uri": "folder/output/location/prefix", "output_formats": "NOTEBOOK"},
           execution_name="notebook_execution",
           waiter_delay=10,
           waiter_max_attempts=1440,
       )

   :param execution_name: The name of the notebook job to be executed, this is same as task_id.
   :param input_config: Configuration for the input file.
       Example: {'input_path': 'folder/input/notebook.ipynb', 'input_params': {'param1': 'value1'}}
   :param output_config: Configuration for the output format. It should include an output_formats parameter to specify the output format.
       Example: {'output_formats': ['NOTEBOOK']}
   :param compute: compute configuration to use for the notebook execution. This is a required attribute
       if the execution is on a remote compute.
       Example: { "instance_type": "ml.m5.large", "volume_size_in_gb": 30, "volume_kms_key_id": "", "image_uri": "string", "container_entrypoint": [ "string" ]}
   :param termination_condition: conditions to match to terminate the remote execution.
       Example: { "MaxRuntimeInSeconds": 3600 }
   :param tags: tags to be associated with the remote execution runs.
       Example: { "md_analytics": "logs" }
   :param waiter_delay: Interval in seconds to check the task execution status.
   :param waiter_max_attempts: Number of attempts to wait before returning FAILED.


   .. py:attribute:: execution_name


   .. py:attribute:: input_config


   .. py:attribute:: output_config


   .. py:attribute:: compute
      :value: None



   .. py:attribute:: termination_condition


   .. py:attribute:: tags


   .. py:attribute:: waiter_delay
      :value: 10



   .. py:attribute:: waiter_max_attempts
      :value: 1440



   .. py:method:: start_notebook_execution()


   .. py:method:: wait_for_execution_completion(execution_id, context)


