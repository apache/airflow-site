airflow.providers.amazon.aws.operators.ec2
==========================================

.. py:module:: airflow.providers.amazon.aws.operators.ec2


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.operators.ec2.EC2StartInstanceOperator
   airflow.providers.amazon.aws.operators.ec2.EC2StopInstanceOperator
   airflow.providers.amazon.aws.operators.ec2.EC2CreateInstanceOperator
   airflow.providers.amazon.aws.operators.ec2.EC2TerminateInstanceOperator
   airflow.providers.amazon.aws.operators.ec2.EC2RebootInstanceOperator
   airflow.providers.amazon.aws.operators.ec2.EC2HibernateInstanceOperator


Module Contents
---------------

.. py:class:: EC2StartInstanceOperator(*, instance_id, check_interval = 15, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Start AWS EC2 instance using boto3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2StartInstanceOperator`

   :param instance_id: id of the AWS EC2 instance
       :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param check_interval: time in seconds that the job should wait in
       between each instance state checks until operation is completed


   .. py:attribute:: aws_hook_class


   .. py:attribute:: operator_extra_links


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: ui_color
      :value: '#eeaa11'



   .. py:attribute:: ui_fgcolor
      :value: '#ffffff'



   .. py:attribute:: instance_id


   .. py:attribute:: check_interval
      :value: 15



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EC2StopInstanceOperator(*, instance_id, check_interval = 15, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Stop AWS EC2 instance using boto3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2StopInstanceOperator`

   :param instance_id: id of the AWS EC2 instance
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param check_interval: time in seconds that the job should wait in
       between each instance state checks until operation is completed


   .. py:attribute:: aws_hook_class


   .. py:attribute:: operator_extra_links


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: ui_color
      :value: '#eeaa11'



   .. py:attribute:: ui_fgcolor
      :value: '#ffffff'



   .. py:attribute:: instance_id


   .. py:attribute:: check_interval
      :value: 15



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EC2CreateInstanceOperator(image_id, max_count = 1, min_count = 1, poll_interval = 20, max_attempts = 20, config = None, wait_for_completion = False, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Create and start a specified number of EC2 Instances using boto3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2CreateInstanceOperator`

   :param image_id: ID of the AMI used to create the instance.
   :param max_count: Maximum number of instances to launch. Defaults to 1.
   :param min_count: Minimum number of instances to launch. Defaults to 1.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param poll_interval: Number of seconds to wait before attempting to
       check state of instance. Only used if wait_for_completion is True. Default is 20.
   :param max_attempts: Maximum number of attempts when checking state of instance.
       Only used if wait_for_completion is True. Default is 20.
   :param config: Dictionary for arbitrary parameters to the boto3 run_instances call.
   :param wait_for_completion: If True, the operator will wait for the instance to be
       in the `running` state before returning.


   .. py:attribute:: aws_hook_class


   .. py:attribute:: operator_extra_links


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: image_id


   .. py:attribute:: max_count
      :value: 1



   .. py:attribute:: min_count
      :value: 1



   .. py:attribute:: poll_interval
      :value: 20



   .. py:attribute:: max_attempts
      :value: 20



   .. py:attribute:: config


   .. py:attribute:: wait_for_completion
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: on_kill()

      Override this method to clean up subprocesses when a task instance gets killed.

      Any use of the threading, subprocess or multiprocessing module within an
      operator needs to be cleaned up, or it will leave ghost processes behind.



.. py:class:: EC2TerminateInstanceOperator(instance_ids, poll_interval = 20, max_attempts = 20, wait_for_completion = False, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Terminate EC2 Instances using boto3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2TerminateInstanceOperator`

   :param instance_id: ID of the instance to be terminated.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param poll_interval: Number of seconds to wait before attempting to
       check state of instance. Only used if wait_for_completion is True. Default is 20.
   :param max_attempts: Maximum number of attempts when checking state of instance.
       Only used if wait_for_completion is True. Default is 20.
   :param wait_for_completion: If True, the operator will wait for the instance to be
       in the `terminated` state before returning.


   .. py:attribute:: aws_hook_class


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: instance_ids


   .. py:attribute:: poll_interval
      :value: 20



   .. py:attribute:: max_attempts
      :value: 20



   .. py:attribute:: wait_for_completion
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EC2RebootInstanceOperator(*, instance_ids, poll_interval = 20, max_attempts = 20, wait_for_completion = False, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Reboot Amazon EC2 instances.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2RebootInstanceOperator`

   :param instance_ids: ID of the instance(s) to be rebooted.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param poll_interval: Number of seconds to wait before attempting to
       check state of instance. Only used if wait_for_completion is True. Default is 20.
   :param max_attempts: Maximum number of attempts when checking state of instance.
       Only used if wait_for_completion is True. Default is 20.
   :param wait_for_completion: If True, the operator will wait for the instance to be
       in the `running` state before returning.


   .. py:attribute:: aws_hook_class


   .. py:attribute:: operator_extra_links


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: ui_color
      :value: '#eeaa11'



   .. py:attribute:: ui_fgcolor
      :value: '#ffffff'



   .. py:attribute:: instance_ids


   .. py:attribute:: poll_interval
      :value: 20



   .. py:attribute:: max_attempts
      :value: 20



   .. py:attribute:: wait_for_completion
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: EC2HibernateInstanceOperator(*, instance_ids, poll_interval = 20, max_attempts = 20, wait_for_completion = False, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Hibernate Amazon EC2 instances.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:EC2HibernateInstanceOperator`

   :param instance_ids: ID of the instance(s) to be hibernated.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param poll_interval: Number of seconds to wait before attempting to
       check state of instance. Only used if wait_for_completion is True. Default is 20.
   :param max_attempts: Maximum number of attempts when checking state of instance.
       Only used if wait_for_completion is True. Default is 20.
   :param wait_for_completion: If True, the operator will wait for the instance to be
       in the `stopped` state before returning.


   .. py:attribute:: aws_hook_class


   .. py:attribute:: operator_extra_links


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: ui_color
      :value: '#eeaa11'



   .. py:attribute:: ui_fgcolor
      :value: '#ffffff'



   .. py:attribute:: instance_ids


   .. py:attribute:: poll_interval
      :value: 20



   .. py:attribute:: max_attempts
      :value: 20



   .. py:attribute:: wait_for_completion
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



