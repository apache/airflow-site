airflow.providers.amazon.aws.sensors.mwaa
=========================================

.. py:module:: airflow.providers.amazon.aws.sensors.mwaa


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.mwaa.MwaaDagRunSensor


Module Contents
---------------

.. py:class:: MwaaDagRunSensor(*, external_env_name, external_dag_id, external_dag_run_id, success_states = None, failure_states = None, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.mwaa.MwaaHook`\ ]


   Waits for a DAG Run in an MWAA Environment to complete.

   If the DAG Run fails, an AirflowException is thrown.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:MwaaDagRunSensor`

   :param external_env_name: The external MWAA environment name that contains the DAG Run you want to wait for
       (templated)
   :param external_dag_id: The DAG ID in the external MWAA environment that contains the DAG Run you want to wait for
       (templated)
   :param external_dag_run_id: The DAG Run ID in the external MWAA environment that you want to wait for (templated)
   :param success_states: Collection of DAG Run states that would make this task marked as successful, default is
       ``airflow.utils.state.State.success_states`` (templated)
   :param failure_states: Collection of DAG Run states that would make this task marked as failed and raise an
       AirflowException, default is ``airflow.utils.state.State.failed_states`` (templated)


   .. py:attribute:: aws_hook_class


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: success_states


   .. py:attribute:: failure_states


   .. py:attribute:: external_env_name


   .. py:attribute:: external_dag_id


   .. py:attribute:: external_dag_run_id


   .. py:method:: poke(context)


