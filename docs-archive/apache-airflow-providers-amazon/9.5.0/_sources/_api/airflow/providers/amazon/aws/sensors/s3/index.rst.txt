airflow.providers.amazon.aws.sensors.s3
=======================================

.. py:module:: airflow.providers.amazon.aws.sensors.s3


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.s3.S3KeySensor
   airflow.providers.amazon.aws.sensors.s3.S3KeysUnchangedSensor


Module Contents
---------------

.. py:class:: S3KeySensor(*, bucket_key, bucket_name = None, wildcard_match = False, check_fn = None, verify = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), use_regex = False, metadata_keys = None, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.s3.S3Hook`\ ]


   Waits for one or multiple keys (a file-like instance on S3) to be present in a S3 bucket.

   The path is just a key/value pointer to a resource for the given S3 path.
   Note: S3 does not support folders directly, and only provides key/value pairs.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:S3KeySensor`

   :param bucket_key: The key(s) being waited on. Supports full s3:// style url
       or relative path from root level. When it's specified as a full s3://
       url, please leave bucket_name as `None`
   :param bucket_name: Name of the S3 bucket. Only needed when ``bucket_key``
       is not provided as a full ``s3://`` url. When specified, all the keys passed to ``bucket_key``
       refers to this bucket
   :param wildcard_match: whether the bucket_key should be interpreted as a
       Unix wildcard pattern
   :param check_fn: Function that receives the list of the S3 objects with the context values,
       and returns a boolean:
       - ``True``: the criteria is met
       - ``False``: the criteria isn't met
       **Example**: Wait for any S3 object size more than 1 megabyte  ::

           def check_fn(files: List, **kwargs) -> bool:
               return any(f.get('Size', 0) > 1048576 for f in files)
   :param deferrable: Run operator in the deferrable mode
   :param use_regex: whether to use regex to check bucket
   :param metadata_keys: List of head_object attributes to gather and send to ``check_fn``.
       Acceptable values: Any top level attribute returned by s3.head_object. Specify * to return
       all available attributes.
       Default value: "Size".
       If the requested attribute is not found, the key is still included and the value is None.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: aws_hook_class


   .. py:attribute:: bucket_name
      :value: None



   .. py:attribute:: bucket_key


   .. py:attribute:: wildcard_match
      :value: False



   .. py:attribute:: check_fn
      :value: None



   .. py:attribute:: verify
      :value: None



   .. py:attribute:: deferrable
      :value: True



   .. py:attribute:: use_regex
      :value: False



   .. py:attribute:: metadata_keys
      :value: ['Size']



   .. py:method:: poke(context)

      Override when deriving this class.



   .. py:method:: execute(context)

      Airflow runs this method on the worker and defers using the trigger.



   .. py:method:: execute_complete(context, event)

      Execute when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



.. py:class:: S3KeysUnchangedSensor(*, bucket_name, prefix, verify = None, inactivity_period = 60 * 60, min_objects = 1, previous_objects = None, allow_delete = True, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.s3.S3Hook`\ ]


   Return True if inactivity_period has passed with no increase in the number of objects matching prefix.

   Note, this sensor will not behave correctly in reschedule mode, as the state of the listed
   objects in the S3 bucket will be lost between rescheduled invocations.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:S3KeysUnchangedSensor`

   :param bucket_name: Name of the S3 bucket
   :param prefix: The prefix being waited on. Relative path from bucket root level.
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param inactivity_period: The total seconds of inactivity to designate
       keys unchanged. Note, this mechanism is not real time and
       this operator may not return until a poke_interval after this period
       has passed with no additional objects sensed.
   :param min_objects: The minimum number of objects needed for keys unchanged
       sensor to be considered valid.
   :param previous_objects: The set of object ids found during the last poke.
   :param allow_delete: Should this sensor consider objects being deleted
       between pokes valid behavior. If true a warning message will be logged
       when this happens. If false an error will be raised.
   :param deferrable: Run sensor in the deferrable mode
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: aws_hook_class


   .. py:attribute:: bucket_name


   .. py:attribute:: prefix


   .. py:attribute:: inactivity_period
      :value: 3600



   .. py:attribute:: min_objects
      :value: 1



   .. py:attribute:: previous_objects


   .. py:attribute:: inactivity_seconds
      :value: 0



   .. py:attribute:: allow_delete
      :value: True



   .. py:attribute:: deferrable
      :value: True



   .. py:attribute:: verify
      :value: None



   .. py:attribute:: last_activity_time
      :type:  datetime.datetime | None
      :value: None



   .. py:method:: is_keys_unchanged(current_objects)

      Check for new objects after the inactivity_period and update the sensor state accordingly.

      :param current_objects: set of object ids in bucket during last poke.



   .. py:method:: poke(context)

      Override when deriving this class.



   .. py:method:: execute(context)

      Airflow runs this method on the worker and defers using the trigger if deferrable is True.



   .. py:method:: execute_complete(context, event = None)

      Execute when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



