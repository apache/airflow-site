airflow.providers.amazon.aws.triggers.mwaa
==========================================

.. py:module:: airflow.providers.amazon.aws.triggers.mwaa


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.mwaa.MwaaDagRunCompletedTrigger


Module Contents
---------------

.. py:class:: MwaaDagRunCompletedTrigger(*, external_env_name, external_dag_id, external_dag_run_id, success_states = None, failure_states = None, waiter_delay = 60, waiter_max_attempts = 720, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when an MWAA Dag Run is complete.

   :param external_env_name: The external MWAA environment name that contains the DAG Run you want to wait for
       (templated)
   :param external_dag_id: The DAG ID in the external MWAA environment that contains the DAG Run you want to wait for
       (templated)
   :param external_dag_run_id: The DAG Run ID in the external MWAA environment that you want to wait for (templated)
   :param success_states: Collection of DAG Run states that would make this task marked as successful, default is
       ``{airflow.utils.state.DagRunState.SUCCESS}`` (templated)
   :param failure_states: Collection of DAG Run states that would make this task marked as failed and raise an
       AirflowException, default is ``{airflow.utils.state.DagRunState.FAILED}`` (templated)
   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 60)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 720)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:attribute:: success_states


   .. py:attribute:: failure_states


   .. py:method:: hook()

      Override in subclasses to return the right hook.



