tests.system.amazon.aws.example_sql_to_s3
=========================================

.. py:module:: tests.system.amazon.aws.example_sql_to_s3


Attributes
----------

.. autoapisummary::

   tests.system.amazon.aws.example_sql_to_s3.DAG_ID
   tests.system.amazon.aws.example_sql_to_s3.SECURITY_GROUP_KEY
   tests.system.amazon.aws.example_sql_to_s3.CLUSTER_SUBNET_GROUP_KEY
   tests.system.amazon.aws.example_sql_to_s3.sys_test_context_task
   tests.system.amazon.aws.example_sql_to_s3.DB_LOGIN
   tests.system.amazon.aws.example_sql_to_s3.DB_PASS
   tests.system.amazon.aws.example_sql_to_s3.DB_NAME
   tests.system.amazon.aws.example_sql_to_s3.REDSHIFT_TABLE
   tests.system.amazon.aws.example_sql_to_s3.SQL_QUERY
   tests.system.amazon.aws.example_sql_to_s3.SQL_CREATE_TABLE
   tests.system.amazon.aws.example_sql_to_s3.SQL_INSERT_DATA
   tests.system.amazon.aws.example_sql_to_s3.test_context
   tests.system.amazon.aws.example_sql_to_s3.test_run


Functions
---------

.. autoapisummary::

   tests.system.amazon.aws.example_sql_to_s3.create_connection


Module Contents
---------------

.. py:data:: DAG_ID
   :value: 'example_sql_to_s3'


.. py:data:: SECURITY_GROUP_KEY
   :value: 'SECURITY_GROUP'


.. py:data:: CLUSTER_SUBNET_GROUP_KEY
   :value: 'CLUSTER_SUBNET_GROUP'


.. py:data:: sys_test_context_task

.. py:data:: DB_LOGIN
   :value: 'adminuser'


.. py:data:: DB_PASS
   :value: 'MyAmazonPassword1'


.. py:data:: DB_NAME
   :value: 'dev'


.. py:data:: REDSHIFT_TABLE
   :value: 'test_table'


.. py:data:: SQL_QUERY
   :value: 'SELECT * FROM test_table'


.. py:data:: SQL_CREATE_TABLE
   :value: Multiline-String

   .. raw:: html

      <details><summary>Show Value</summary>

   .. code-block:: python

      """
          CREATE TABLE IF NOT EXISTS test_table (
          fruit_id INTEGER,
          name VARCHAR NOT NULL,
          color VARCHAR NOT NULL
          );
      """

   .. raw:: html

      </details>



.. py:data:: SQL_INSERT_DATA
   :value: "INSERT INTO test_table VALUES ( 1, 'Banana', 'Yellow');"


.. py:function:: create_connection(conn_id_name, cluster_id)

.. py:data:: test_context

.. py:data:: test_run

