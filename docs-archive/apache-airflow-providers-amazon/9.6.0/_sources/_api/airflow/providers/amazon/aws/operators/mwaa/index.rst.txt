airflow.providers.amazon.aws.operators.mwaa
===========================================

.. py:module:: airflow.providers.amazon.aws.operators.mwaa

.. autoapi-nested-parse::

   This module contains AWS MWAA operators.



Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.operators.mwaa.MwaaTriggerDagRunOperator


Module Contents
---------------

.. py:class:: MwaaTriggerDagRunOperator(*, env_name, trigger_dag_id, trigger_run_id = None, logical_date = None, data_interval_start = None, data_interval_end = None, conf = None, note = None, wait_for_completion = False, waiter_delay = 60, waiter_max_attempts = 720, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.mwaa.MwaaHook`\ ]


   Trigger a Dag Run for a Dag in an Amazon MWAA environment.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:MwaaTriggerDagRunOperator`

   :param env_name: The MWAA environment name (templated)
   :param trigger_dag_id: The ID of the DAG to be triggered (templated)
   :param trigger_run_id: The Run ID. This together with trigger_dag_id are a unique key. (templated)
   :param logical_date: The logical date (previously called execution date). This is the time or interval
       covered by this DAG run, according to the DAG definition. This together with trigger_dag_id are a
       unique key. (templated)
   :param data_interval_start: The beginning of the interval the DAG run covers
   :param data_interval_end: The end of the interval the DAG run covers
   :param conf: Additional configuration parameters. The value of this field can be set only when creating
       the object. (templated)
   :param note: Contains manually entered notes by the user about the DagRun. (templated)

   :param wait_for_completion: Whether to wait for DAG run to stop. (default: False)
   :param waiter_delay: Time in seconds to wait between status checks. (default: 120)
   :param waiter_max_attempts: Maximum number of attempts to check for DAG run completion. (default: 720)
   :param deferrable: If True, the operator will wait asynchronously for the DAG run to stop.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html


   .. py:attribute:: aws_hook_class


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: template_fields_renderers


   .. py:attribute:: env_name


   .. py:attribute:: trigger_dag_id


   .. py:attribute:: trigger_run_id
      :value: None



   .. py:attribute:: logical_date
      :value: None



   .. py:attribute:: data_interval_start
      :value: None



   .. py:attribute:: data_interval_end
      :value: None



   .. py:attribute:: conf


   .. py:attribute:: note
      :value: None



   .. py:attribute:: wait_for_completion
      :value: False



   .. py:attribute:: waiter_delay
      :value: 60



   .. py:attribute:: waiter_max_attempts
      :value: 720



   .. py:attribute:: deferrable


   .. py:method:: execute_complete(context, event = None)


   .. py:method:: execute(context)

      Trigger a Dag Run for the Dag in the Amazon MWAA environment.

      :param context: the Context object
      :return: dict with information about the Dag run
          For details of the returned dict, see :py:meth:`botocore.client.MWAA.invoke_rest_api`



