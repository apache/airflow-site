airflow.providers.amazon.aws.sensors.ec2
========================================

.. py:module:: airflow.providers.amazon.aws.sensors.ec2


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.ec2.EC2InstanceStateSensor


Module Contents
---------------

.. py:class:: EC2InstanceStateSensor(*, target_state, instance_id, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ec2.EC2Hook`\ ]


   Poll the state of the AWS EC2 instance until the instance reaches the target state.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:EC2InstanceStateSensor`

   :param target_state: target state of instance
   :param instance_id: id of the AWS EC2 instance
   :param region_name: (optional) aws region name associated with the client
   :param deferrable: if True, the sensor will run in deferrable mode


   .. py:attribute:: aws_hook_class


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: ui_color
      :value: '#cc8811'



   .. py:attribute:: ui_fgcolor
      :value: '#ffffff'



   .. py:attribute:: valid_states
      :value: ['running', 'stopped', 'terminated']



   .. py:attribute:: target_state


   .. py:attribute:: instance_id


   .. py:attribute:: deferrable
      :value: True



   .. py:method:: execute(context)

      Derive when creating an operator.

      The main method to execute the task. Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: poke(context)

      Override when deriving this class.



   .. py:method:: execute_complete(context, event = None)


