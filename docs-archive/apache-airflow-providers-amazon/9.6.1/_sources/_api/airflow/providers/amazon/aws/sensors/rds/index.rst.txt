airflow.providers.amazon.aws.sensors.rds
========================================

.. py:module:: airflow.providers.amazon.aws.sensors.rds


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.rds.RdsSnapshotExistenceSensor
   airflow.providers.amazon.aws.sensors.rds.RdsExportTaskExistenceSensor
   airflow.providers.amazon.aws.sensors.rds.RdsDbSensor


Module Contents
---------------

.. py:class:: RdsSnapshotExistenceSensor(*, db_type, db_snapshot_identifier, target_statuses = None, **kwargs)

   Bases: :py:obj:`RdsBaseSensor`


   Waits for RDS snapshot with a specific status.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:RdsSnapshotExistenceSensor`

   :param db_type: Type of the DB - either "instance" or "cluster"
   :param db_snapshot_identifier: The identifier for the DB snapshot
   :param target_statuses: Target status of snapshot
   :param aws_conn_id: The Airflow connection used for AWS credentials.
        If this is ``None`` or empty then the default boto3 behaviour is used. If
        running Airflow in a distributed manner and aws_conn_id is None or
        empty, then default boto3 configuration would be used (and must be
        maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: db_type


   .. py:attribute:: db_snapshot_identifier


   .. py:attribute:: target_statuses
      :value: ['available']



   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: RdsExportTaskExistenceSensor(*, export_task_identifier, target_statuses = None, error_statuses = None, **kwargs)

   Bases: :py:obj:`RdsBaseSensor`


   Waits for RDS export task with a specific status.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:RdsExportTaskExistenceSensor`

   :param export_task_identifier: A unique identifier for the snapshot export task.
   :param target_statuses: Target status of export task
   :param error_statuses: Target error status of export task to fail the sensor


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: export_task_identifier


   .. py:attribute:: target_statuses
      :value: ['starting', 'in_progress', 'complete', 'canceling', 'canceled']



   .. py:attribute:: error_statuses
      :value: ['failed']



   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: RdsDbSensor(*, db_identifier, db_type = RdsDbType.INSTANCE, target_statuses = None, **kwargs)

   Bases: :py:obj:`RdsBaseSensor`


   Waits for an RDS instance or cluster to enter one of a number of states.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:RdsDbSensor`

   :param db_type: Type of the DB - either "instance" or "cluster" (default: 'instance')
   :param db_identifier: The AWS identifier for the DB
   :param target_statuses: Target status of DB


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: db_identifier


   .. py:attribute:: target_statuses
      :value: ['available']



   .. py:attribute:: db_type


   .. py:method:: poke(context)

      Override when deriving this class.



