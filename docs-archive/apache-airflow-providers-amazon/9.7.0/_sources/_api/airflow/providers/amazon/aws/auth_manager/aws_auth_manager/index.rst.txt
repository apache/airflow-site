airflow.providers.amazon.aws.auth_manager.aws_auth_manager
==========================================================

.. py:module:: airflow.providers.amazon.aws.auth_manager.aws_auth_manager


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.auth_manager.aws_auth_manager.AwsAuthManager


Functions
---------

.. autoapisummary::

   airflow.providers.amazon.aws.auth_manager.aws_auth_manager.get_parser


Module Contents
---------------

.. py:class:: AwsAuthManager(context=None)

   Bases: :py:obj:`airflow.api_fastapi.auth.managers.base_auth_manager.BaseAuthManager`\ [\ :py:obj:`airflow.providers.amazon.aws.auth_manager.user.AwsAuthManagerUser`\ ]


   AWS auth manager.

   Leverages AWS services such as Amazon Identity Center and Amazon Verified Permissions to perform
   authentication and authorization in Airflow.


   .. py:method:: init()

      Run operations when Airflow is initializing.

      By default, do nothing.



   .. py:property:: avp_facade


   .. py:property:: apiserver_endpoint
      :type: str



   .. py:method:: deserialize_user(token)

      Create a user object from dict.



   .. py:method:: serialize_user(user)

      Create a subject and extra claims dict from a user object.



   .. py:method:: is_authorized_configuration(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on configuration.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the configuration



   .. py:method:: is_authorized_connection(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a connection.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the connection



   .. py:method:: is_authorized_dag(*, method, user, access_entity = None, details = None)

      Return whether the user is authorized to perform a given action on a DAG.

      :param method: the method to perform
      :param user: the user to performing the action
      :param access_entity: the kind of DAG information the authorization request is about.
          If not provided, the authorization request is about the DAG itself
      :param details: optional details about the DAG



   .. py:method:: is_authorized_backfill(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a backfill.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the backfill



   .. py:method:: is_authorized_asset(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on an asset.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the asset



   .. py:method:: is_authorized_asset_alias(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on an asset alias.

      :param method: the method to perform
      :param user: the user to perform the action on
      :param details: optional details about the asset alias



   .. py:method:: is_authorized_pool(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a pool.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the pool



   .. py:method:: is_authorized_variable(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a variable.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the variable



   .. py:method:: is_authorized_view(*, access_view, user)

      Return whether the user is authorized to access a read-only state of the installation.

      :param access_view: the specific read-only view/state the authorization request is about.
      :param user: the user to performing the action



   .. py:method:: is_authorized_custom_view(*, method, resource_name, user)

      Return whether the user is authorized to perform a given action on a custom view.

      A custom view can be a view defined as part of the auth manager. This view is then only available when
      the auth manager is used as part of the environment. It can also be a view defined as part of a
      plugin defined by a user.

      :param method: the method to perform.
          The method can also be a string if the action has been defined in a plugin.
          In that case, the action can be anything (e.g. can_do).
          See https://github.com/apache/airflow/issues/39144
      :param resource_name: the name of the resource
      :param user: the user to performing the action



   .. py:method:: filter_authorized_menu_items(menu_items, *, user)

      Filter menu items based on user permissions.

      :param menu_items: list of all menu items
      :param user: the user



   .. py:method:: batch_is_authorized_connection(requests, *, user)

      Batch version of ``is_authorized_connection``.

      By default, calls individually the ``is_authorized_connection`` API on each item in the list of
      requests, which can lead to some poor performance. It is recommended to override this method in the auth
      manager implementation to provide a more efficient implementation.

      :param requests: a list of requests containing the parameters for ``is_authorized_connection``
      :param user: the user to performing the action



   .. py:method:: batch_is_authorized_dag(requests, *, user)

      Batch version of ``is_authorized_dag``.

      By default, calls individually the ``is_authorized_dag`` API on each item in the list of requests.
      Can lead to some poor performance. It is recommended to override this method in the auth manager
      implementation to provide a more efficient implementation.

      :param requests: a list of requests containing the parameters for ``is_authorized_dag``
      :param user: the user to performing the action



   .. py:method:: batch_is_authorized_pool(requests, *, user)

      Batch version of ``is_authorized_pool``.

      By default, calls individually the ``is_authorized_pool`` API on each item in the list of
      requests. Can lead to some poor performance. It is recommended to override this method in the auth
      manager implementation to provide a more efficient implementation.

      :param requests: a list of requests containing the parameters for ``is_authorized_pool``
      :param user: the user to performing the action



   .. py:method:: batch_is_authorized_variable(requests, *, user)

      Batch version of ``is_authorized_variable``.

      By default, calls individually the ``is_authorized_variable`` API on each item in the list of
      requests. Can lead to some poor performance. It is recommended to override this method in the auth
      manager implementation to provide a more efficient implementation.

      :param requests: a list of requests containing the parameters for ``is_authorized_variable``
      :param user: the user to performing the action



   .. py:method:: filter_authorized_dag_ids(*, dag_ids, user, method = 'GET')

      Filter DAGs the user has access to.

      :param dag_ids: the list of DAG ids
      :param user: the user
      :param method: the method to filter on



   .. py:method:: get_url_login(**kwargs)

      Return the login page url.



   .. py:method:: get_cli_commands()
      :staticmethod:


      Vends CLI commands to be included in Airflow CLI.



   .. py:method:: get_fastapi_app()

      Specify a sub FastAPI application specific to the auth manager.

      This sub application, if specified, is mounted in the main FastAPI application.



.. py:function:: get_parser()

   Generate documentation; used by Sphinx argparse.


