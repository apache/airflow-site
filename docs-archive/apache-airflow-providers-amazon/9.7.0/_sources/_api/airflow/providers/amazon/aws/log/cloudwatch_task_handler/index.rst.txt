airflow.providers.amazon.aws.log.cloudwatch_task_handler
========================================================

.. py:module:: airflow.providers.amazon.aws.log.cloudwatch_task_handler


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.log.cloudwatch_task_handler.CloudWatchRemoteLogIO
   airflow.providers.amazon.aws.log.cloudwatch_task_handler.CloudwatchTaskHandler


Functions
---------

.. autoapisummary::

   airflow.providers.amazon.aws.log.cloudwatch_task_handler.json_serialize_legacy
   airflow.providers.amazon.aws.log.cloudwatch_task_handler.json_serialize


Module Contents
---------------

.. py:function:: json_serialize_legacy(value)

   JSON serializer replicating legacy watchtower behavior.

   The legacy `watchtower@2.0.1` json serializer function that serialized
   datetime objects as ISO format and all other non-JSON-serializable to `null`.

   :param value: the object to serialize
   :return: string representation of `value` if it is an instance of datetime or `None` otherwise


.. py:function:: json_serialize(value)

   JSON serializer replicating current watchtower behavior.

   This provides customers with an accessible import,
   `airflow.providers.amazon.aws.log.cloudwatch_task_handler.json_serialize`

   :param value: the object to serialize
   :return: string representation of `value`


.. py:class:: CloudWatchRemoteLogIO(context=None)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Convenience super-class to have a logger configured with the class name.


   .. py:attribute:: base_log_folder
      :type:  pathlib.Path


   .. py:attribute:: remote_base
      :type:  str
      :value: ''



   .. py:attribute:: delete_local_copy
      :type:  bool
      :value: True



   .. py:attribute:: log_group_arn
      :type:  str


   .. py:attribute:: log_stream_name
      :type:  str
      :value: ''



   .. py:attribute:: log_group
      :type:  str


   .. py:attribute:: region_name
      :type:  str


   .. py:property:: hook

      Returns AwsLogsHook.



   .. py:property:: handler
      :type: watchtower.CloudWatchLogHandler



   .. py:property:: processors
      :type: tuple[structlog.typing.Processor, Ellipsis]



   .. py:method:: close()


   .. py:method:: upload(path, ti)


   .. py:method:: read(relative_path, ti)


   .. py:method:: get_cloudwatch_logs(stream_name, task_instance)

      Return all logs from the given log stream.

      :param stream_name: name of the Cloudwatch log stream to get all logs from
      :param task_instance: the task instance to get logs about
      :return: string of all logs from the given log stream



.. py:class:: CloudwatchTaskHandler(base_log_folder, log_group_arn, **kwargs)

   Bases: :py:obj:`airflow.utils.log.file_task_handler.FileTaskHandler`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   CloudwatchTaskHandler is a python log handler that handles and reads task instance logs.

   It extends airflow FileTaskHandler and uploads to and reads from Cloudwatch.

   :param base_log_folder: base folder to store logs locally
   :param log_group_arn: ARN of the Cloudwatch log group for remote log storage
       with format ``arn:aws:logs:{region name}:{account id}:log-group:{group name}``


   .. py:attribute:: trigger_should_wrap
      :value: True



   .. py:attribute:: handler
      :value: None



   .. py:attribute:: log_group


   .. py:attribute:: region_name


   .. py:attribute:: closed
      :value: False



   .. py:attribute:: io


   .. py:property:: hook

      Returns AwsLogsHook.



   .. py:method:: set_context(ti, *, identifier = None)

      Provide task_instance context to airflow task handler.

      Generally speaking returns None.  But if attr `maintain_propagate` has
      been set to propagate, then returns sentinel MAINTAIN_PROPAGATE. This
      has the effect of overriding the default behavior to set `propagate`
      to False whenever set_context is called.  At time of writing, this
      functionality is only used in unit testing.

      :param ti: task instance object
      :param identifier: if set, adds suffix to log file. For use when relaying exceptional messages
          to task logs from a context other than task or trigger run



   .. py:method:: close()

      Close the handler responsible for the upload of the local log file to Cloudwatch.



