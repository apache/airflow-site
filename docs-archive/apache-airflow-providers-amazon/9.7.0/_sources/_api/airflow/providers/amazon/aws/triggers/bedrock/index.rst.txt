airflow.providers.amazon.aws.triggers.bedrock
=============================================

.. py:module:: airflow.providers.amazon.aws.triggers.bedrock


Classes
-------

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.bedrock.BedrockCustomizeModelCompletedTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockKnowledgeBaseActiveTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockProvisionModelThroughputCompletedTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockIngestionJobTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockBaseBatchInferenceTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockBatchInferenceCompletedTrigger
   airflow.providers.amazon.aws.triggers.bedrock.BedrockBatchInferenceScheduledTrigger


Module Contents
---------------

.. py:class:: BedrockCustomizeModelCompletedTrigger(*, job_name, waiter_delay = 120, waiter_max_attempts = 75, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when a Bedrock model customization job is complete.

   :param job_name: The name of the Bedrock model customization job.
   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 120)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 75)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: BedrockKnowledgeBaseActiveTrigger(*, knowledge_base_id, waiter_delay = 5, waiter_max_attempts = 24, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when a Bedrock Knowledge Base reaches the ACTIVE state.

   :param knowledge_base_id: The unique identifier of the knowledge base for which to get information.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 5)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 24)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: BedrockProvisionModelThroughputCompletedTrigger(*, provisioned_model_id, waiter_delay = 120, waiter_max_attempts = 75, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when a provisioned throughput job is complete.

   :param provisioned_model_id: The ARN or name of the provisioned throughput.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 120)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 75)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: BedrockIngestionJobTrigger(*, knowledge_base_id, data_source_id, ingestion_job_id, waiter_delay = 60, waiter_max_attempts = 10, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when a Bedrock ingestion job reaches the COMPLETE state.

   :param knowledge_base_id: The unique identifier of the knowledge base for which to get information.
   :param data_source_id: The unique identifier of the data source in the ingestion job.
   :param ingestion_job_id: The unique identifier of the ingestion job.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 60)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 10)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: BedrockBaseBatchInferenceTrigger(*, job_arn, waiter_name = NOTSET, waiter_delay = 120, waiter_max_attempts = 75, aws_conn_id = None)

   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`


   Trigger when a batch inference job is complete.

   :param job_arn: The Amazon Resource Name (ARN) of the batch inference job.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 120)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 75)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: BedrockBatchInferenceCompletedTrigger(*, job_arn, waiter_delay = 120, waiter_max_attempts = 75, aws_conn_id = None)

   Bases: :py:obj:`BedrockBaseBatchInferenceTrigger`


   Trigger when a batch inference job is complete.

   :param job_arn: The Amazon Resource Name (ARN) of the batch inference job.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 120)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 75)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


.. py:class:: BedrockBatchInferenceScheduledTrigger(*, job_arn, waiter_delay = 120, waiter_max_attempts = 75, aws_conn_id = None)

   Bases: :py:obj:`BedrockBaseBatchInferenceTrigger`


   Trigger when a batch inference job is scheduled.

   :param job_arn: The Amazon Resource Name (ARN) of the batch inference job.

   :param waiter_delay: The amount of time in seconds to wait between attempts. (default: 120)
   :param waiter_max_attempts: The maximum number of attempts to be made. (default: 75)
   :param aws_conn_id: The Airflow connection used for AWS credentials.


