airflow.providers.apache.beam.triggers.beam
===========================================

.. py:module:: airflow.providers.apache.beam.triggers.beam


Classes
-------

.. autoapisummary::

   airflow.providers.apache.beam.triggers.beam.BeamPipelineBaseTrigger
   airflow.providers.apache.beam.triggers.beam.BeamPythonPipelineTrigger
   airflow.providers.apache.beam.triggers.beam.BeamJavaPipelineTrigger


Module Contents
---------------

.. py:class:: BeamPipelineBaseTrigger(**kwargs)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   Base class for Beam Pipeline Triggers.


.. py:class:: BeamPythonPipelineTrigger(variables, py_file, py_options = None, py_interpreter = 'python3', py_requirements = None, py_system_site_packages = False, runner = 'DirectRunner', gcp_conn_id = 'google_cloud_default')

   Bases: :py:obj:`BeamPipelineBaseTrigger`


   Trigger to perform checking the Python pipeline status until it reaches terminate state.

   :param variables: Variables passed to the pipeline.
   :param py_file: Path to the python file to execute.
   :param py_options: Additional options.
   :param py_interpreter: Python version of the Apache Beam pipeline. If `None`, this defaults to the
       python3. To track python versions supported by beam and related issues
       check: https://issues.apache.org/jira/browse/BEAM-1251
   :param py_requirements: Additional python package(s) to install.
       If a value is passed to this parameter, a new virtual environment has been created with
       additional packages installed.
       You could also install the apache-beam package if it is not installed on your system, or you want
       to use a different version.
   :param py_system_site_packages: Whether to include system_site_packages in your virtualenv.
       See virtualenv documentation for more information.
       This option is only relevant if the ``py_requirements`` parameter is not None.
   :param runner: Runner on which pipeline will be run. By default, "DirectRunner" is being used.
       Other possible options: DataflowRunner, SparkRunner, FlinkRunner, PortableRunner.
       See: :class:`~providers.apache.beam.hooks.beam.BeamRunnerType`
       See: https://beam.apache.org/documentation/runners/capability-matrix/
   :param gcp_conn_id: Optional. The connection ID to use connecting to Google Cloud.


   .. py:attribute:: variables


   .. py:attribute:: py_file


   .. py:attribute:: py_options
      :value: None



   .. py:attribute:: py_interpreter
      :value: 'python3'



   .. py:attribute:: py_requirements
      :value: None



   .. py:attribute:: py_system_site_packages
      :value: False



   .. py:attribute:: runner
      :value: 'DirectRunner'



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:method:: serialize()

      Serialize BeamPythonPipelineTrigger arguments and classpath.



   .. py:method:: run()
      :async:


      Get current pipeline status and yields a TriggerEvent.



.. py:class:: BeamJavaPipelineTrigger(variables, jar, job_class = None, runner = 'DirectRunner', gcp_conn_id = 'google_cloud_default')

   Bases: :py:obj:`BeamPipelineBaseTrigger`


   Trigger to perform checking the Java pipeline status until it reaches terminate state.

   :param variables: Variables passed to the job.
   :param jar: Name of the jar for the pipeline.
   :param job_class: Optional. Name of the java class for the pipeline.
   :param runner: Runner on which pipeline will be run. By default, "DirectRunner" is being used.
       Other possible options: DataflowRunner, SparkRunner, FlinkRunner, PortableRunner.
       See: :class:`~providers.apache.beam.hooks.beam.BeamRunnerType`
       See: https://beam.apache.org/documentation/runners/capability-matrix/
   :param gcp_conn_id: Optional. The connection ID to use connecting to Google Cloud.


   .. py:attribute:: variables


   .. py:attribute:: jar


   .. py:attribute:: job_class
      :value: None



   .. py:attribute:: runner
      :value: 'DirectRunner'



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:method:: serialize()

      Serialize BeamJavaPipelineTrigger arguments and classpath.



   .. py:method:: run()
      :async:


      Get current Java pipeline status and yields a TriggerEvent.



