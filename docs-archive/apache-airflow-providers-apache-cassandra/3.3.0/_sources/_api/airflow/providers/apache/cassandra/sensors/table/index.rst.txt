:py:mod:`airflow.providers.apache.cassandra.sensors.table`
==========================================================

.. py:module:: airflow.providers.apache.cassandra.sensors.table


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.cassandra.sensors.table.CassandraTableSensor




.. py:class:: CassandraTableSensor(*, table, cassandra_conn_id = CassandraHook.default_conn_name, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Checks for the existence of a table in a Cassandra cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CassandraTableSensor`


   For example, if you want to wait for a table called 't' to be created
   in a keyspace 'k', instantiate it as follows:

   >>> cassandra_sensor = CassandraTableSensor(table="k.t",
   ...                                         cassandra_conn_id="cassandra_default",
   ...                                         task_id="cassandra_sensor")

   :param table: Target Cassandra table.
       Use dot notation to target a specific keyspace.
   :param cassandra_conn_id: The connection ID to use
       when connecting to Cassandra cluster

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('table',)

      

   .. py:method:: poke(context)

      Override when deriving this class.



