:py:mod:`airflow.providers.apache.kafka.operators.produce`
==========================================================

.. py:module:: airflow.providers.apache.kafka.operators.produce


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.kafka.operators.produce.ProduceToTopicOperator



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.apache.kafka.operators.produce.acked



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.apache.kafka.operators.produce.local_logger


.. py:data:: local_logger

   

.. py:function:: acked(err, msg)


.. py:class:: ProduceToTopicOperator(topic, producer_function, kafka_config_id = 'kafka_default', producer_function_args = None, producer_function_kwargs = None, delivery_callback = None, synchronous = True, poll_timeout = 0, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   An operator that produces messages to a Kafka topic.

   Registers a producer to a kafka topic and publishes messages to the log.

   :param kafka_config_id: The connection object to use, defaults to "kafka_default"
   :param topic: The topic the producer should produce to, defaults to None
   :param producer_function: The function that generates key/value pairs as messages for production,
       defaults to None
   :param producer_function_args: Additional arguments to be applied to the producer callable,
       defaults to None
   :param producer_function_kwargs: Additional keyword arguments to be applied to the producer callable,
       defaults to None
   :param delivery_callback: The callback to apply after delivery(or failure) of a message, defaults to None
   :param synchronous: If writes to kafka should be fully synchronous, defaults to True
   :param poll_timeout: How long of a delay should be applied when calling poll after production to kafka,
       defaults to 0
   :raises AirflowException: _description_

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:ProduceToTopicOperator`

   .. py:attribute:: template_fields
      :value: ('topic', 'producer_function', 'producer_function_args', 'producer_function_kwargs', 'kafka_config_id')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



