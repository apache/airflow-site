:py:mod:`airflow.providers.apache.pig.operators.pig`
====================================================

.. py:module:: airflow.providers.apache.pig.operators.pig


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.pig.operators.pig.PigOperator




.. py:class:: PigOperator(*, pig, pig_cli_conn_id = 'pig_cli_default', pigparams_jinja_translate = False, pig_opts = None, pig_properties = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes pig script.

   :param pig: the pig latin script to be executed. (templated)
   :param pig_cli_conn_id: reference to the Hive database
   :param pigparams_jinja_translate: when True, pig params-type templating
       ${var} gets translated into jinja-type templating {{ var }}. Note that
       you may want to use this along with the
       ``DAG(user_defined_macros=myargs)`` parameter. View the DAG
       object documentation for more details.
   :param pig_opts: pig options, such as: -x tez, -useHCatalog, ... - space separated list
   :param pig_properties: pig properties, additional pig properties passed as list

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('pig', 'pig_opts', 'pig_properties')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.pig', '.piglatin')

      

   .. py:attribute:: ui_color
      :value: '#f0e4ec'

      

   .. py:method:: prepare_template()

      Execute after the templated fields get replaced by their content.

      If you need your object to alter the content of the file before the
      template is rendered, it should override this method to do so.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: on_kill()

      Override this method to clean up subprocesses when a task instance gets killed.

      Any use of the threading, subprocess or multiprocessing module within an
      operator needs to be cleaned up, or it will leave ghost processes behind.



