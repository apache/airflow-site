:py:mod:`airflow.providers.apprise.hooks.apprise`
=================================================

.. py:module:: airflow.providers.apprise.hooks.apprise


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apprise.hooks.apprise.AppriseHook




.. py:class:: AppriseHook(apprise_conn_id = default_conn_name)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Use Apprise(https://github.com/caronc/apprise) to interact with notification services.

   The complete list of notification services supported by Apprise can be found at:
   https://github.com/caronc/apprise/wiki#notification-services.

   :param apprise_conn_id: :ref:`Apprise connection id <howto/connection:apprise>`
       that has services configured in the `config` field.

   .. py:attribute:: conn_name_attr
      :value: 'apprise_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'apprise_default'

      

   .. py:attribute:: conn_type
      :value: 'apprise'

      

   .. py:attribute:: hook_name
      :value: 'Apprise'

      

   .. py:method:: get_config_from_conn()


   .. py:method:: set_config_from_conn(apprise_obj)

      Set config from connection to apprise object.


   .. py:method:: notify(body, title = None, notify_type = NotifyType.INFO, body_format = NotifyFormat.TEXT, tag = None, attach = None, interpret_escapes = None, config = None)

      Send message to plugged-in services.

      :param body: Specify the message body
      :param title: Specify the message title. (optional)
      :param notify_type: Specify the message type (default=info). Possible values are "info",
          "success", "failure", and "warning"
      :param body_format: Specify the input message format (default=text). Possible values are "text",
          "html", and "markdown".
      :param tag: Specify one or more tags to filter which services to notify
      :param attach: Specify one or more file attachment locations
      :param interpret_escapes: Enable interpretation of backslash escapes. For example, this would convert
          sequences such as \n and \r to their respective ascii new-line and carriage return characters
      :param config: Specify one or more configuration


   .. py:method:: get_conn()
      :abstractmethod:

      Return connection for the hook.


   .. py:method:: get_connection_form_widgets()
      :staticmethod:

      Return connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:



