:py:mod:`airflow.providers.arangodb.operators.arangodb`
=======================================================

.. py:module:: airflow.providers.arangodb.operators.arangodb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.arangodb.operators.arangodb.AQLOperator
   airflow.providers.arangodb.operators.arangodb.ArangoDBCollectionOperator




.. py:class:: AQLOperator(*, query, arangodb_conn_id = 'arangodb_default', result_processor = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes AQL query in a ArangoDB database.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AQLOperator`

   :param query: the AQL query to be executed. Can receive a str representing a
       AQL statement, or you can provide .sql file having the query
   :param result_processor: function to further process the Result from ArangoDB
   :param arangodb_conn_id: Reference to :ref:`ArangoDB connection id <howto/connection:arangodb>`.

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('query',)

      

   .. py:attribute:: template_ext
      :type: collections.abc.Sequence[str]
      :value: ('.sql',)

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ArangoDBCollectionOperator(*, arangodb_conn_id = 'arangodb_default', collection_name, documents_to_insert = None, documents_to_update = None, documents_to_replace = None, documents_to_delete = None, delete_collection = False, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes collection operations in a ArangoDB database.

   :param arangodb_conn_id: Connection ID for ArangoDB, defaults to "arangodb_default".
   :param collection_name: The name of the collection to be operated on.
   :param documents_to_insert: A list of python dictionaries to insert into the collection.
   :param documents_to_update: A list of python dictionaries to update in the collection.
   :param documents_to_replace: A list of python dictionaries to replace in the collection.
   :param documents_to_delete: A list of python dictionaries to delete from the collection.
   :param delete_collection: If True, the specified collection will be deleted.

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



