:py:mod:`airflow.providers.atlassian.jira.operators.jira`
=========================================================

.. py:module:: airflow.providers.atlassian.jira.operators.jira


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.atlassian.jira.operators.jira.JiraOperator




.. py:class:: JiraOperator(*, jira_method, jira_conn_id = 'jira_default', jira_method_args = None, result_processor = None, get_jira_resource_method = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   JiraOperator to interact and perform action on Jira issue tracking system.

   This operator is designed to use Atlassian Jira SDK. For more information:
   https://atlassian-python-api.readthedocs.io/jira.html

   :param jira_conn_id: Reference to a pre-defined Jira Connection.
   :param jira_method: Method name from Atlassian Jira Python SDK to be called.
   :param jira_method_args: Method parameters for the jira_method. (templated)
   :param result_processor: Function to further process the response from Jira.
   :param get_jira_resource_method: Function or operator to get Jira resource on which the provided
       jira_method will be executed.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('jira_method_args',)

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



