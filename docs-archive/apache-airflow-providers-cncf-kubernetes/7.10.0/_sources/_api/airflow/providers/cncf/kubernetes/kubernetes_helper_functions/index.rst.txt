:py:mod:`airflow.providers.cncf.kubernetes.kubernetes_helper_functions`
=======================================================================

.. py:module:: airflow.providers.cncf.kubernetes.kubernetes_helper_functions


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.create_pod_id
   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.annotations_to_key
   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.get_logs_task_metadata
   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.annotations_for_logging_task_metadata



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.log
   airflow.providers.cncf.kubernetes.kubernetes_helper_functions.alphanum_lower


.. py:data:: log

   

.. py:data:: alphanum_lower

   

.. py:function:: create_pod_id(dag_id = None, task_id = None, *, max_length = 80, unique = True)

   Generate unique pod ID given a dag_id and / or task_id.

   The default of 80 for max length is somewhat arbitrary, mainly a balance between
   content and not overwhelming terminal windows of reasonable width. The true
   upper limit is 253, and this is enforced in construct_pod.

   :param dag_id: DAG ID
   :param task_id: Task ID
   :param max_length: max number of characters
   :param unique: whether a random string suffix should be added
   :return: A valid identifier for a kubernetes pod name


.. py:function:: annotations_to_key(annotations)

   Build a TaskInstanceKey based on pod annotations.


.. py:function:: get_logs_task_metadata()


.. py:function:: annotations_for_logging_task_metadata(annotation_set)


