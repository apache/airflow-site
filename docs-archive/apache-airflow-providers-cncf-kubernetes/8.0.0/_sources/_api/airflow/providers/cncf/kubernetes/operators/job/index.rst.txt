:py:mod:`airflow.providers.cncf.kubernetes.operators.job`
=========================================================

.. py:module:: airflow.providers.cncf.kubernetes.operators.job

.. autoapi-nested-parse::

   Executes a Kubernetes Job.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.operators.job.KubernetesJobOperator




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.operators.job.log


.. py:data:: log

   

.. py:class:: KubernetesJobOperator(*, job_template_file = None, full_job_spec = None, backoff_limit = None, completion_mode = None, completions = None, manual_selector = None, parallelism = None, selector = None, suspend = None, ttl_seconds_after_finished = None, **kwargs)


   Bases: :py:obj:`airflow.providers.cncf.kubernetes.operators.pod.KubernetesPodOperator`

   Executes a Kubernetes Job.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:KubernetesJobOperator`

   .. note::
       If you use `Google Kubernetes Engine <https://cloud.google.com/kubernetes-engine/>`__
       and Airflow is not running in the same cluster, consider using
       :class:`~airflow.providers.google.cloud.operators.kubernetes_engine.GKEStartJobOperator`, which
       simplifies the authorization process.

   :param job_template_file: path to job template file (templated)
   :param full_job_spec: The complete JodSpec
   :param backoff_limit: Specifies the number of retries before marking this job failed. Defaults to 6
   :param completion_mode: CompletionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`.
   :param completions: Specifies the desired number of successfully finished pods the job should be run with.
   :param manual_selector: manualSelector controls generation of pod labels and pod selectors.
   :param parallelism: Specifies the maximum desired number of pods the job should run at any given time.
   :param selector: The selector of this V1JobSpec.
   :param suspend: Suspend specifies whether the Job controller should create Pods or not.
   :param ttl_seconds_after_finished: ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed).

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: hook()


   .. py:method:: client()


   .. py:method:: create_job(job_request_obj)


   .. py:method:: execute(context)

      Based on the deferrable parameter runs the pod asynchronously or synchronously.


   .. py:method:: deserialize_job_template_file(path)
      :staticmethod:

      Generate a Job from a file.

      Unfortunately we need access to the private method
      ``_ApiClient__deserialize_model`` from the kubernetes client.
      This issue is tracked here: https://github.com/kubernetes-client/python/issues/977.

      :param path: Path to the file
      :return: a kubernetes.client.models.V1Job


   .. py:method:: on_kill()

      Override this method to clean up subprocesses when a task instance gets killed.

      Any use of the threading, subprocess or multiprocessing module within an
      operator needs to be cleaned up, or it will leave ghost processes behind.


   .. py:method:: build_job_request_obj(context = None)

      Return V1Job object based on job template file, full job spec, and other operator parameters.

      The V1Job attributes are derived (in order of precedence) from operator params, full job spec, job
      template file.


   .. py:method:: reconcile_jobs(base_job, client_job)
      :staticmethod:

      Merge Kubernetes Job objects.

      :param base_job: has the base attributes which are overwritten if they exist
          in the client job and remain if they do not exist in the client_job
      :param client_job: the job that the client wants to create.
      :return: the merged jobs

      This can't be done recursively as certain fields are overwritten and some are concatenated.


   .. py:method:: reconcile_job_specs(base_spec, client_spec)
      :staticmethod:

      Merge Kubernetes JobSpec objects.

      :param base_spec: has the base attributes which are overwritten if they exist
          in the client_spec and remain if they do not exist in the client_spec
      :param client_spec: the spec that the client wants to create.
      :return: the merged specs



