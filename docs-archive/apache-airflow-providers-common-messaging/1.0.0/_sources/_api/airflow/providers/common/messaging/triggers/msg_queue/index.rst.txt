airflow.providers.common.messaging.triggers.msg_queue
=====================================================

.. py:module:: airflow.providers.common.messaging.triggers.msg_queue


Classes
-------

.. autoapisummary::

   airflow.providers.common.messaging.triggers.msg_queue.MessageQueueTrigger


Module Contents
---------------

.. py:class:: MessageQueueTrigger(*, queue, **kwargs)

   Bases: :py:obj:`airflow.triggers.base.BaseEventTrigger`


   ``MessageQueueTrigger`` serves as a unified trigger for monitoring message queues from different providers.

   It abstracts away provider-specific details, allowing users to monitor a queue with a single trigger,
   regardless of the underlying provider.

   This makes it easy to switch providers without modifying the trigger.

   :param queue: The queue identifier

   .. seealso::
       For more information on how to use this trigger, take a look at the guide:
       :ref:`howto/trigger:MessageQueueTrigger`


   .. py:attribute:: queue


   .. py:attribute:: kwargs


   .. py:property:: trigger
      :type: airflow.triggers.base.BaseEventTrigger



   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).



   .. py:method:: run()
      :async:


      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



