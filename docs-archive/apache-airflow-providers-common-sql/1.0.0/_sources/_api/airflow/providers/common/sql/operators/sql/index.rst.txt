:py:mod:`airflow.providers.common.sql.operators.sql`
====================================================

.. py:module:: airflow.providers.common.sql.operators.sql


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.common.sql.operators.sql.SQLColumnCheckOperator
   airflow.providers.common.sql.operators.sql.SQLTableCheckOperator



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.common.sql.operators.sql.parse_boolean



.. py:function:: parse_boolean(val)

   Try to parse a string into boolean.

   Raises ValueError if the input is not a valid true- or false-like string value.


.. py:class:: SQLColumnCheckOperator(*, table, column_mapping, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`airflow.operators.sql.BaseSQLOperator`

   Performs one or more of the templated checks in the column_checks dictionary.
   Checks are performed on a per-column basis specified by the column_mapping.
   Each check can take one or more of the following options:
   - equal_to: an exact value to equal, cannot be used with other comparison options
   - greater_than: value that result should be strictly greater than
   - less_than: value that results should be strictly less than
   - geq_to: value that results should be greater than or equal to
   - leq_to: value that results should be less than or equal to
   - tolerance: the percentage that the result may be off from the expected value

   :param table: the table to run checks on
   :param column_mapping: the dictionary of columns and their associated checks, e.g.

   .. code-block:: python

       {
           "col_name": {
               "null_check": {
                   "equal_to": 0,
               },
               "min": {
                   "greater_than": 5,
                   "leq_to": 10,
                   "tolerance": 0.2,
               },
               "max": {"less_than": 1000, "geq_to": 10, "tolerance": 0.01},
           }
       }

   :param conn_id: the connection ID used to connect to the database
   :param database: name of database which overwrite the defined one in connection

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLColumnCheckOperator`

   .. py:attribute:: column_checks
      

      

   .. py:method:: execute(self, context=None)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLTableCheckOperator(*, table, checks, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`airflow.operators.sql.BaseSQLOperator`

   Performs one or more of the checks provided in the checks dictionary.
   Checks should be written to return a boolean result.

   :param table: the table to run checks on
   :param checks: the dictionary of checks, e.g.:

   .. code-block:: python

       {
           "row_count_check": {"check_statement": "COUNT(*) = 1000"},
           "column_sum_check": {"check_statement": "col_a + col_b < col_c"},
       }

   :param conn_id: the connection ID used to connect to the database
   :param database: name of database which overwrite the defined one in connection

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLTableCheckOperator`

   .. py:attribute:: sql_check_template
      :annotation: = CASE WHEN check_statement THEN 1 ELSE 0 END AS check_name

      

   .. py:attribute:: sql_min_template
      :annotation: = MIN(check_name)

      

   .. py:method:: execute(self, context=None)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



