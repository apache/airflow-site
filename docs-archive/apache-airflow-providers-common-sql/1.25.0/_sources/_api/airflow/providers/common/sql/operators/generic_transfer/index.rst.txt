airflow.providers.common.sql.operators.generic_transfer
=======================================================

.. py:module:: airflow.providers.common.sql.operators.generic_transfer


Classes
-------

.. autoapisummary::

   airflow.providers.common.sql.operators.generic_transfer.GenericTransfer


Module Contents
---------------

.. py:class:: GenericTransfer(*, sql, destination_table, source_conn_id, source_hook_params = None, destination_conn_id, destination_hook_params = None, preoperator = None, insert_args = None, page_size = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Moves data from a connection to another.

   Assuming that they both provide the required methods in their respective hooks.
   The source hook needs to expose a `get_records` method, and the destination a
   `insert_rows` method.

   This is meant to be used on small-ish datasets that fit in memory.

   :param sql: SQL query to execute against the source database. (templated)
   :param destination_table: target table. (templated)
   :param source_conn_id: source connection. (templated)
   :param source_hook_params: source hook parameters.
   :param destination_conn_id: destination connection. (templated)
   :param destination_hook_params: destination hook parameters.
   :param preoperator: sql statement or list of statements to be
       executed prior to loading the data. (templated)
   :param insert_args: extra params for `insert_rows` method.
   :param page_size: number of records to be read in paginated mode (optional).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('source_conn_id', 'destination_conn_id', 'sql', 'destination_table', 'preoperator', 'insert_args')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.sql', '.hql')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: ui_color
      :value: '#b0f07c'



   .. py:attribute:: sql


   .. py:attribute:: destination_table


   .. py:attribute:: source_conn_id


   .. py:attribute:: source_hook_params
      :value: None



   .. py:attribute:: destination_conn_id


   .. py:attribute:: destination_hook_params
      :value: None



   .. py:attribute:: preoperator
      :value: None



   .. py:attribute:: insert_args


   .. py:attribute:: page_size
      :value: None



   .. py:method:: get_hook(conn_id, hook_params = None)
      :classmethod:


      Return DbApiHook for this connection id.

      :param conn_id: connection id
      :param hook_params: hook parameters
      :return: DbApiHook for this connection



   .. py:property:: source_hook
      :type: airflow.providers.common.sql.hooks.sql.DbApiHook



   .. py:property:: destination_hook
      :type: airflow.providers.common.sql.hooks.sql.DbApiHook



   .. py:method:: get_paginated_sql(offset)

      Format the paginated SQL statement using the current format.



   .. py:method:: render_template_fields(context, jinja_env = None)

      Template all attributes listed in *self.template_fields*.

      This mutates the attributes in-place and is irreversible.

      :param context: Context dict with values to apply on content.
      :param jinja_env: Jinja's environment to use for rendering.



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: execute_complete(context, event = None)


