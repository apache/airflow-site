airflow.providers.common.sql.operators.sql
==========================================

.. py:module:: airflow.providers.common.sql.operators.sql


Attributes
----------

.. autoapisummary::

   airflow.providers.common.sql.operators.sql.parse_boolean


Classes
-------

.. autoapisummary::

   airflow.providers.common.sql.operators.sql.BaseSQLOperator
   airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator
   airflow.providers.common.sql.operators.sql.SQLColumnCheckOperator
   airflow.providers.common.sql.operators.sql.SQLTableCheckOperator
   airflow.providers.common.sql.operators.sql.SQLCheckOperator
   airflow.providers.common.sql.operators.sql.SQLValueCheckOperator
   airflow.providers.common.sql.operators.sql.SQLIntervalCheckOperator
   airflow.providers.common.sql.operators.sql.SQLThresholdCheckOperator
   airflow.providers.common.sql.operators.sql.BranchSQLOperator


Functions
---------

.. autoapisummary::

   airflow.providers.common.sql.operators.sql.default_output_processor


Module Contents
---------------

.. py:data:: parse_boolean

   :sphinx-autoapi-skip:

   IMPORTANT!!! Keep it for compatibility with released 8.4.0 version of google provider.

   Unfortunately the provider used _get_failed_checks and parse_boolean as imports and we should
   keep those methods to avoid 8.4.0 version from failing.


.. py:function:: default_output_processor(results, descriptions)

.. py:class:: BaseSQLOperator(*, conn_id = None, database = None, hook_params = None, retry_on_failure = True, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   This is a base class for generic SQL Operator to get a DB Hook.

   The provided method is .get_db_hook(). The default behavior will try to
   retrieve the DB hook based on connection type.
   You can customize the behavior by overriding the .get_db_hook() method.

   :param conn_id: reference to a specific database


   .. py:attribute:: conn_id_field
      :value: 'conn_id'



   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('conn_id', 'database', 'hook_params')



   .. py:attribute:: conn_id
      :value: None



   .. py:attribute:: database
      :value: None



   .. py:attribute:: hook_params


   .. py:attribute:: retry_on_failure
      :value: True



   .. py:method:: get_hook(conn_id, hook_params = None)
      :classmethod:


      Return default hook for this connection id.

      :param conn_id: connection id
      :param hook_params: hook parameters
      :return: default hook for this connection



   .. py:method:: get_db_hook()

      Get the database hook for the connection.

      :return: the database hook object.



.. py:class:: SQLExecuteQueryOperator(*, sql, autocommit = False, parameters = None, handler = fetch_all_handler, output_processor = None, conn_id = None, database = None, split_statements = None, return_last = True, show_return_value_in_logs = False, requires_result_fetch = False, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Executes SQL code in a specific database.

   When implementing a specific Operator, you can also implement `_process_output` method in the
   hook to perform additional processing of values returned by the DB Hook of yours. For example, you
   can join description retrieved from the cursors of your statements with returned values, or save
   the output of your operator to a file.

   :param sql: the SQL code or string pointing to a template file to be executed (templated).
       File must have a '.sql' extension.
   :param autocommit: (optional) if True, each command is automatically committed (default: False).
   :param parameters: (optional) the parameters to render the SQL query with.
   :param handler: (optional) the function that will be applied to the cursor (default: fetch_all_handler).
   :param output_processor: (optional) the function that will be applied to the result
       (default: default_output_processor).
   :param split_statements: (optional) if split single SQL string into statements. By default, defers
       to the default value in the ``run`` method of the configured hook.
   :param conn_id: the connection ID used to connect to the database
   :param database: name of database which overwrite the defined one in connection
   :param return_last: (optional) return the result of only last statement (default: True).
   :param show_return_value_in_logs: (optional) if true operator output will be printed to the task log.
       Use with caution. It's not recommended to dump large datasets to the log. (default: False).
   :param requires_result_fetch: (optional) if True, ensures that query results are fetched before
       completing execution. If `do_xcom_push` is True, results are fetched automatically,
       making this parameter redundant.  (default: False).

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLExecuteQueryOperator`


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql', 'parameters', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.sql', '.json')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: ui_color
      :value: '#cdaaed'



   .. py:attribute:: sql


   .. py:attribute:: autocommit
      :value: False



   .. py:attribute:: parameters
      :value: None



   .. py:attribute:: handler


   .. py:attribute:: split_statements
      :value: None



   .. py:attribute:: return_last
      :value: True



   .. py:attribute:: show_return_value_in_logs
      :value: False



   .. py:attribute:: requires_result_fetch
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: prepare_template()

      Parse template file for attribute parameters.



   .. py:method:: get_openlineage_facets_on_start()


   .. py:method:: get_openlineage_facets_on_complete(task_instance)


.. py:class:: SQLColumnCheckOperator(*, table, column_mapping, partition_clause = None, conn_id = None, database = None, accept_none = True, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Performs one or more of the templated checks in the column_checks dictionary.

   Checks are performed on a per-column basis specified by the column_mapping.

   Each check can take one or more of the following options:

   * ``equal_to``: an exact value to equal, cannot be used with other comparison options
   * ``greater_than``: value that result should be strictly greater than
   * ``less_than``: value that results should be strictly less than
   * ``geq_to``: value that results should be greater than or equal to
   * ``leq_to``: value that results should be less than or equal to
   * ``tolerance``: the percentage that the result may be off from the expected value
   * ``partition_clause``: an extra clause passed into a WHERE statement to partition data

   :param table: the table to run checks on
   :param column_mapping: the dictionary of columns and their associated checks, e.g.

       .. code-block:: python

           {
               "col_name": {
                   "null_check": {
                       "equal_to": 0,
                       "partition_clause": "foreign_key IS NOT NULL",
                   },
                   "min": {
                       "greater_than": 5,
                       "leq_to": 10,
                       "tolerance": 0.2,
                   },
                   "max": {"less_than": 1000, "geq_to": 10, "tolerance": 0.01},
               }
           }

   :param partition_clause: a partial SQL statement that is added to a WHERE clause in the query built by
       the operator that creates partition_clauses for the checks to run on, e.g.

       .. code-block:: python

           "date = '1970-01-01'"

   :param conn_id: the connection ID used to connect to the database
   :param database: name of database which overwrite the defined one in connection
   :param accept_none: whether or not to accept None values returned by the query. If true, converts None
       to 0.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLColumnCheckOperator`


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('table', 'partition_clause', 'sql', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: sql_check_template
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """
                 SELECT '{column}' AS col_name, '{check}' AS check_type, {column}_{check} AS check_result
                 FROM (SELECT {check_statement} AS {column}_{check} FROM {table} {partition_clause}) AS sq
             """

      .. raw:: html

         </details>




   .. py:attribute:: column_checks


   .. py:attribute:: table


   .. py:attribute:: column_mapping


   .. py:attribute:: partition_clause
      :value: None



   .. py:attribute:: accept_none
      :value: True



   .. py:attribute:: sql
      :value: 'SELECT col_name, check_type, check_result FROM () AS check_columns'



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLTableCheckOperator(*, table, checks, partition_clause = None, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Performs one or more of the checks provided in the checks dictionary.

   Checks should be written to return a boolean result.

   :param table: the table to run checks on
   :param checks: the dictionary of checks, where check names are followed by a dictionary containing at
       least a check statement, and optionally a partition clause, e.g.:

       .. code-block:: python

           {
               "row_count_check": {"check_statement": "COUNT(*) = 1000"},
               "column_sum_check": {"check_statement": "col_a + col_b < col_c"},
               "third_check": {"check_statement": "MIN(col) = 1", "partition_clause": "col IS NOT NULL"},
           }


   :param partition_clause: a partial SQL statement that is added to a WHERE clause in the query built by
       the operator that creates partition_clauses for the checks to run on, e.g.

       .. code-block:: python

           "date = '1970-01-01'"

   :param conn_id: the connection ID used to connect to the database
   :param database: name of database which overwrite the defined one in connection

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLTableCheckOperator`


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('table', 'partition_clause', 'sql', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: sql_check_template
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """
             SELECT '{check_name}' AS check_name, MIN({check_name}) AS check_result
             FROM (SELECT CASE WHEN {check_statement} THEN 1 ELSE 0 END AS {check_name}
                   FROM {table} {partition_clause}) AS sq
             """

      .. raw:: html

         </details>




   .. py:attribute:: table


   .. py:attribute:: checks


   .. py:attribute:: partition_clause
      :value: None



   .. py:attribute:: sql
      :value: 'SELECT check_name, check_result FROM () AS check_table'



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLCheckOperator(*, sql, conn_id = None, database = None, parameters = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Performs checks against a db.

   The ``SQLCheckOperator`` expects a sql query that will return a single row.
   Each value on that first row is evaluated using python ``bool`` casting.
   If any of the values return ``False`` the check is failed and errors out.
   If a Python dict is returned, and any values in the Python dict are ``False``,
   the check is failed and errors out.

   Note that Python bool casting evals the following as ``False``:

   * ``False``
   * ``0``
   * Empty string (``""``)
   * Empty list (``[]``)
   * Empty dictionary or set (``{}``)
   * Dictionary with value = ``False`` (``{'DUPLICATE_ID_CHECK': False}``)

   Given a query like ``SELECT COUNT(*) FROM foo``, it will fail only if
   the count ``== 0``. You can craft much more complex query that could,
   for instance, check that the table has the same number of rows as
   the source table upstream, or that the count of today's partition is
   greater than yesterday's partition, or that a set of metrics are less
   than 3 standard deviation for the 7 day average.

   This operator can be used as a data quality check in your pipeline, and
   depending on where you put it in your DAG, you have the choice to
   stop the critical path, preventing from
   publishing dubious data, or on the side and receive email alerts
   without stopping the progress of the DAG.

   :param sql: the sql to be executed. (templated)
   :param conn_id: the connection ID used to connect to the database.
   :param database: name of database which overwrite the defined one in connection
   :param parameters: (optional) the parameters to render the SQL query with.


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.hql', '.sql')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: ui_color
      :value: '#fff7e6'



   .. py:attribute:: sql


   .. py:attribute:: parameters
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLValueCheckOperator(*, sql, pass_value, tolerance = None, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Performs a simple value check using sql code.

   :param sql: the sql to be executed. (templated)
   :param conn_id: the connection ID used to connect to the database.
   :param database: name of database which overwrite the defined one in connection


   .. py:attribute:: __mapper_args__


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql', 'pass_value', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.hql', '.sql')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: ui_color
      :value: '#fff7e6'



   .. py:attribute:: sql


   .. py:attribute:: pass_value
      :value: ''



   .. py:attribute:: tol


   .. py:attribute:: has_tolerance


   .. py:method:: check_value(records)


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLIntervalCheckOperator(*, table, metrics_thresholds, date_filter_column = 'ds', days_back = -7, ratio_formula = 'max_over_min', ignore_zero = True, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Check that metrics given as SQL expressions are within tolerance of the ones from days_back before.

   :param table: the table name
   :param conn_id: the connection ID used to connect to the database.
   :param database: name of database which will overwrite the defined one in connection
   :param days_back: number of days between ds and the ds we want to check
       against. Defaults to 7 days
   :param date_filter_column: The column name for the dates to filter on. Defaults to 'ds'
   :param ratio_formula: which formula to use to compute the ratio between
       the two metrics. Assuming cur is the metric of today and ref is
       the metric to today - days_back. Default: 'max_over_min'

       * ``max_over_min``: computes max(cur, ref) / min(cur, ref)
       * ``relative_diff``: computes abs(cur-ref) / ref

   :param ignore_zero: whether we should ignore zero metrics
   :param metrics_thresholds: a dictionary of ratios indexed by metrics


   .. py:attribute:: __mapper_args__


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql1', 'sql2', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.hql', '.sql')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: ui_color
      :value: '#fff7e6'



   .. py:attribute:: ratio_formulas


   .. py:attribute:: ratio_formula
      :value: 'max_over_min'



   .. py:attribute:: ignore_zero
      :value: True



   .. py:attribute:: table


   .. py:attribute:: metrics_thresholds


   .. py:attribute:: metrics_sorted


   .. py:attribute:: date_filter_column
      :value: 'ds'



   .. py:attribute:: days_back


   .. py:attribute:: sql1
      :value: "SELECT  FROM Uninferable WHERE ds='{{ ds }}'"



   .. py:attribute:: sql2
      :value: "SELECT  FROM Uninferable WHERE ds='{{ macros.ds_add(ds, Uninferable) }}'"



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SQLThresholdCheckOperator(*, sql, min_threshold, max_threshold, conn_id = None, database = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`


   Performs a value check using sql code against a minimum threshold and a maximum threshold.

   Thresholds can be in the form of a numeric value OR a sql statement that results a numeric.

   :param sql: the sql to be executed. (templated)
   :param conn_id: the connection ID used to connect to the database.
   :param database: name of database which overwrite the defined one in connection
   :param min_threshold: numerical value or min threshold sql to be executed (templated)
   :param max_threshold: numerical value or max threshold sql to be executed (templated)

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SQLThresholdCheckOperator`


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql', 'min_threshold', 'max_threshold', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.hql', '.sql')



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: sql


   .. py:attribute:: min_threshold


   .. py:attribute:: max_threshold


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: push(meta_data)

      Send data check info and metadata to an external database.

      Default functionality will log metadata.



.. py:class:: BranchSQLOperator(*, sql, follow_task_ids_if_true, follow_task_ids_if_false, conn_id = 'default_conn_id', database = None, parameters = None, **kwargs)

   Bases: :py:obj:`BaseSQLOperator`, :py:obj:`airflow.models.SkipMixin`


   Allows a DAG to "branch" or follow a specified path based on the results of a SQL query.

   :param sql: The SQL code to be executed, should return true or false (templated)
      Template reference are recognized by str ending in '.sql'.
      Expected SQL query to return a boolean (True/False), integer (0 = False, Otherwise = 1)
      or string (true/y/yes/1/on/false/n/no/0/off).
   :param follow_task_ids_if_true: task id or task ids to follow if query returns true
   :param follow_task_ids_if_false: task id or task ids to follow if query returns false
   :param conn_id: the connection ID used to connect to the database.
   :param database: name of database which overwrite the defined one in connection
   :param parameters: (optional) the parameters to render the SQL query with.


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('sql', 'conn_id', 'database', 'hook_params')



   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.sql',)



   .. py:attribute:: template_fields_renderers
      :type:  ClassVar[dict]


   .. py:attribute:: ui_color
      :value: '#a22034'



   .. py:attribute:: ui_fgcolor
      :value: '#F7F7F7'



   .. py:attribute:: sql


   .. py:attribute:: parameters
      :value: None



   .. py:attribute:: follow_task_ids_if_true


   .. py:attribute:: follow_task_ids_if_false


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



