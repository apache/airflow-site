airflow.providers.common.sql.dialects.dialect
=============================================

.. py:module:: airflow.providers.common.sql.dialects.dialect


Attributes
----------

.. autoapisummary::

   airflow.providers.common.sql.dialects.dialect.T


Classes
-------

.. autoapisummary::

   airflow.providers.common.sql.dialects.dialect.Dialect


Module Contents
---------------

.. py:data:: T

.. py:class:: Dialect(hook, **kwargs)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Generic dialect implementation.


   .. py:attribute:: pattern


   .. py:attribute:: hook
      :type:  airflow.providers.common.sql.hooks.sql.DbApiHook


   .. py:property:: placeholder
      :type: str



   .. py:property:: inspector
      :type: sqlalchemy.engine.Inspector



   .. py:property:: insert_statement_format
      :type: str



   .. py:property:: replace_statement_format
      :type: str



   .. py:property:: escape_word_format
      :type: str



   .. py:property:: escape_column_names
      :type: bool



   .. py:method:: escape_word(word)

      Escape the word if necessary.

      If the word is a reserved word or contains special characters or if the ``escape_column_names``
      property is set to True in connection extra field, then the given word will be escaped.

      :param word: Name of the column
      :return: The escaped word



   .. py:method:: unescape_word(word)

      Remove escape characters from each part of a dotted identifier (e.g., schema.table).

      :param word: Escaped schema, table, or column name, potentially with multiple segments.
      :return: The word without escaped characters.



   .. py:method:: extract_schema_from_table(table)
      :classmethod:



   .. py:method:: get_column_names(table, schema = None, predicate = lambda column: True)


   .. py:method:: get_target_fields(table, schema = None)


   .. py:method:: get_primary_keys(table, schema = None)


   .. py:method:: run(sql, autocommit = False, parameters = None, handler = None, split_statements = False, return_last = True)


   .. py:method:: get_records(sql, parameters = None)


   .. py:property:: reserved_words
      :type: set[str]



   .. py:method:: generate_insert_sql(table, values, target_fields, **kwargs)

      Generate the INSERT SQL statement.

      :param table: Name of the target table
      :param values: The row to insert into the table
      :param target_fields: The names of the columns to fill in the table
      :return: The generated INSERT SQL statement



   .. py:method:: generate_replace_sql(table, values, target_fields, **kwargs)

      Generate the REPLACE SQL statement.

      :param table: Name of the target table
      :param values: The row to insert into the table
      :param target_fields: The names of the columns to fill in the table
      :return: The generated REPLACE SQL statement



