airflow.providers.databricks.hooks.databricks_base
==================================================

.. py:module:: airflow.providers.databricks.hooks.databricks_base

.. autoapi-nested-parse::

   Databricks hook.

   This hook enable the submitting and running of jobs to the Databricks platform. Internally the
   operators talk to the ``api/2.0/jobs/runs/submit``
   `endpoint <https://docs.databricks.com/api/latest/jobs.html#runs-submit>`_.



Attributes
----------

.. autoapisummary::

   airflow.providers.databricks.hooks.databricks_base.AZURE_METADATA_SERVICE_TOKEN_URL
   airflow.providers.databricks.hooks.databricks_base.AZURE_METADATA_SERVICE_INSTANCE_URL
   airflow.providers.databricks.hooks.databricks_base.TOKEN_REFRESH_LEAD_TIME
   airflow.providers.databricks.hooks.databricks_base.AZURE_MANAGEMENT_ENDPOINT
   airflow.providers.databricks.hooks.databricks_base.DEFAULT_DATABRICKS_SCOPE
   airflow.providers.databricks.hooks.databricks_base.OIDC_TOKEN_SERVICE_URL
   airflow.providers.databricks.hooks.databricks_base.DEFAULT_AZURE_CREDENTIAL_SETTING_KEY


Classes
-------

.. autoapisummary::

   airflow.providers.databricks.hooks.databricks_base.BaseDatabricksHook
   airflow.providers.databricks.hooks.databricks_base.BearerAuth


Module Contents
---------------

.. py:data:: AZURE_METADATA_SERVICE_TOKEN_URL
   :value: 'http://169.254.169.254/metadata/identity/oauth2/token'


.. py:data:: AZURE_METADATA_SERVICE_INSTANCE_URL
   :value: 'http://169.254.169.254/metadata/instance'


.. py:data:: TOKEN_REFRESH_LEAD_TIME
   :value: 120


.. py:data:: AZURE_MANAGEMENT_ENDPOINT
   :value: 'https://management.core.windows.net/'


.. py:data:: DEFAULT_DATABRICKS_SCOPE
   :value: '2ff814a6-3304-4ab8-85cb-cd0e6f879c1d'


.. py:data:: OIDC_TOKEN_SERVICE_URL
   :value: '{}/oidc/v1/token'


.. py:data:: DEFAULT_AZURE_CREDENTIAL_SETTING_KEY
   :value: 'use_default_azure_credential'


.. py:class:: BaseDatabricksHook(databricks_conn_id = default_conn_name, timeout_seconds = 180, retry_limit = 3, retry_delay = 1.0, retry_args = None, caller = 'Unknown')

   Bases: :py:obj:`airflow.hooks.base.BaseHook`


   Base for interaction with Databricks.

   :param databricks_conn_id: Reference to the :ref:`Databricks connection <howto/connection:databricks>`.
   :param timeout_seconds: The amount of time in seconds the requests library
       will wait before timing-out.
   :param retry_limit: The number of times to retry the connection in case of
       service outages.
   :param retry_delay: The number of seconds to wait between retries (it
       might be a floating point number).
   :param retry_args: An optional dictionary with arguments passed to ``tenacity.Retrying`` class.
   :param caller: The name of the operator that is calling the hook.


   .. py:attribute:: conn_name_attr
      :type:  str
      :value: 'databricks_conn_id'



   .. py:attribute:: default_conn_name
      :value: 'databricks_default'



   .. py:attribute:: conn_type
      :value: 'databricks'



   .. py:attribute:: extra_parameters


   .. py:attribute:: databricks_conn_id
      :value: 'databricks_default'



   .. py:attribute:: timeout_seconds
      :value: 180



   .. py:attribute:: retry_limit
      :value: 3



   .. py:attribute:: retry_delay
      :value: 1.0



   .. py:attribute:: oauth_tokens
      :type:  dict[str, dict]


   .. py:attribute:: token_timeout_seconds
      :value: 10



   .. py:attribute:: caller
      :value: 'Unknown'



   .. py:property:: databricks_conn
      :type: airflow.models.Connection



   .. py:method:: get_conn()

      Return connection for the hook.



   .. py:property:: user_agent_header
      :type: dict[str, str]



   .. py:property:: user_agent_value
      :type: str



   .. py:property:: host
      :type: str



   .. py:method:: __aenter__()
      :async:



   .. py:method:: __aexit__(*err)
      :async:



.. py:class:: BearerAuth(token)

   Bases: :py:obj:`aiohttp.BasicAuth`


   aiohttp only ships BasicAuth, for Bearer auth we need a subclass of BasicAuth.


   .. py:attribute:: token


   .. py:method:: encode()

      Encode credentials.



