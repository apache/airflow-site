:py:mod:`airflow.providers.dbt.cloud.sensors.dbt`
=================================================

.. py:module:: airflow.providers.dbt.cloud.sensors.dbt


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.dbt.cloud.sensors.dbt.DbtCloudJobRunSensor
   airflow.providers.dbt.cloud.sensors.dbt.DbtCloudJobRunAsyncSensor




.. py:class:: DbtCloudJobRunSensor(*, dbt_cloud_conn_id = DbtCloudHook.default_conn_name, run_id, account_id = None, **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Checks the status of a dbt Cloud job run.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:DbtCloudJobRunSensor`

   :param dbt_cloud_conn_id: The connection identifier for connecting to dbt Cloud.
   :param run_id: The job run identifier.
   :param account_id: The dbt Cloud account identifier.

   .. py:attribute:: template_fields
      :value: ('dbt_cloud_conn_id', 'run_id', 'account_id')

      

   .. py:method:: poke(context)

      Function defined by the sensors while deriving this class should override.



.. py:class:: DbtCloudJobRunAsyncSensor(*, poll_interval = 5, timeout = 60 * 60 * 24 * 7, **kwargs)

   Bases: :py:obj:`DbtCloudJobRunSensor`

   Checks the status of a dbt Cloud job run asynchronously.

   .. seealso::
       For more information on the DbtCloudJobRunAsyncSensor, take a look at the guide::
       :ref:`howto/operator:DbtCloudJobRunAsyncSensor`

   :param dbt_cloud_conn_id: The connection identifier for connecting to dbt Cloud.
   :param run_id: The job run identifier.
   :param account_id: The dbt Cloud account identifier.
   :param poll_interval: Periodic time interval for the sensor to check for job status.
   :param timeout: Time in seconds to wait for a job run to reach a terminal status. Defaults to 7 days.

   .. py:method:: execute(context)

      Defers to Trigger class to poll for state of the job run until
      it reaches a failure state or success state


   .. py:method:: execute_complete(context, event)

      Callback for when the trigger fires - returns immediately.
      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



