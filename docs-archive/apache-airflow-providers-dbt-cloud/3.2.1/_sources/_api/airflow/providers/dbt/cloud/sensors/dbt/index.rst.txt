:py:mod:`airflow.providers.dbt.cloud.sensors.dbt`
=================================================

.. py:module:: airflow.providers.dbt.cloud.sensors.dbt


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.dbt.cloud.sensors.dbt.DbtCloudJobRunSensor
   airflow.providers.dbt.cloud.sensors.dbt.DbtCloudJobRunAsyncSensor




.. py:class:: DbtCloudJobRunSensor(*, dbt_cloud_conn_id = DbtCloudHook.default_conn_name, run_id, account_id = None, deferrable = False, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Checks the status of a dbt Cloud job run.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:DbtCloudJobRunSensor`

   :param dbt_cloud_conn_id: The connection identifier for connecting to dbt Cloud.
   :param run_id: The job run identifier.
   :param account_id: The dbt Cloud account identifier.
   :param deferrable: Run sensor in the deferrable mode.

   .. py:attribute:: template_fields
      :value: ('dbt_cloud_conn_id', 'run_id', 'account_id')

      

   .. py:method:: poke(context)

      Function defined by the sensors while deriving this class should override.


   .. py:method:: execute(context)

      Run the sensor.

      Depending on whether ``deferrable`` is set, this would either defer to
      the triggerer or poll for states of the job run, until the job reaches a
      failure state or success state.


   .. py:method:: execute_complete(context, event)

      Callback for when the trigger fires - returns immediately.

      This relies on trigger to throw an exception, otherwise it assumes
      execution was successful.



.. py:class:: DbtCloudJobRunAsyncSensor(**kwargs)


   Bases: :py:obj:`DbtCloudJobRunSensor`

   This class is deprecated.

   Please use :class:`airflow.providers.dbt.cloud.sensor.dbt.DbtCloudJobRunSensor`
   with ``deferrable=True``.


