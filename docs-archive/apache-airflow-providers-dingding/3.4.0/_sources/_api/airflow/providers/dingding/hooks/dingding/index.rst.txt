:py:mod:`airflow.providers.dingding.hooks.dingding`
===================================================

.. py:module:: airflow.providers.dingding.hooks.dingding


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.dingding.hooks.dingding.DingdingHook




.. py:class:: DingdingHook(dingding_conn_id='dingding_default', message_type = 'text', message = None, at_mobiles = None, at_all = False, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.http.hooks.http.HttpHook`

   Send message using a DingTalk Custom Robot API.

   .. seealso::
       `How to get webhook token <https://open.dingtalk.com/document/robots/custom-robot-access>`__

   :param dingding_conn_id: Dingding connection id that has access token in the password field,
       and optional host name in host field, if host not set than default
       ``https://oapi.dingtalk.com`` will use.
   :param message_type: Message type you want to send to Dingding, support five type so far
       including ``text``, ``link``, ``markdown``, ``actionCard``, ``feedCard``.
   :param message: The message send to chat group
   :param at_mobiles: Remind specific users with this message
   :param at_all: Remind all people in group or not. If True, will overwrite ``at_mobiles``

   .. py:attribute:: conn_name_attr
      :value: 'dingding_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'dingding_default'

      

   .. py:attribute:: conn_type
      :value: 'dingding'

      

   .. py:attribute:: hook_name
      :value: 'DingTalk Custom Robot (Dingding)'

      

   .. py:method:: get_conn(headers = None)

      Overwrite HttpHook get_conn.

      We just need base_url and headers, and not don't need generic params.

      :param headers: additional headers to be passed through as a dictionary


   .. py:method:: send()

      Send DingTalk Custom Robot message.



