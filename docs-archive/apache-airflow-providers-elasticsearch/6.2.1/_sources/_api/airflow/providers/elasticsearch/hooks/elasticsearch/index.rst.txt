airflow.providers.elasticsearch.hooks.elasticsearch
===================================================

.. py:module:: airflow.providers.elasticsearch.hooks.elasticsearch


Classes
-------

.. autoapisummary::

   airflow.providers.elasticsearch.hooks.elasticsearch.ElasticsearchSQLCursor
   airflow.providers.elasticsearch.hooks.elasticsearch.ESConnection
   airflow.providers.elasticsearch.hooks.elasticsearch.ElasticsearchSQLHook
   airflow.providers.elasticsearch.hooks.elasticsearch.ElasticsearchPythonHook


Functions
---------

.. autoapisummary::

   airflow.providers.elasticsearch.hooks.elasticsearch.connect


Module Contents
---------------

.. py:function:: connect(host = 'localhost', port = 9200, user = None, password = None, scheme = 'http', **kwargs)

.. py:class:: ElasticsearchSQLCursor(es, **kwargs)

   A PEP 249-like Cursor class for Elasticsearch SQL API.


   .. py:attribute:: es


   .. py:attribute:: body


   .. py:property:: response
      :type: elastic_transport.ObjectApiResponse



   .. py:property:: cursor


   .. py:property:: rows


   .. py:property:: rowcount
      :type: int



   .. py:property:: description
      :type: list[tuple]



   .. py:method:: execute(statement, params = None)


   .. py:method:: fetchone()


   .. py:method:: fetchmany(size = None)
      :abstractmethod:



   .. py:method:: fetchall()


   .. py:method:: close()


.. py:class:: ESConnection(host = 'localhost', port = 9200, user = None, password = None, scheme = 'http', **kwargs)

   wrapper class for elasticsearch.Elasticsearch.


   .. py:attribute:: host
      :value: 'localhost'



   .. py:attribute:: port
      :value: 9200



   .. py:attribute:: user
      :value: None



   .. py:attribute:: password
      :value: None



   .. py:attribute:: scheme
      :value: 'http'



   .. py:attribute:: kwargs


   .. py:attribute:: url


   .. py:method:: cursor()


   .. py:method:: close()


   .. py:method:: commit()


   .. py:method:: execute_sql(query, params = None)


.. py:class:: ElasticsearchSQLHook(schema = 'http', connection = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`


   Interact with Elasticsearch through the elasticsearch-dbapi.

   This hook uses the Elasticsearch conn_id.

   :param elasticsearch_conn_id: The :ref:`ElasticSearch connection id <howto/connection:elasticsearch>`
       used for Elasticsearch credentials.


   .. py:attribute:: conn_name_attr
      :value: 'elasticsearch_conn_id'



   .. py:attribute:: default_conn_name
      :value: 'elasticsearch_default'



   .. py:attribute:: connector


   .. py:attribute:: conn_type
      :value: 'elasticsearch'



   .. py:attribute:: hook_name
      :value: 'Elasticsearch'



   .. py:attribute:: schema
      :value: 'http'



   .. py:method:: get_conn()

      Return an elasticsearch connection object.



   .. py:method:: get_uri()

      Extract the URI from the connection.

      :return: the extracted uri.



.. py:class:: ElasticsearchPythonHook(hosts, es_conn_args = None)

   Bases: :py:obj:`airflow.hooks.base.BaseHook`


   Interacts with Elasticsearch. This hook uses the official Elasticsearch Python Client.

   :param hosts: list: A list of a single or many Elasticsearch instances. Example: ["http://localhost:9200"]
   :param es_conn_args: dict: Additional arguments you might need to enter to connect to Elasticsearch.
                               Example: {"ca_cert":"/path/to/cert", "basic_auth": "(user, pass)"}


   .. py:attribute:: hosts


   .. py:attribute:: es_conn_args


   .. py:property:: get_conn

      Return the Elasticsearch client (cached).



   .. py:method:: search(query, index = '_all')

      Return results matching a query using Elasticsearch DSL.

      :param index: str: The index you want to query
      :param query: dict: The query you want to run

      :returns: dict: The response 'hits' object from Elasticsearch



