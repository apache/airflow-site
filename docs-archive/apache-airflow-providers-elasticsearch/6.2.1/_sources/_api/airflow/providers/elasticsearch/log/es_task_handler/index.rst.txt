airflow.providers.elasticsearch.log.es_task_handler
===================================================

.. py:module:: airflow.providers.elasticsearch.log.es_task_handler


Attributes
----------

.. autoapisummary::

   airflow.providers.elasticsearch.log.es_task_handler.EsLogMsgType
   airflow.providers.elasticsearch.log.es_task_handler.LOG_LINE_DEFAULTS
   airflow.providers.elasticsearch.log.es_task_handler.USE_PER_RUN_LOG_ID
   airflow.providers.elasticsearch.log.es_task_handler.VALID_ES_CONFIG_KEYS


Classes
-------

.. autoapisummary::

   airflow.providers.elasticsearch.log.es_task_handler.ElasticsearchTaskHandler


Functions
---------

.. autoapisummary::

   airflow.providers.elasticsearch.log.es_task_handler.get_es_kwargs_from_config


Module Contents
---------------

.. py:data:: EsLogMsgType

.. py:data:: LOG_LINE_DEFAULTS

.. py:data:: USE_PER_RUN_LOG_ID
   :value: True


.. py:data:: VALID_ES_CONFIG_KEYS

.. py:function:: get_es_kwargs_from_config()

.. py:class:: ElasticsearchTaskHandler(base_log_folder, end_of_log_mark, write_stdout, json_format, json_fields, write_to_es = False, target_index = 'airflow-logs', host_field = 'host', offset_field = 'offset', host = 'http://localhost:9200', frontend = 'localhost:5601', index_patterns = conf.get('elasticsearch', 'index_patterns'), index_patterns_callable = conf.get('elasticsearch', 'index_patterns_callable', fallback=''), es_kwargs = 'default_es_kwargs', **kwargs)

   Bases: :py:obj:`airflow.utils.log.file_task_handler.FileTaskHandler`, :py:obj:`airflow.utils.log.logging_mixin.ExternalLoggingMixin`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   ElasticsearchTaskHandler is a python log handler that reads logs from Elasticsearch.

   Note that Airflow by default does not handle the indexing of logs into Elasticsearch. Instead,
   Airflow flushes logs into local files. Additional software setup is required to index
   the logs into Elasticsearch, such as using Filebeat and Logstash.

   Airflow can be configured to support directly writing logging to Elasticsearch. To enable this feature,
   set `json_format` and `write_to_es` to `True`.

   To efficiently query and sort Elasticsearch results, this handler assumes each
   log message has a field `log_id` consists of ti primary keys:
   `log_id = {dag_id}-{task_id}-{logical_date}-{try_number}`
   Log messages with specific log_id are sorted based on `offset`,
   which is a unique integer indicates log message's order.
   Timestamps here are unreliable because multiple log messages
   might have the same timestamp.

   :param base_log_folder: base folder to store logs locally
   :param log_id_template: log id template
   :param host: Elasticsearch host name


   .. py:attribute:: PAGE
      :value: 0



   .. py:attribute:: MAX_LINE_PER_PAGE
      :value: 1000



   .. py:attribute:: LOG_NAME
      :value: 'Elasticsearch'



   .. py:attribute:: trigger_should_wrap
      :value: True



   .. py:attribute:: closed
      :value: False



   .. py:attribute:: client


   .. py:attribute:: frontend
      :value: 'localhost:5601'



   .. py:attribute:: mark_end_on_close
      :value: True



   .. py:attribute:: end_of_log_mark


   .. py:attribute:: write_stdout


   .. py:attribute:: json_format


   .. py:attribute:: json_fields


   .. py:attribute:: host_field
      :value: 'host'



   .. py:attribute:: offset_field
      :value: 'offset'



   .. py:attribute:: index_patterns


   .. py:attribute:: index_patterns_callable


   .. py:attribute:: context_set
      :value: False



   .. py:attribute:: write_to_es
      :value: False



   .. py:attribute:: target_index
      :value: 'airflow-logs'



   .. py:attribute:: delete_local_copy


   .. py:attribute:: formatter
      :type:  logging.Formatter


   .. py:attribute:: handler
      :type:  logging.FileHandler | logging.StreamHandler


   .. py:method:: format_url(host)
      :staticmethod:


      Format the given host string to ensure it starts with 'http' and check if it represents a valid URL.

      :params host: The host string to format and check.



   .. py:method:: emit(record)

      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.



   .. py:method:: set_context(ti, *, identifier = None)

      Provide task_instance context to airflow task handler.

      :param ti: task instance object
      :param identifier: if set, identifies the Airflow component which is relaying logs from
          exceptional scenarios related to the task instance



   .. py:method:: close()

      Tidy up any resources used by the handler.

      This version removes the handler from an internal map of handlers,
      _handlers, which is used for handler lookup by name. Subclasses
      should ensure that this gets called from overridden close()
      methods.



   .. py:property:: log_name
      :type: str


      The log name.



   .. py:method:: get_external_log_url(task_instance, try_number)

      Create an address for an external log collecting service.

      :param task_instance: task instance object
      :param try_number: task instance try_number to read logs from.
      :return: URL to the external log collection service



   .. py:property:: supports_external_link
      :type: bool


      Whether we can support external links.



