:py:mod:`airflow.providers.fab.auth_manager.cli_commands.user_command`
======================================================================

.. py:module:: airflow.providers.fab.auth_manager.cli_commands.user_command

.. autoapi-nested-parse::

   User sub-commands.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.fab.auth_manager.cli_commands.user_command.UserSchema



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.fab.auth_manager.cli_commands.user_command.users_list
   airflow.providers.fab.auth_manager.cli_commands.user_command.users_create
   airflow.providers.fab.auth_manager.cli_commands.user_command.user_reset_password
   airflow.providers.fab.auth_manager.cli_commands.user_command.users_delete
   airflow.providers.fab.auth_manager.cli_commands.user_command.users_manage_role
   airflow.providers.fab.auth_manager.cli_commands.user_command.users_export
   airflow.providers.fab.auth_manager.cli_commands.user_command.users_import



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.fab.auth_manager.cli_commands.user_command.add_role
   airflow.providers.fab.auth_manager.cli_commands.user_command.remove_role


.. py:class:: UserSchema(*, only = None, exclude = (), many = False, context = None, load_only = (), dump_only = (), partial = None, unknown = None)


   Bases: :py:obj:`marshmallow.Schema`

   user collection item schema.

   .. py:attribute:: id

      

   .. py:attribute:: firstname

      

   .. py:attribute:: lastname

      

   .. py:attribute:: username

      

   .. py:attribute:: email

      

   .. py:attribute:: roles

      


.. py:function:: users_list(args)

   List users at the command line.


.. py:function:: users_create(args)

   Create new user in the DB.


.. py:function:: user_reset_password(args)

   Reset user password user from DB.


.. py:function:: users_delete(args)

   Delete user from DB.


.. py:function:: users_manage_role(args, remove=False)

   Delete or appends user roles.


.. py:function:: users_export(args)

   Export all users to the json file.


.. py:function:: users_import(args)

   Import users from the json file.


.. py:data:: add_role

   

.. py:data:: remove_role

   

