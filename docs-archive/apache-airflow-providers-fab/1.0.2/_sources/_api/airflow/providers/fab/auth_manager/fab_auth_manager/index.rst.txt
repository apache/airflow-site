:py:mod:`airflow.providers.fab.auth_manager.fab_auth_manager`
=============================================================

.. py:module:: airflow.providers.fab.auth_manager.fab_auth_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.fab.auth_manager.fab_auth_manager.get_parser



.. py:class:: FabAuthManager(appbuilder)


   Bases: :py:obj:`airflow.auth.managers.base_auth_manager.BaseAuthManager`

   Flask-AppBuilder auth manager.

   This auth manager is responsible for providing a backward compatible user management experience to users.

   .. py:method:: get_cli_commands()
      :staticmethod:

      Vends CLI commands to be included in Airflow CLI.


   .. py:method:: get_api_endpoints()

      Return API endpoint(s) definition for the auth manager.


   .. py:method:: get_user_display_name()

      Return the user's display name associated to the user in session.


   .. py:method:: get_user()

      Return the user associated to the user in session.


   .. py:method:: init()

      Run operations when Airflow is initializing.


   .. py:method:: is_logged_in()

      Return whether the user is logged in.


   .. py:method:: is_authorized_configuration(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on configuration.

      :param method: the method to perform
      :param details: optional details about the configuration
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_connection(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a connection.

      :param method: the method to perform
      :param details: optional details about the connection
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_dag(*, method, access_entity = None, details = None, user = None)

      Return whether the user is authorized to access the dag.

      There are multiple scenarios:

      1. ``dag_access`` is not provided which means the user wants to access the DAG itself and not a sub
      entity (e.g. DAG runs).
      2. ``dag_access`` is provided which means the user wants to access a sub entity of the DAG
      (e.g. DAG runs).

          a. If ``method`` is GET, then check the user has READ permissions on the DAG and the sub entity.
          b. Else, check the user has EDIT permissions on the DAG and ``method`` on the sub entity. However,
              if no specific DAG is targeted, just check the sub entity.

      :param method: The method to authorize.
      :param access_entity: The dag access entity.
      :param details: The dag details.
      :param user: The user.


   .. py:method:: is_authorized_dataset(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a dataset.

      :param method: the method to perform
      :param details: optional details about the dataset
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_pool(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a pool.

      :param method: the method to perform
      :param details: optional details about the pool
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_variable(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a variable.

      :param method: the method to perform
      :param details: optional details about the variable
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_view(*, access_view, user = None)

      Return whether the user is authorized to access a read-only state of the installation.

      :param access_view: the specific read-only view/state the authorization request is about.
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_custom_view(*, fab_action_name, fab_resource_name, user = None)

      Return whether the user is authorized to perform a given action on a custom view.

      A custom view is a view defined as part of the auth manager. This view is then only available when
      the auth manager is used as part of the environment.

      By default, it throws an exception because auth managers do not define custom views by default.
      If an auth manager defines some custom views, it needs to override this method.

      :param fab_action_name: the name of the FAB action defined in the view in ``base_permissions``
      :param fab_resource_name: the name of the FAB resource defined in the view in
          ``class_permission_name``
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: get_permitted_dag_ids(*, methods = None, user=None, session = NEW_SESSION)

      Get readable or writable DAGs for user.

      By default, reads all the DAGs and check individually if the user has permissions to access the DAG.
      Can lead to some poor performance. It is recommended to override this method in the auth manager
      implementation to provide a more efficient implementation.


   .. py:method:: security_manager()

      Return the security manager specific to FAB.


   .. py:method:: get_url_login(**kwargs)

      Return the login page url.


   .. py:method:: get_url_logout()

      Return the logout page url.


   .. py:method:: get_url_user_profile()

      Return the url to a page displaying info about the current user.



.. py:function:: get_parser()

   Generate documentation; used by Sphinx argparse.


