airflow.providers.fab.auth_manager.views.permissions
====================================================

.. py:module:: airflow.providers.fab.auth_manager.views.permissions


Classes
-------

.. autoapisummary::

   airflow.providers.fab.auth_manager.views.permissions.ActionModelView
   airflow.providers.fab.auth_manager.views.permissions.PermissionPairModelView
   airflow.providers.fab.auth_manager.views.permissions.ResourceModelView


Module Contents
---------------

.. py:class:: ActionModelView(**kwargs)

   Bases: :py:obj:`flask_appbuilder.security.views.PermissionModelView`


   Customize permission names for FAB's builtin PermissionModelView.


   .. py:attribute:: class_permission_name
      :value: 'Permissions'


      Override class permission name default fallback to self.__class__.__name__



   .. py:attribute:: route_base
      :value: '/actions'


      Override this if you want to define your own relative url 



   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



   .. py:attribute:: list_title

      List Title, if not configured the default is 'List ' with pretty model name 



   .. py:attribute:: show_title

      Show Title , if not configured the default is 'Show ' with pretty model name 



   .. py:attribute:: add_title

      Add Title , if not configured the default is 'Add ' with pretty model name 



   .. py:attribute:: edit_title

      Edit Title , if not configured the default is 'Edit ' with pretty model name 



   .. py:attribute:: label_columns

      Dictionary of labels for your columns,
      override this if you want different pretify labels

      example (will just override the label for name column)::

          class MyView(ModelView):
              datamodel = SQLAInterface(MyTable)
              label_columns = {'name':'My Name Label Override'}




.. py:class:: PermissionPairModelView(**kwargs)

   Bases: :py:obj:`flask_appbuilder.security.views.PermissionViewModelView`


   Customize permission names for FAB's builtin PermissionViewModelView.


   .. py:attribute:: class_permission_name
      :value: 'Permission Views'


      Override class permission name default fallback to self.__class__.__name__



   .. py:attribute:: route_base
      :value: '/permissions'


      Override this if you want to define your own relative url 



   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



   .. py:attribute:: list_title

      List Title, if not configured the default is 'List ' with pretty model name 



   .. py:attribute:: show_title

      Show Title , if not configured the default is 'Show ' with pretty model name 



   .. py:attribute:: add_title

      Add Title , if not configured the default is 'Add ' with pretty model name 



   .. py:attribute:: edit_title

      Edit Title , if not configured the default is 'Edit ' with pretty model name 



   .. py:attribute:: label_columns

      Dictionary of labels for your columns,
      override this if you want different pretify labels

      example (will just override the label for name column)::

          class MyView(ModelView):
              datamodel = SQLAInterface(MyTable)
              label_columns = {'name':'My Name Label Override'}




   .. py:attribute:: list_columns
      :value: ['action', 'resource']


      A list of columns (or model's methods) to be displayed on the list view.
      Use it to control the order of the display



.. py:class:: ResourceModelView(**kwargs)

   Bases: :py:obj:`flask_appbuilder.security.views.ViewMenuModelView`


   Customize permission names for FAB's builtin ViewMenuModelView.


   .. py:attribute:: class_permission_name
      :value: 'View Menus'


      Override class permission name default fallback to self.__class__.__name__



   .. py:attribute:: route_base
      :value: '/resources'


      Override this if you want to define your own relative url 



   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



   .. py:attribute:: list_title

      List Title, if not configured the default is 'List ' with pretty model name 



   .. py:attribute:: show_title

      Show Title , if not configured the default is 'Show ' with pretty model name 



   .. py:attribute:: add_title

      Add Title , if not configured the default is 'Add ' with pretty model name 



   .. py:attribute:: edit_title

      Edit Title , if not configured the default is 'Edit ' with pretty model name 



   .. py:attribute:: label_columns

      Dictionary of labels for your columns,
      override this if you want different pretify labels

      example (will just override the label for name column)::

          class MyView(ModelView):
              datamodel = SQLAInterface(MyTable)
              label_columns = {'name':'My Name Label Override'}




