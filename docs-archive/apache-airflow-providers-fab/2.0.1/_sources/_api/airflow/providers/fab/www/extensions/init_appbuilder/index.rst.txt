airflow.providers.fab.www.extensions.init_appbuilder
====================================================

.. py:module:: airflow.providers.fab.www.extensions.init_appbuilder


Attributes
----------

.. autoapisummary::

   airflow.providers.fab.www.extensions.init_appbuilder.log


Classes
-------

.. autoapisummary::

   airflow.providers.fab.www.extensions.init_appbuilder.AirflowAppBuilder


Functions
---------

.. autoapisummary::

   airflow.providers.fab.www.extensions.init_appbuilder.dynamic_class_import
   airflow.providers.fab.www.extensions.init_appbuilder.init_appbuilder


Module Contents
---------------

.. py:data:: log

.. py:function:: dynamic_class_import(class_path)

   Will dynamically import a class from a string path.

   :param class_path: string with class path
   :return: class


.. py:class:: AirflowAppBuilder(app=None, session = None, menu=None, indexview=None, base_template='airflow/main.html', static_folder='static/appbuilder', static_url_path='/appbuilder', enable_plugins = False)

   This is the base class for all the framework.


   .. py:attribute:: baseviews
      :type:  list[flask_appbuilder.BaseView | sqlalchemy.orm.Session]
      :value: []



   .. py:attribute:: app
      :value: None



   .. py:attribute:: session
      :value: None



   .. py:attribute:: sm
      :type:  flask_appbuilder.security.manager.BaseSecurityManager


   .. py:attribute:: bm
      :value: None



   .. py:attribute:: addon_managers
      :type:  dict


   .. py:attribute:: menu
      :value: None



   .. py:attribute:: indexview
      :value: None



   .. py:attribute:: static_folder
      :value: None



   .. py:attribute:: static_url_path
      :value: None



   .. py:attribute:: template_filters
      :value: None



   .. py:attribute:: base_template
      :value: 'airflow/main.html'



   .. py:attribute:: enable_plugins
      :value: False



   .. py:attribute:: update_perms
      :value: True



   .. py:attribute:: auth_rate_limited
      :value: True



   .. py:attribute:: auth_rate_limit


   .. py:method:: init_app(app, session)

      Will initialize the Flask app, supporting the app factory pattern.

      :param app:
      :param session: The SQLAlchemy session



   .. py:property:: get_app

      Get current or configured flask app.

      :return: Flask App



   .. py:property:: get_session

      Get the current sqlalchemy session.

      :return: SQLAlchemy Session



   .. py:property:: app_name

      Get the App name.

      :return: String with app name



   .. py:property:: app_theme

      Get the App theme name.

      :return: String app theme name



   .. py:property:: app_icon

      Get the App icon location.

      :return: String with relative app icon location



   .. py:property:: languages


   .. py:property:: version

      Get the current F.A.B. version.

      :return: String with the current F.A.B. version



   .. py:method:: add_view(baseview, name, href='', icon='', label='', category='', category_icon='', category_label='', menu_cond=None)

      Add your views associated with menus using this method.

      :param baseview:
          A BaseView type class instantiated or not.
          This method will instantiate the class for you if needed.
      :param name:
          The string name that identifies the menu.
      :param href:
          Override the generated link for the menu.
          You can use an url string or an endpoint name
          if non provided default_view from view will be set as link.
      :param icon:
          Font-Awesome icon name, optional.
      :param label:
          The label that will be displayed on the menu,
          if absent param name will be used
      :param category:
          The menu category where the menu will be included,
          if non provided the view will be accessible as a top menu.
      :param category_icon:
          Font-Awesome icon name for the category, optional.
      :param category_label:
          The label that will be displayed on the menu,
          if absent param name will be used
      :param menu_cond:
          If a callable, :code:`menu_cond` will be invoked when
          constructing the menu items. If it returns :code:`True`,
          then this link will be a part of the menu. Otherwise, it
          will not be included in the menu items. Defaults to
          :code:`None`, meaning the item will always be present.

      Examples::

          appbuilder = AppBuilder(app, db)
          # Register a view, rendering a top menu without icon.
          appbuilder.add_view(MyModelView(), "My View")
          # or not instantiated
          appbuilder.add_view(MyModelView, "My View")
          # Register a view, a submenu "Other View" from "Other" with a phone icon.
          appbuilder.add_view(MyOtherModelView, "Other View", icon="fa-phone", category="Others")
          # Register a view, with category icon and translation.
          appbuilder.add_view(
              YetOtherModelView,
              "Other View",
              icon="fa-phone",
              label=_("Other View"),
              category="Others",
              category_icon="fa-envelop",
              category_label=_("Other View"),
          )
          # Register a view whose menu item will be conditionally displayed
          appbuilder.add_view(
              YourFeatureView,
              "Your Feature",
              icon="fa-feature",
              label=_("Your Feature"),
              menu_cond=lambda: is_feature_enabled("your-feature"),
          )
          # Add a link
          appbuilder.add_link("google", href="www.google.com", icon="fa-google-plus")



   .. py:method:: add_link(name, href, icon='', label='', category='', category_icon='', category_label='', baseview=None, cond=None)

      Add your own links to menu using this method.

      :param name:
          The string name that identifies the menu.
      :param href:
          Override the generated link for the menu.
          You can use an url string or an endpoint name
      :param icon:
          Font-Awesome icon name, optional.
      :param label:
          The label that will be displayed on the menu,
          if absent param name will be used
      :param category:
          The menu category where the menu will be included,
          if non provided the view will be accessible as a top menu.
      :param category_icon:
          Font-Awesome icon name for the category, optional.
      :param category_label:
          The label that will be displayed on the menu,
          if absent param name will be used
      :param baseview:
          A BaseView type class instantiated.
      :param cond:
          If a callable, :code:`cond` will be invoked when
          constructing the menu items. If it returns :code:`True`,
          then this link will be a part of the menu. Otherwise, it
          will not be included in the menu items. Defaults to
          :code:`None`, meaning the item will always be present.



   .. py:method:: add_separator(category, cond=None)

      Add a separator to the menu, you will sequentially create the menu.

      :param category:
          The menu category where the separator will be included.
      :param cond:
          If a callable, :code:`cond` will be invoked when
          constructing the menu items. If it returns :code:`True`,
          then this separator will be a part of the menu. Otherwise,
          it will not be included in the menu items. Defaults to
          :code:`None`, meaning the separator will always be present.



   .. py:method:: add_view_no_menu(baseview, endpoint=None, static_folder=None)

      Add your views without creating a menu.

      :param baseview: A BaseView type class instantiated.



   .. py:property:: get_url_for_index


   .. py:method:: get_url_for_login_with(next_url = None)


   .. py:property:: get_url_for_login


   .. py:method:: get_url_for_locale(lang)


   .. py:method:: add_limits(baseview)


   .. py:method:: add_permissions(update_perms=False)


   .. py:method:: register_blueprint(baseview, endpoint=None, static_folder=None)


.. py:function:: init_appbuilder(app, enable_plugins)

   Init `Flask App Builder <https://flask-appbuilder.readthedocs.io/en/latest/>`__.


