airflow.providers.fab.auth_manager.fab_auth_manager
===================================================

.. py:module:: airflow.providers.fab.auth_manager.fab_auth_manager


Classes
-------

.. autoapisummary::

   airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager


Functions
---------

.. autoapisummary::

   airflow.providers.fab.auth_manager.fab_auth_manager.get_parser


Module Contents
---------------

.. py:class:: FabAuthManager(context=None)

   Bases: :py:obj:`airflow.api_fastapi.auth.managers.base_auth_manager.BaseAuthManager`\ [\ :py:obj:`airflow.providers.fab.auth_manager.models.User`\ ]


   Flask-AppBuilder auth manager.

   This auth manager is responsible for providing a backward compatible user management experience to users.


   .. py:attribute:: appbuilder
      :type:  airflow.providers.fab.www.extensions.init_appbuilder.AirflowAppBuilder | None
      :value: None



   .. py:method:: init_flask_resources()


   .. py:property:: apiserver_endpoint
      :type: str



   .. py:method:: get_cli_commands()
      :staticmethod:


      Vends CLI commands to be included in Airflow CLI.



   .. py:method:: get_fastapi_app()

      Get the FastAPI app.



   .. py:method:: get_api_endpoints()


   .. py:method:: get_user()

      Return the user associated to the user in session.

      Attempt to find the current user in g.user, as defined by the kerberos authentication backend.
      If no such user is found, return the `current_user` local proxy object, linked to the user session.




   .. py:method:: deserialize_user(token)

      Create a user object from dict.



   .. py:method:: serialize_user(user)

      Create a subject and extra claims dict from a user object.



   .. py:method:: is_logged_in()

      Return whether the user is logged in.



   .. py:method:: is_authorized_configuration(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on configuration.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the configuration



   .. py:method:: is_authorized_connection(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a connection.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the connection



   .. py:method:: is_authorized_dag(*, method, user, access_entity = None, details = None)

      Return whether the user is authorized to access the dag.

      There are multiple scenarios:

      1. ``dag_access`` is not provided which means the user wants to access the DAG itself and not a sub
      entity (e.g. DAG runs).
      2. ``dag_access`` is provided which means the user wants to access a sub entity of the DAG
      (e.g. DAG runs).

          a. If ``method`` is GET, then check the user has READ permissions on the DAG and the sub entity.
          b. Else, check the user has EDIT permissions on the DAG and ``method`` on the sub entity. However,
              if no specific DAG is targeted, just check the sub entity.

      :param method: The method to authorize.
      :param user: The user performing the action.
      :param access_entity: The dag access entity.
      :param details: The dag details.



   .. py:method:: is_authorized_backfill(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a backfill.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the backfill



   .. py:method:: is_authorized_asset(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on an asset.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the asset



   .. py:method:: is_authorized_asset_alias(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on an asset alias.

      :param method: the method to perform
      :param user: the user to perform the action on
      :param details: optional details about the asset alias



   .. py:method:: is_authorized_pool(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a pool.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the pool



   .. py:method:: is_authorized_variable(*, method, user, details = None)

      Return whether the user is authorized to perform a given action on a variable.

      :param method: the method to perform
      :param user: the user to performing the action
      :param details: optional details about the variable



   .. py:method:: is_authorized_view(*, access_view, user)

      Return whether the user is authorized to access a read-only state of the installation.

      :param access_view: the specific read-only view/state the authorization request is about.
      :param user: the user to performing the action



   .. py:method:: is_authorized_custom_view(*, method, resource_name, user)

      Return whether the user is authorized to perform a given action on a custom view.

      A custom view can be a view defined as part of the auth manager. This view is then only available when
      the auth manager is used as part of the environment. It can also be a view defined as part of a
      plugin defined by a user.

      :param method: the method to perform.
          The method can also be a string if the action has been defined in a plugin.
          In that case, the action can be anything (e.g. can_do).
          See https://github.com/apache/airflow/issues/39144
      :param resource_name: the name of the resource
      :param user: the user to performing the action



   .. py:method:: filter_authorized_menu_items(menu_items, user)

      Filter menu items based on user permissions.

      :param menu_items: list of all menu items
      :param user: the user



   .. py:method:: get_authorized_dag_ids(*, user, method = 'GET', session = NEW_SESSION)

      Get DAGs the user has access to.

      By default, reads all the DAGs and check individually if the user has permissions to access the DAG.
      Can lead to some poor performance. It is recommended to override this method in the auth manager
      implementation to provide a more efficient implementation.

      :param user: the user
      :param method: the method to filter on
      :param session: the session



   .. py:property:: security_manager
      :type: airflow.providers.fab.auth_manager.security_manager.override.FabAirflowSecurityManagerOverride


      Return the security manager specific to FAB.



   .. py:method:: get_url_login(**kwargs)

      Return the login page url.



   .. py:method:: get_url_logout()

      Return the logout page url.



   .. py:method:: register_views()


   .. py:method:: get_extra_menu_items(*, user)

      Provide additional links to be added to the menu.

      :param user: the user



   .. py:method:: get_db_manager()
      :staticmethod:


      Specify the DB manager path needed to run the auth manager.

      This is optional and not all auth managers require a DB manager.



.. py:function:: get_parser()

   Generate documentation; used by Sphinx argparse.


