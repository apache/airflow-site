airflow.providers.fab.auth_manager.security_manager.override
============================================================

.. py:module:: airflow.providers.fab.auth_manager.security_manager.override


Attributes
----------

.. autoapisummary::

   airflow.providers.fab.auth_manager.security_manager.override.log
   airflow.providers.fab.auth_manager.security_manager.override.MAX_NUM_DATABASE_USER_SESSIONS


Classes
-------

.. autoapisummary::

   airflow.providers.fab.auth_manager.security_manager.override.FabAirflowSecurityManagerOverride


Module Contents
---------------

.. py:data:: log

.. py:data:: MAX_NUM_DATABASE_USER_SESSIONS
   :value: 50000


.. py:class:: FabAirflowSecurityManagerOverride(appbuilder)

   Bases: :py:obj:`airflow.providers.fab.www.security_manager.AirflowSecurityManagerV2`


   This security manager overrides the default AirflowSecurityManager security manager.

   This security manager is used only if the auth manager FabAuthManager is used. It defines everything in
   the security manager that is needed for the FabAuthManager to work. Any operation specific to
   the AirflowSecurityManager should be defined here instead of AirflowSecurityManager.

   :param appbuilder: The appbuilder.


   .. py:attribute:: auth_view
      :value: None


      The obj instance for authentication view 



   .. py:attribute:: registeruser_view
      :value: None


      The obj instance for registering user view 



   .. py:attribute:: user_view
      :value: None


      The obj instance for user view 



   .. py:attribute:: user_model


   .. py:attribute:: role_model


   .. py:attribute:: action_model


   .. py:attribute:: resource_model


   .. py:attribute:: permission_model

      Views 



   .. py:attribute:: authdbview

      Override if you want your own Authentication DB view 



   .. py:attribute:: authldapview

      Override if you want your own Authentication LDAP view 



   .. py:attribute:: authoidview

      Override if you want your own Authentication OID view 



   .. py:attribute:: authoauthview

      Override if you want your own Authentication OAuth view 



   .. py:attribute:: authremoteuserview

      Override if you want your own Authentication REMOTE_USER view 



   .. py:attribute:: registeruserdbview

      Override if you want your own register user db view 



   .. py:attribute:: registeruseroidview

      Override if you want your own register user OpenID view 



   .. py:attribute:: registeruseroauthview

      Override if you want your own register user OAuth view 



   .. py:attribute:: actionmodelview


   .. py:attribute:: permissionmodelview


   .. py:attribute:: rolemodelview


   .. py:attribute:: registeruser_model


   .. py:attribute:: registerusermodelview


   .. py:attribute:: resourcemodelview


   .. py:attribute:: userdbmodelview


   .. py:attribute:: resetmypasswordview


   .. py:attribute:: resetpasswordview


   .. py:attribute:: userinfoeditview


   .. py:attribute:: userldapmodelview


   .. py:attribute:: useroauthmodelview


   .. py:attribute:: userremoteusermodelview


   .. py:attribute:: useroidmodelview


   .. py:attribute:: userstatschartview


   .. py:attribute:: jwt_manager
      :value: None


      Flask-JWT-Extended 



   .. py:attribute:: oauth
      :value: None



   .. py:attribute:: oauth_remotes
      :type:  dict[str, Any]

      Initialized (remote_app) providers dict {'provider_name', OBJ } 



   .. py:attribute:: oauth_user_info
      :value: None



   .. py:attribute:: oauth_allow_list
      :type:  dict[str, list]

      OAuth email allow list 



   .. py:attribute:: DAG_RESOURCES


   .. py:attribute:: VIEWER_PERMISSIONS


   .. py:attribute:: USER_PERMISSIONS


   .. py:attribute:: OP_PERMISSIONS


   .. py:attribute:: ADMIN_PERMISSIONS


   .. py:attribute:: ROLE_CONFIGS
      :type:  list[dict[str, Any]]


   .. py:attribute:: RESOURCE_DETAILS_MAP


   .. py:attribute:: DAG_ACTIONS


   .. py:attribute:: appbuilder


   .. py:attribute:: lm


   .. py:method:: register_views()

      Register FAB auth manager related views.



   .. py:property:: get_session


   .. py:method:: create_login_manager()

      Create the login manager.



   .. py:method:: create_jwt_manager()

      Create the JWT manager.



   .. py:method:: reset_password(userid, password)

      Change/Reset a user's password for auth db.

      Password will be hashed and saved.

      :param userid: the user id to reset the password
      :param password: the clear text password to reset and save hashed on the db



   .. py:method:: reset_user_sessions(user)


   .. py:method:: load_user_jwt(_jwt_header, jwt_data)


   .. py:property:: auth_type

      Get the auth type.



   .. py:property:: is_auth_limited
      :type: bool


      Is the auth rate limited.



   .. py:property:: auth_rate_limit
      :type: str


      Get the auth rate limit.



   .. py:property:: auth_role_public

      Get the public role.



   .. py:property:: oauth_providers

      Oauth providers.



   .. py:property:: auth_ldap_tls_cacertdir

      LDAP TLS CA certificate directory.



   .. py:property:: auth_ldap_tls_cacertfile

      LDAP TLS CA certificate file.



   .. py:property:: auth_ldap_tls_certfile

      LDAP TLS certificate file.



   .. py:property:: auth_ldap_tls_keyfile

      LDAP TLS key file.



   .. py:property:: auth_ldap_allow_self_signed

      LDAP allow self signed.



   .. py:property:: auth_ldap_tls_demand

      LDAP TLS demand.



   .. py:property:: auth_ldap_server

      Get the LDAP server object.



   .. py:property:: auth_ldap_use_tls

      Should LDAP use TLS.



   .. py:property:: auth_ldap_bind_user

      LDAP bind user.



   .. py:property:: auth_ldap_bind_password

      LDAP bind password.



   .. py:property:: auth_ldap_search

      LDAP search object.



   .. py:property:: auth_ldap_search_filter

      LDAP search filter.



   .. py:property:: auth_ldap_uid_field

      LDAP UID field.



   .. py:property:: auth_ldap_firstname_field

      LDAP first name field.



   .. py:property:: auth_ldap_lastname_field

      LDAP last name field.



   .. py:property:: auth_ldap_email_field

      LDAP email field.



   .. py:property:: auth_ldap_append_domain

      LDAP append domain.



   .. py:property:: auth_ldap_username_format

      LDAP username format.



   .. py:property:: auth_ldap_group_field
      :type: str


      LDAP group field.



   .. py:property:: auth_roles_mapping
      :type: dict[str, list[str]]


      The mapping of auth roles.



   .. py:property:: auth_user_registration_role_jmespath
      :type: str


      The JMESPATH role to use for user registration.



   .. py:property:: auth_username_ci

      Get the auth username for CI.



   .. py:property:: auth_user_registration

      Will user self registration be allowed.



   .. py:property:: auth_user_registration_role

      The default user self registration role.



   .. py:property:: auth_roles_sync_at_login
      :type: bool


      Should roles be synced at login.



   .. py:property:: auth_role_admin

      Get the admin role.



   .. py:property:: oauth_whitelists


   .. py:method:: create_builtin_roles()

      Return FAB builtin roles.



   .. py:property:: builtin_roles

      Get the builtin roles.



   .. py:method:: create_db()

      Create the database.

      Creates admin and public roles if they don't exist.



   .. py:method:: get_all_permissions()

      Return all permissions as a set of tuples with the action and resource names.



   .. py:method:: create_dag_specific_permissions()

      Add permissions to all DAGs.

      Creates 'can_read', 'can_edit', and 'can_delete' permissions for all
      DAGs, along with any `access_control` permissions provided in them.

      This does iterate through ALL the DAGs, which can be slow. See `sync_perm_for_dag`
      if you only need to sync a single DAG.



   .. py:method:: sync_perm_for_dag(dag_id, access_control = None)

      Sync permissions for given dag id.

      The dag id surely exists in our dag bag as only / refresh button or DagBag will call this function.

      :param dag_id: the ID of the DAG whose permissions should be updated
      :param access_control: a dict where each key is a role name and each value can be:
           - a set() of DAGs resource action names (e.g. `{'can_read'}`)
           - or a dict where each key is a resource name ('DAGs' or 'DAG Runs') and each value
           is a set() of action names (e.g., `{'DAG Runs': {'can_create'}, 'DAGs': {'can_read'}}`)
      :return:



   .. py:method:: add_permissions_view(base_action_names, resource_name)

      Add an action on a resource to the backend.

      :param base_action_names:
          list of permissions from view (all exposed methods):
           'can_add','can_edit' etc...
      :param resource_name:
          name of the resource to add



   .. py:method:: add_permissions_menu(resource_name)

      Add menu_access to resource on permission_resource.

      :param resource_name:
          The resource name



   .. py:method:: sync_roles()

      Initialize default and custom roles with related permissions.

      1. Init the default role(Admin, Viewer, User, Op, public)
         with related permissions.
      2. Init the custom role(dag-user) with related permissions.



   .. py:method:: create_perm_vm_for_all_dag()

      Create perm-vm if not exist and insert into FAB security model for all-dags.



   .. py:method:: add_homepage_access_to_custom_roles()

      Add Website.can_read access to all custom roles.



   .. py:method:: update_admin_permission()

      Add missing permissions to the table for admin.

      Admin should get all the permissions, except the dag permissions
      because Admin already has Dags permission.
      Add the missing ones to the table for admin.



   .. py:method:: clean_perms()

      FAB leaves faulty permissions that need to be cleaned up.



   .. py:method:: perms_include_action(perms, action_name)


   .. py:method:: bulk_sync_roles(roles)

      Sync the provided roles and permissions.



   .. py:method:: update_role(role_id, name)

      Update a role in the database.



   .. py:method:: add_role(name)

      Add a role in the database.



   .. py:method:: find_role(name)

      Find a role in the database.

      :param name: the role name



   .. py:method:: get_all_roles()


   .. py:method:: delete_role(role_name)

      Delete the given Role.

      :param role_name: the name of a role in the ab_role table



   .. py:method:: get_roles_from_keys(role_keys)

      Construct a list of FAB role objects, from a list of keys.

      NOTE:
      - keys are things like: "LDAP group DNs" or "OAUTH group names"
      - we use AUTH_ROLES_MAPPING to map from keys, to FAB role names

      :param role_keys: the list of FAB role keys



   .. py:method:: get_public_role()


   .. py:method:: add_user(username, first_name, last_name, email, role, password='', hashed_password='')

      Create a user.



   .. py:method:: load_user(user_id)


   .. py:method:: get_user_by_id(pk)


   .. py:method:: count_users()

      Return the number of users in the database.



   .. py:method:: add_register_user(username, first_name, last_name, email, password='', hashed_password='')

      Add a registration request for the user.

      :rtype : RegisterUser



   .. py:method:: find_user(username=None, email=None)

      Find user by username or email.



   .. py:method:: update_user(user)


   .. py:method:: del_register_user(register_user)

      Delete registration object from database.

      :param register_user: RegisterUser object to delete



   .. py:method:: get_all_users()


   .. py:method:: update_user_auth_stat(user, success=True)

      Update user authentication stats.

      This is done upon successful/unsuccessful authentication attempts.

      :param user:
          The identified (but possibly not successfully authenticated) user
          model
      :param success:
          Defaults to true, if true increments login_count, updates
          last_login, and resets fail_login_count to 0, if false increments
          fail_login_count on user model.



   .. py:method:: get_action(name)

      Get an existing action record.

      :param name: name



   .. py:method:: create_action(name)

      Add an action to the backend, model action.

      :param name:
          name of the action: 'can_add','can_edit' etc...



   .. py:method:: delete_action(name)

      Delete a permission action.

      :param name: Name of action to delete (e.g. can_read).



   .. py:method:: get_resource(name)

      Return a resource record by name, if it exists.

      :param name: Name of resource



   .. py:method:: create_resource(name)

      Create a resource with the given name.

      :param name: The name of the resource to create created.



   .. py:method:: get_permission(action_name, resource_name)

      Get a permission made with the given action->resource pair, if the permission already exists.

      :param action_name: Name of action
      :param resource_name: Name of resource



   .. py:method:: get_resource_permissions(resource)

      Retrieve permission pairs associated with a specific resource object.

      :param resource: Object representing a single resource.



   .. py:method:: create_permission(action_name, resource_name)

      Add a permission on a resource to the backend.

      :param action_name:
          name of the action to add: 'can_add','can_edit' etc...
      :param resource_name:
          name of the resource to add



   .. py:method:: delete_permission(action_name, resource_name)

      Delete the permission linking an action->resource pair.

      Doesn't delete the underlying action or resource.

      :param action_name: Name of existing action
      :param resource_name: Name of existing resource



   .. py:method:: add_permission_to_role(role, permission)

      Add an existing permission pair to a role.

      :param role: The role about to get a new permission.
      :param permission: The permission pair to add to a role.



   .. py:method:: remove_permission_from_role(role, permission)

      Remove a permission pair from a role.

      :param role: User role containing permissions.
      :param permission: Object representing resource-> action pair



   .. py:method:: get_user_roles(user=None)
      :staticmethod:


      Get all the roles associated with the user.

      :param user: the ab_user in FAB model.
      :return: a list of roles associated with the user.



   .. py:method:: auth_user_ldap(username, password)

      Authenticate user with LDAP.

      NOTE: this depends on python-ldap module.

      :param username: the username
      :param password: the password



   .. py:method:: check_password(username, password)

      Check if the password is correct for the username.

      :param username: the username
      :param password: the password



   .. py:method:: auth_user_db(username, password)

      Authenticate user, auth db style.

      :param username:
          The username or registered email address
      :param password:
          The password, will be tested against hashed password on db



   .. py:method:: set_oauth_session(provider, oauth_response)

      Set the current session with OAuth user secrets.



   .. py:method:: get_oauth_token_key_name(provider)

      Return the token_key name for the oauth provider.

      If none is configured defaults to oauth_token
      this is configured using OAUTH_PROVIDERS and token_key key.



   .. py:method:: get_oauth_token_secret_name(provider)

      Get the ``token_secret`` name for the oauth provider.

      If none is configured, defaults to ``oauth_secret``. This is configured
      using ``OAUTH_PROVIDERS`` and ``token_secret``.



   .. py:method:: auth_user_oauth(userinfo)

      Authenticate user with OAuth.

      :userinfo: dict with user information
                 (keys are the same as User model columns)



   .. py:method:: get_oauth_user_info(provider, resp)

      There are different OAuth APIs with different ways to retrieve user info.

      All providers have different ways to retrieve user info.



   .. py:method:: oauth_token_getter()
      :staticmethod:


      Get authentication (OAuth) token.



   .. py:method:: ldap_extract_list(ldap_dict, field_name)
      :staticmethod:



   .. py:method:: ldap_extract(ldap_dict, field_name, fallback)
      :staticmethod:



