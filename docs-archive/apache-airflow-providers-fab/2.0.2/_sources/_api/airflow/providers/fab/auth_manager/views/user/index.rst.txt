airflow.providers.fab.auth_manager.views.user
=============================================

.. py:module:: airflow.providers.fab.auth_manager.views.user


Classes
-------

.. autoapisummary::

   airflow.providers.fab.auth_manager.views.user.MultiResourceUserMixin
   airflow.providers.fab.auth_manager.views.user.CustomUserLDAPModelView
   airflow.providers.fab.auth_manager.views.user.CustomUserOAuthModelView
   airflow.providers.fab.auth_manager.views.user.CustomUserOIDModelView
   airflow.providers.fab.auth_manager.views.user.CustomUserRemoteUserModelView
   airflow.providers.fab.auth_manager.views.user.CustomUserDBModelView


Module Contents
---------------

.. py:class:: MultiResourceUserMixin

   Remaps UserModelView permissions to new resources and actions.


   .. py:attribute:: class_permission_name_mapping


   .. py:attribute:: method_permission_name


   .. py:attribute:: base_permissions


   .. py:property:: class_permission_name

      Returns appropriate permission name depending on request method name.



   .. py:method:: show(pk)


.. py:class:: CustomUserLDAPModelView(**kwargs)

   Bases: :py:obj:`MultiResourceUserMixin`, :py:obj:`flask_appbuilder.security.views.UserLDAPModelView`


   Customize permission names for FAB's builtin UserLDAPModelView.


   .. py:attribute:: class_permission_name_mapping


   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



.. py:class:: CustomUserOAuthModelView(**kwargs)

   Bases: :py:obj:`MultiResourceUserMixin`, :py:obj:`flask_appbuilder.security.views.UserOAuthModelView`


   Customize permission names for FAB's builtin UserOAuthModelView.


.. py:class:: CustomUserOIDModelView(**kwargs)

   Bases: :py:obj:`MultiResourceUserMixin`, :py:obj:`flask_appbuilder.security.views.UserOIDModelView`


   Customize permission names for FAB's builtin UserOIDModelView.


.. py:class:: CustomUserRemoteUserModelView(**kwargs)

   Bases: :py:obj:`MultiResourceUserMixin`, :py:obj:`flask_appbuilder.security.views.UserRemoteUserModelView`


   Customize permission names for FAB's builtin UserRemoteUserModelView.


   .. py:attribute:: class_permission_name_mapping


   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



.. py:class:: CustomUserDBModelView(**kwargs)

   Bases: :py:obj:`MultiResourceUserMixin`, :py:obj:`flask_appbuilder.security.views.UserDBModelView`


   Customize permission names for FAB's builtin UserDBModelView.


   .. py:attribute:: class_permission_name_mapping


   .. py:attribute:: method_permission_name

      Override method permission names, example::

          method_permissions_name = {
              'get_list': 'read',
              'get': 'read',
              'put': 'write',
              'post': 'write',
              'delete': 'write'
          }



   .. py:attribute:: base_permissions

      List with allowed base permission.
      Use it like this if you want to restrict your view to readonly::

          class MyView(ModelView):
              base_permissions = ['can_list','can_show']



