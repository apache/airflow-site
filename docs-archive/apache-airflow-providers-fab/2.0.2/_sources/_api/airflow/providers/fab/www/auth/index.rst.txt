airflow.providers.fab.www.auth
==============================

.. py:module:: airflow.providers.fab.www.auth


Attributes
----------

.. autoapisummary::

   airflow.providers.fab.www.auth.T
   airflow.providers.fab.www.auth.log


Functions
---------

.. autoapisummary::

   airflow.providers.fab.www.auth.get_access_denied_message
   airflow.providers.fab.www.auth.has_access_with_pk
   airflow.providers.fab.www.auth.has_access_configuration
   airflow.providers.fab.www.auth.has_access_connection
   airflow.providers.fab.www.auth.has_access_dag
   airflow.providers.fab.www.auth.has_access_dag_entities
   airflow.providers.fab.www.auth.has_access_asset
   airflow.providers.fab.www.auth.has_access_pool
   airflow.providers.fab.www.auth.has_access_variable
   airflow.providers.fab.www.auth.has_access_view


Module Contents
---------------

.. py:data:: T

.. py:data:: log

.. py:function:: get_access_denied_message()

.. py:function:: has_access_with_pk(f)

   Check permissions on views.

   The implementation is very similar from
   https://github.com/dpgaspar/Flask-AppBuilder/blob/c6fecdc551629e15467fde5d06b4437379d90592/flask_appbuilder/security/decorators.py#L134

   The difference is that this decorator will pass the resource ID to check permissions. It allows
   fined-grained access control using resource IDs.


.. py:function:: has_access_configuration(method)

.. py:function:: has_access_connection(method)

.. py:function:: has_access_dag(method, access_entity = None)

.. py:function:: has_access_dag_entities(method, access_entity)

.. py:function:: has_access_asset(method)

   Check current user's permissions against required permissions for assets.


.. py:function:: has_access_pool(method)

.. py:function:: has_access_variable(method)

.. py:function:: has_access_view(access_view = AccessView.WEBSITE)

   Check current user's permissions to access the website.


