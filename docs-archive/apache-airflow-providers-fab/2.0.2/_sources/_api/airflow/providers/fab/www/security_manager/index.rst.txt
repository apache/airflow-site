airflow.providers.fab.www.security_manager
==========================================

.. py:module:: airflow.providers.fab.www.security_manager


Attributes
----------

.. autoapisummary::

   airflow.providers.fab.www.security_manager.EXISTING_ROLES


Classes
-------

.. autoapisummary::

   airflow.providers.fab.www.security_manager.AirflowSecurityManagerV2


Module Contents
---------------

.. py:data:: EXISTING_ROLES

.. py:class:: AirflowSecurityManagerV2(appbuilder)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Minimal security manager needed to run a Flask application.

   This one is used to run the Flask application needed to run Airflow 2 plugins unless Fab auth manager
   is configured in the environment. In that case, ``FabAirflowSecurityManagerOverride`` is used.


   .. py:attribute:: appbuilder


   .. py:attribute:: limiter


   .. py:method:: before_request()
      :staticmethod:


      Run hook before request.



   .. py:method:: create_limiter()


   .. py:method:: has_access(action_name, resource_name, user=None, resource_pk = None)

      Verify whether a given user could perform a certain action on the given resource.

      Example actions might include can_read, can_write, can_delete, etc.

      This function is called by FAB when accessing a view. See
      https://github.com/dpgaspar/Flask-AppBuilder/blob/c6fecdc551629e15467fde5d06b4437379d90592/flask_appbuilder/security/decorators.py#L134

      :param action_name: action_name on resource (e.g can_read, can_edit).
      :param resource_name: name of view-menu or resource.
      :param user: user
      :param resource_pk: the resource primary key (e.g. the connection ID)
      :return: Whether user could perform certain action on the resource.



   .. py:method:: add_limit_view(baseview)


