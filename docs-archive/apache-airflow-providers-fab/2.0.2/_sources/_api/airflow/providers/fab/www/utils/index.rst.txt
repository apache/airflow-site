airflow.providers.fab.www.utils
===============================

.. py:module:: airflow.providers.fab.www.utils


Attributes
----------

.. autoapisummary::

   airflow.providers.fab.www.utils.log


Classes
-------

.. autoapisummary::

   airflow.providers.fab.www.utils.UtcAwareFilterMixin
   airflow.providers.fab.www.utils.FilterIsNull
   airflow.providers.fab.www.utils.FilterIsNotNull
   airflow.providers.fab.www.utils.FilterGreaterOrEqual
   airflow.providers.fab.www.utils.FilterSmallerOrEqual
   airflow.providers.fab.www.utils.UtcAwareFilterSmallerOrEqual
   airflow.providers.fab.www.utils.UtcAwareFilterGreaterOrEqual
   airflow.providers.fab.www.utils.UtcAwareFilterEqual
   airflow.providers.fab.www.utils.UtcAwareFilterGreater
   airflow.providers.fab.www.utils.UtcAwareFilterSmaller
   airflow.providers.fab.www.utils.UtcAwareFilterNotEqual
   airflow.providers.fab.www.utils.AirflowFilterConverter
   airflow.providers.fab.www.utils.CustomSQLAInterface


Functions
---------

.. autoapisummary::

   airflow.providers.fab.www.utils.get_session_lifetime_config
   airflow.providers.fab.www.utils.get_fab_auth_manager
   airflow.providers.fab.www.utils.get_fab_action_from_method_map
   airflow.providers.fab.www.utils.get_method_from_fab_action_map


Module Contents
---------------

.. py:data:: log

.. py:function:: get_session_lifetime_config()

   Get session timeout configs and handle outdated configs gracefully.


.. py:function:: get_fab_auth_manager()

.. py:function:: get_fab_action_from_method_map()

   Return the map associating a method to a FAB action.


.. py:function:: get_method_from_fab_action_map()

   Return the map associating a FAB action to a method.


.. py:class:: UtcAwareFilterMixin

   Mixin for filter for UTC time.


   .. py:method:: apply(query, value)

      Apply the filter.



.. py:class:: FilterIsNull(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`flask_appbuilder.models.filters.BaseFilter`


   Is null filter.


   .. py:attribute:: name


   .. py:attribute:: arg_name
      :value: 'emp'


      the request argument that represent the filter
      child Filter classes should set it to enable
      REST API use



   .. py:method:: apply(query, value)

      Override this to implement your own new filters



.. py:class:: FilterIsNotNull(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`flask_appbuilder.models.filters.BaseFilter`


   Is not null filter.


   .. py:attribute:: name


   .. py:attribute:: arg_name
      :value: 'nemp'


      the request argument that represent the filter
      child Filter classes should set it to enable
      REST API use



   .. py:method:: apply(query, value)

      Override this to implement your own new filters



.. py:class:: FilterGreaterOrEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`flask_appbuilder.models.filters.BaseFilter`


   Greater than or Equal filter.


   .. py:attribute:: name


   .. py:attribute:: arg_name
      :value: 'gte'


      the request argument that represent the filter
      child Filter classes should set it to enable
      REST API use



   .. py:method:: apply(query, value)

      Override this to implement your own new filters



.. py:class:: FilterSmallerOrEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`flask_appbuilder.models.filters.BaseFilter`


   Smaller than or Equal filter.


   .. py:attribute:: name


   .. py:attribute:: arg_name
      :value: 'lte'


      the request argument that represent the filter
      child Filter classes should set it to enable
      REST API use



   .. py:method:: apply(query, value)

      Override this to implement your own new filters



.. py:class:: UtcAwareFilterSmallerOrEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`FilterSmallerOrEqual`


   Smaller than or Equal filter for UTC time.


.. py:class:: UtcAwareFilterGreaterOrEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`FilterGreaterOrEqual`


   Greater than or Equal filter for UTC time.


.. py:class:: UtcAwareFilterEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`flask_appbuilder.models.sqla.filters.FilterEqual`


   Equality filter for UTC time.


.. py:class:: UtcAwareFilterGreater(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`flask_appbuilder.models.sqla.filters.FilterGreater`


   Greater Than filter for UTC time.


.. py:class:: UtcAwareFilterSmaller(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`flask_appbuilder.models.sqla.filters.FilterSmaller`


   Smaller Than filter for UTC time.


.. py:class:: UtcAwareFilterNotEqual(column_name, datamodel, is_related_view=False)

   Bases: :py:obj:`UtcAwareFilterMixin`, :py:obj:`flask_appbuilder.models.sqla.filters.FilterNotEqual`


   Not Equal To filter for UTC time.


.. py:class:: AirflowFilterConverter(datamodel)

   Bases: :py:obj:`flask_appbuilder.models.sqla.filters.SQLAFilterConverter`


   Retrieve conversion tables for Airflow-specific filters.


   .. py:attribute:: conversion_table

      When implementing your own filters you just need to define
      the new filters, and register them overriding this property.
      This will map a column type to all possible filters.
      use something like this::

          (
              ('is_text', [FilterCustomForText,
                       FilterNotContains,
                       FilterEqual,
                       FilterNotEqual]),
              ('is_string', [FilterContains,
                         FilterNotContains,
                         FilterEqual,
                         FilterNotEqual]),
              ('is_integer', [FilterEqual,
                          FilterNotEqual]),
          )




.. py:class:: CustomSQLAInterface(obj, session = None)

   Bases: :py:obj:`flask_appbuilder.models.sqla.interface.SQLAInterface`


   FAB does not know how to handle columns with leading underscores because they are not supported by WTForm.

   This hack will remove the leading '_' from the key to lookup the column names.


   .. py:method:: is_utcdatetime(col_name)

      Check if the datetime is a UTC one.



   .. py:method:: is_extendedjson(col_name)

      Check if it is a special extended JSON type.



   .. py:method:: is_json(col_name)

      Check if it is a JSON type.



   .. py:method:: get_col_default(col_name)


   .. py:attribute:: filter_converter_class

      when sub classing override with your own custom filter converter 



