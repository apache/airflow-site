:py:mod:`airflow.providers.ftp.operators.ftp`
=============================================

.. py:module:: airflow.providers.ftp.operators.ftp

.. autoapi-nested-parse::

   This module contains FTP operator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.ftp.operators.ftp.FTPOperation
   airflow.providers.ftp.operators.ftp.FTPFileTransmitOperator
   airflow.providers.ftp.operators.ftp.FTPSFileTransmitOperator




.. py:class:: FTPOperation


   Operation that can be used with FTP.

   .. py:attribute:: PUT
      :value: 'put'

      

   .. py:attribute:: GET
      :value: 'get'

      


.. py:class:: FTPFileTransmitOperator(*, ftp_conn_id = 'ftp_default', local_filepath, remote_filepath, operation = FTPOperation.PUT, create_intermediate_dirs = False, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   FTPFileTransmitOperator for transferring files from remote host to local or vice a versa.

   This operator uses an FTPHook to open ftp transport channel that serve as basis for file transfer.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:FTPFileTransmitOperator`

   :param ftp_conn_id: :ref:`ftp connection id<howto/connection:ftp>`
       from airflow Connections.
   :param local_filepath: local file path to get or put. (templated)
   :param remote_filepath: remote file path to get or put. (templated)
   :param operation: specify operation 'get' or 'put', defaults to put
   :param create_intermediate_dirs: create missing intermediate directories when
       copying from remote to local and vice-versa. Default is False.

       Example: The following task would copy ``file.txt`` to the remote host
       at ``/tmp/tmp1/tmp2/`` while creating ``tmp``,``tmp1`` and ``tmp2`` if they
       don't exist. If the ``create_intermediate_dirs`` parameter is not passed it would error
       as the directory does not exist. ::

           put_file = FTPFileTransmitOperator(
               task_id="test_ftp",
               ftp_conn_id="ftp_default",
               local_filepath="/tmp/file.txt",
               remote_filepath="/tmp/tmp1/tmp2/file.txt",
               operation="put",
               create_intermediate_dirs=True,
               dag=dag
           )

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('local_filepath', 'remote_filepath')

      

   .. py:method:: hook()

      Create and return an FTPHook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: get_openlineage_facets_on_start()

      Return OpenLineage datasets.

      Dataset will have the following structure:
              input: file://hostname/path
              output file://<conn.host>:<conn.port>/path.



.. py:class:: FTPSFileTransmitOperator(*, ftp_conn_id = 'ftp_default', local_filepath, remote_filepath, operation = FTPOperation.PUT, create_intermediate_dirs = False, **kwargs)


   Bases: :py:obj:`FTPFileTransmitOperator`

   FTPSFileTransmitOperator for transferring files from remote host to local or vice a versa.

   This operator uses an FTPSHook to open ftps transport channel that serve as basis for file transfer.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:FTPSFileTransmitOperator`

   .. py:method:: hook()

      Create and return an FTPSHook.



