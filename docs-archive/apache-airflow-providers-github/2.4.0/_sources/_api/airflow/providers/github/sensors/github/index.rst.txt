:py:mod:`airflow.providers.github.sensors.github`
=================================================

.. py:module:: airflow.providers.github.sensors.github


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.github.sensors.github.GithubSensor
   airflow.providers.github.sensors.github.BaseGithubRepositorySensor
   airflow.providers.github.sensors.github.GithubTagSensor




.. py:class:: GithubSensor(*, method_name, github_conn_id = 'github_default', method_params = None, result_processor = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Base GithubSensor which can monitor for any change.

   :param github_conn_id: reference to a pre-defined GitHub Connection
   :param method_name: method name from PyGithub to be executed
   :param method_params: parameters for the method method_name
   :param result_processor: function that return boolean and act as a sensor response

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: BaseGithubRepositorySensor(*, github_conn_id = 'github_default', repository_name = None, result_processor = None, **kwargs)


   Bases: :py:obj:`GithubSensor`

   Base GitHub sensor at Repository level.

   :param github_conn_id: reference to a pre-defined GitHub Connection
   :param repository_name: full qualified name of the repository to be monitored, ex. "apache/airflow"

   .. py:method:: poke(context)

      Check sensor status; sensors defined while deriving this class should override.



.. py:class:: GithubTagSensor(*, github_conn_id = 'github_default', tag_name = None, repository_name = None, **kwargs)


   Bases: :py:obj:`BaseGithubRepositorySensor`

   Monitor a github tag for its creation.

   :param github_conn_id: reference to a pre-defined GitHub Connection
   :param tag_name: name of the tag to be monitored
   :param repository_name: fully qualified name of the repository to be monitored, ex. "apache/airflow"

   .. py:attribute:: template_fields
      :value: ('tag_name',)

      

   .. py:method:: poke(context)

      Check sensor status; sensors defined while deriving this class should override.


   .. py:method:: tag_checker(repo)

      Check existence of Tag in a Repository.



