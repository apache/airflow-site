:py:mod:`airflow.providers.google.cloud.operators.dataplex`
===========================================================

.. py:module:: airflow.providers.google.cloud.operators.dataplex

.. autoapi-nested-parse::

   This module contains Google Dataplex operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.dataplex.DataplexCreateTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexListTasksOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateLakeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteLakeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateOrUpdateDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexRunDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataQualityScanResultOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateZoneOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteZoneOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateAssetOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteAssetOperator




.. py:class:: DataplexCreateTaskOperator(project_id, region, lake_id, body, dataplex_task_id, validate_only = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a task resource within a lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param body:  Required. The Request body contains an instance of Task.
   :param dataplex_task_id: Required. Task identifier.
   :param validate_only: Optional. Only validate the request, but do not perform mutations. The default is
       false.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing should the Dataplex task be created asynchronously.
       This is useful for long running creating tasks and
       waiting on them asynchronously using the DataplexTaskSensor

   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'body', 'validate_only', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteTaskOperator(project_id, region, lake_id, dataplex_task_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete the task resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param dataplex_task_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexListTasksOperator(project_id, region, lake_id, page_size = None, page_token = None, filter = None, order_by = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists tasks under the given lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param page_size: Optional. Maximum number of tasks to return. The service may return fewer than this
       value. If unspecified, at most 10 tasks will be returned. The maximum value is 1000; values above 1000
       will be coerced to 1000.
   :param page_token: Optional. Page token received from a previous ListZones call. Provide this to retrieve
       the subsequent page. When paginating, all other parameters provided to ListZones must match the call
       that provided the page token.
   :param filter: Optional. Filter request.
   :param order_by: Optional. Order by fields for the result.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('project_id', 'page_size', 'page_token', 'filter', 'order_by', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexGetTaskOperator(project_id, region, lake_id, dataplex_task_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get task resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param dataplex_task_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateLakeOperator(project_id, region, lake_id, body, validate_only = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a lake resource within a lake.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param lake_id: Required. Lake identifier.
   :param body:  Required. The Request body contains an instance of Lake.
   :param validate_only: Optional. Only validate the request, but do not perform mutations. The default is
       false.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing should the Dataplex lake be created asynchronously.
       This is useful for long-running creating lakes.

   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'body', 'validate_only', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteLakeOperator(project_id, region, lake_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete the lake resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param lake_id: Required. Lake identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateOrUpdateDataQualityScanOperator(project_id, region, data_scan_id, body, api_version = 'v1', retry = DEFAULT, timeout = None, update_mask = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param body:  Required. The Request body contains an instance of DataScan.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param update_mask: Mask of fields to update.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data scan id

   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'body', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexGetDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data scan

   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: None

   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexRunDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, fail_on_dq_failure = False, result_timeout = 60.0 * 10, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), polling_interval_seconds = 10, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Runs an on-demand execution of a DataScan.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing that the Dataplex job should be run asynchronously.
       This is useful for submitting long-running jobs and
       waiting on them asynchronously using the DataplexDataQualityJobStatusSensor
   :param fail_on_dq_failure: If set to true and not all Data Quality scan rules have been passed,
       an exception is thrown. If set to false and not all Data Quality scan rules have been passed,
       execution will finish with success.
   :param result_timeout: Value in seconds for which operator will wait for the Data Quality scan result
       when the flag `asynchronous = False`.
       Throws exception if there is no result found after specified amount of seconds.
   :param polling_interval_seconds: time in seconds between polling for job completion.
       The value is considered only when running in deferrable mode. Must be greater than 0.
   :param deferrable: Run operator in the deferrable mode.

   :return: Dataplex Data Quality scan job id.

   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event=None)

      Callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexGetDataQualityScanResultOperator(project_id, region, data_scan_id, job_id = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, fail_on_dq_failure = False, wait_for_results = True, result_timeout = 60.0 * 10, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), polling_interval_seconds = 10, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets a Data Scan Job resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param job_id: Optional. Data Quality scan job identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
       ``retry`` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param fail_on_dq_failure: If set to true and not all Data Quality scan rules have been passed,
       an exception is thrown. If set to false and not all Data Quality scan rules have been passed,
       execution will finish with success.
   :param wait_for_results: Flag indicating whether to wait for the result of a job execution
       or to return the job in its current state.
   :param result_timeout: Value in seconds for which operator will wait for the Data Quality scan result
       when the flag `wait_for_results = True`.
       Throws exception if there is no result found after specified amount of seconds.
   :param polling_interval_seconds: time in seconds between polling for job completion.
       The value is considered only when running in deferrable mode. Must be greater than 0.
   :param deferrable: Run operator in the deferrable mode.

   :return: Dict representing DataScanJob.
       When the job completes with a successful status, information about the Data Quality result
       is available.

   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event=None)

      Callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexCreateZoneOperator(project_id, region, lake_id, body, zone_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a Zone resource within a Lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param body:  Required. The Request body contains an instance of Zone.
   :param zone_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Zone

   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'body', 'lake_id', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteZoneOperator(project_id, region, lake_id, zone_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a Zone resource. All assets within a zone must be deleted before the zone can be deleted.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param zone_id: Required. Zone identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :return: None

   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'zone_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateAssetOperator(project_id, region, lake_id, body, zone_id, asset_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates an Asset resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the lake belongs to.
   :param zone_id: Required. Zone identifier.
   :param asset_id: Required. Asset identifier.
   :param body:  Required. The Request body contains an instance of Asset.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :return: Asset

   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'asset_id', 'body', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteAssetOperator(project_id, region, lake_id, zone_id, asset_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes an asset resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the asset belongs to.
   :param zone_id: Required. Zone identifier.
   :param asset_id: Required. Asset identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: None

   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'asset_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



