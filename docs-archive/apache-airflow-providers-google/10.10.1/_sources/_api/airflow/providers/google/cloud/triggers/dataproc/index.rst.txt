:py:mod:`airflow.providers.google.cloud.triggers.dataproc`
==========================================================

.. py:module:: airflow.providers.google.cloud.triggers.dataproc

.. autoapi-nested-parse::

   This module contains Google Dataproc triggers.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.dataproc.DataprocBaseTrigger
   airflow.providers.google.cloud.triggers.dataproc.DataprocSubmitTrigger
   airflow.providers.google.cloud.triggers.dataproc.DataprocClusterTrigger
   airflow.providers.google.cloud.triggers.dataproc.DataprocBatchTrigger
   airflow.providers.google.cloud.triggers.dataproc.DataprocDeleteClusterTrigger
   airflow.providers.google.cloud.triggers.dataproc.DataprocWorkflowTrigger




.. py:class:: DataprocBaseTrigger(region, project_id = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, polling_interval_seconds = 30)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Base class for Dataproc triggers.

   .. py:method:: get_async_hook()



.. py:class:: DataprocSubmitTrigger(job_id, **kwargs)


   Bases: :py:obj:`DataprocBaseTrigger`

   DataprocSubmitTrigger run on the trigger worker to perform create Build operation.

   :param job_id: The ID of a Dataproc job.
   :param project_id: Google Cloud Project where the job is running
   :param region: The Cloud Dataproc region in which to handle the request.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param polling_interval_seconds: polling period in seconds to check for the status

   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: DataprocClusterTrigger(cluster_name, **kwargs)


   Bases: :py:obj:`DataprocBaseTrigger`

   DataprocClusterTrigger run on the trigger worker to perform create Build operation.

   :param cluster_name: The name of the cluster.
   :param project_id: Google Cloud Project where the job is running
   :param region: The Cloud Dataproc region in which to handle the request.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param polling_interval_seconds: polling period in seconds to check for the status

   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: DataprocBatchTrigger(batch_id, **kwargs)


   Bases: :py:obj:`DataprocBaseTrigger`

   DataprocCreateBatchTrigger run on the trigger worker to perform create Build operation.

   :param batch_id: The ID of the build.
   :param project_id: Google Cloud Project where the job is running
   :param region: The Cloud Dataproc region in which to handle the request.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param polling_interval_seconds: polling period in seconds to check for the status

   .. py:method:: serialize()

      Serializes DataprocBatchTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: DataprocDeleteClusterTrigger(cluster_name, end_time, metadata = (), **kwargs)


   Bases: :py:obj:`DataprocBaseTrigger`

   DataprocDeleteClusterTrigger run on the trigger worker to perform delete cluster operation.

   :param cluster_name: The name of the cluster
   :param end_time: Time in second left to check the cluster status
   :param project_id: The ID of the Google Cloud project the cluster belongs to
   :param region: The Cloud Dataproc region in which to handle the request
   :param metadata: Additional metadata that is provided to the method
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account.
   :param polling_interval_seconds: Time in seconds to sleep between checks of cluster status

   .. py:method:: serialize()

      Serializes DataprocDeleteClusterTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Wait until cluster is deleted completely.



.. py:class:: DataprocWorkflowTrigger(name, **kwargs)


   Bases: :py:obj:`DataprocBaseTrigger`

   Trigger that periodically polls information from Dataproc API to verify status.

   Implementation leverages asynchronous transport.

   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



