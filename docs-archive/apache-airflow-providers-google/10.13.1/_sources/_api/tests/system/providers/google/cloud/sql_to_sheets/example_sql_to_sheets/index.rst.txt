:py:mod:`tests.system.providers.google.cloud.sql_to_sheets.example_sql_to_sheets`
=================================================================================

.. py:module:: tests.system.providers.google.cloud.sql_to_sheets.example_sql_to_sheets

.. autoapi-nested-parse::

   First, you need a db instance that is accessible from the Airflow environment.
   You can, for example, create a Cloud SQL instance and connect to it from
   within breeze with Cloud SQL proxy:
   https://cloud.google.com/sql/docs/postgres/connect-instance-auth-proxy

   # DB setup
   Create db:
   ```
   CREATE DATABASE test_db;
   ```

   Switch to db:
   ```
   \c test_db
   ```

   Create table and insert some rows
   ```
   CREATE TABLE test_table (col1 INT, col2 INT);
   INSERT INTO test_table VALUES (1,2), (3,4), (5,6), (7,8);
   ```

   # Setup connections
   db connection:
   In airflow UI, set one db connection, for example "postgres_default"
   and make sure the "Test" at the bottom succeeds

   google cloud connection:
   We need additional scopes for this test
   scopes: https://www.googleapis.com/auth/spreadsheets, https://www.googleapis.com/auth/cloud-platform

   # Sheet
   Finally, you need a Google Sheet you have access to, for testing you can
   create a public sheet and get its ID.

   # Tear Down
   You can delete the db with
   ```
   DROP DATABASE test_db;
   ```



Module Contents
---------------

.. py:data:: DAG_ID
   :value: 'example_sql_to_sheets'

   

.. py:data:: ENV_ID

   

.. py:data:: PROJECT_ID

   

.. py:data:: REGION
   :value: 'europe-west2'

   

.. py:data:: ZONE

   

.. py:data:: NETWORK
   :value: 'default'

   

.. py:data:: SHEETS_CONNECTION_ID

   

.. py:data:: SPREADSHEET

   

.. py:data:: DB_NAME

   

.. py:data:: DB_PORT
   :value: 5432

   

.. py:data:: DB_USER_NAME
   :value: 'demo_user'

   

.. py:data:: DB_USER_PASSWORD
   :value: 'demo_password'

   

.. py:data:: DB_CONNECTION_ID

   

.. py:data:: SHORT_MACHINE_TYPE_NAME
   :value: 'n1-standard-1'

   

.. py:data:: DB_INSTANCE_NAME

   

.. py:data:: GCE_INSTANCE_BODY

   

.. py:data:: DELETE_PERSISTENT_DISK

   

.. py:data:: SETUP_POSTGRES

   

.. py:data:: FIREWALL_RULE_NAME

   

.. py:data:: CREATE_FIREWALL_RULE

   

.. py:data:: DELETE_FIREWALL_RULE

   

.. py:data:: SQL_TABLE
   :value: 'test_table'

   

.. py:data:: SQL_CREATE

   

.. py:data:: SQL_INSERT

   

.. py:data:: SQL_SELECT

   

.. py:data:: log

   

.. py:data:: create_instance

   

.. py:data:: test_run

   

