:py:mod:`airflow.providers.google.cloud.operators.vertex_ai.pipeline_job`
=========================================================================

.. py:module:: airflow.providers.google.cloud.operators.vertex_ai.pipeline_job

.. autoapi-nested-parse::

   This module contains Google Vertex AI operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.vertex_ai.pipeline_job.RunPipelineJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.pipeline_job.GetPipelineJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.pipeline_job.ListPipelineJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.pipeline_job.DeletePipelineJobOperator




.. py:class:: RunPipelineJobOperator(*, project_id, region, display_name, template_path, job_id = None, pipeline_root = None, parameter_values = None, input_artifacts = None, enable_caching = None, encryption_spec_key_name = None, labels = None, failure_policy = None, service_account = None, network = None, create_request_timeout = None, experiment = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Run Pipeline job.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param display_name: Required. The user-defined name of this Pipeline.
   :param template_path: Required. The path of PipelineJob or PipelineSpec JSON or YAML file. It can be
       a local path, a Google Cloud Storage URI (e.g. "gs://project.name"), an Artifact Registry URI
       (e.g. "https://us-central1-kfp.pkg.dev/proj/repo/pack/latest"), or an HTTPS URI.
   :param job_id: Optional. The unique ID of the job run. If not specified, pipeline name + timestamp
       will be used.
   :param pipeline_root: Optional. The root of the pipeline outputs. If not set, the staging bucket set
       in aiplatform.init will be used. If that's not set a pipeline-specific artifacts bucket will be
       used.
   :param parameter_values: Optional. The mapping from runtime parameter names to its values that
       control the pipeline run.
   :param input_artifacts: Optional. The mapping from the runtime parameter name for this artifact to
       its resource id. For example: "vertex_model":"456". Note: full resource name
       ("projects/123/locations/us-central1/metadataStores/default/artifacts/456") cannot be used.
   :param enable_caching: Optional. Whether to turn on caching for the run.
       If this is not set, defaults to the compile time settings, which are True for all tasks by
       default, while users may specify different caching options for individual tasks.
       If this is set, the setting applies to all tasks in the pipeline. Overrides the compile time
       settings.
   :param encryption_spec_key_name: Optional. The Cloud KMS resource identifier of the customer managed
       encryption key used to protect the job. Has the form:
       ``projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key``.
       The key needs to be in the same region as where the compute resource is created. If this is set,
       then all resources created by the PipelineJob will be encrypted with the provided encryption key.
       Overrides encryption_spec_key_name set in aiplatform.init.
   :param labels: Optional. The user defined metadata to organize PipelineJob.
   :param failure_policy: Optional. The failure policy - "slow" or "fast". Currently, the default of a
       pipeline is that the pipeline will continue to run until no more tasks can be executed, also
       known as PIPELINE_FAILURE_POLICY_FAIL_SLOW (corresponds to "slow"). However, if a pipeline is set
       to PIPELINE_FAILURE_POLICY_FAIL_FAST (corresponds to "fast"), it will stop scheduling any new
       tasks when a task has failed. Any scheduled tasks will continue to completion.
   :param service_account: Optional. Specifies the service account for workload run-as account. Users
       submitting jobs must have act-as permission on this run-as account.
   :param network: Optional. The full name of the Compute Engine network to which the job should be
       peered. For example, projects/12345/global/networks/myVPC.
       Private services access must already be configured for the network. If left unspecified, the
       network set in aiplatform.init will be used. Otherwise, the job is not peered with any network.
   :param create_request_timeout: Optional. The timeout for the create request in seconds.
   :param experiment: Optional. The Vertex AI experiment name or instance to associate to this
       PipelineJob. Metrics produced by the PipelineJob as system.Metric Artifacts will be associated as
       metrics to the current Experiment Run. Pipeline parameters will be associated as parameters to
       the current Experiment Run.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ['region', 'project_id', 'input_artifacts', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: on_kill()

      Callback called when the operator is killed; cancel any running job.



.. py:class:: GetPipelineJobOperator(*, project_id, region, pipeline_job_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get a Pipeline job.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param pipeline_job_id: Required. The ID of the PipelineJob resource.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ['region', 'pipeline_job_id', 'project_id', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ListPipelineJobOperator(*, region, project_id, page_size = None, page_token = None, filter = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists PipelineJob in a Location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param filter: Optional. Lists the PipelineJobs that match the filter expression. The
       following fields are supported:

       -  ``pipeline_name``: Supports ``=`` and ``!=`` comparisons.
       -  ``display_name``: Supports ``=``, ``!=`` comparisons, and
           ``:`` wildcard.
       -  ``pipeline_job_user_id``: Supports ``=``, ``!=``
           comparisons, and ``:`` wildcard. for example, can check
           if pipeline's display_name contains *step* by doing
           display_name:"*step*"
       -  ``create_time``: Supports ``=``, ``!=``, ``<``, ``>``,
           ``<=``, and ``>=`` comparisons. Values must be in RFC
           3339 format.
       -  ``update_time``: Supports ``=``, ``!=``, ``<``, ``>``,
           ``<=``, and ``>=`` comparisons. Values must be in RFC
           3339 format.
       -  ``end_time``: Supports ``=``, ``!=``, ``<``, ``>``,
           ``<=``, and ``>=`` comparisons. Values must be in RFC
           3339 format.
       -  ``labels``: Supports key-value equality and key presence.

       Filter expressions can be combined together using logical
       operators (``AND`` & ``OR``). For example:
       ``pipeline_name="test" AND create_time>"2020-05-18T13:30:00Z"``.

       The syntax to define filter expression is based on
       https://google.aip.dev/160.
   :param page_size: Optional. The standard list page size.
   :param page_token: Optional. The standard list page token. Typically obtained via
       [ListPipelineJobsResponse.next_page_token][google.cloud.aiplatform.v1.ListPipelineJobsResponse.next_page_token]
       of the previous
       [PipelineService.ListPipelineJobs][google.cloud.aiplatform.v1.PipelineService.ListPipelineJobs]
       call.
   :param order_by: Optional. A comma-separated list of fields to order by. The default
       sort order is in ascending order. Use "desc" after a field
       name for descending. You can have multiple order_by fields
       provided e.g. "create_time desc, end_time", "end_time,
       start_time, update_time" For example, using "create_time
       desc, end_time" will order results by create time in
       descending order, and if there are multiple jobs having the
       same create time, order them by the end time in ascending
       order. if order_by is not specified, it will order by
       default order is create time in descending order. Supported
       fields:

       -  ``create_time``
       -  ``update_time``
       -  ``end_time``
       -  ``start_time``
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ['region', 'project_id', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DeletePipelineJobOperator(*, project_id, region, pipeline_job_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete a Pipeline job.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param pipeline_job_id: Required. The ID of the PipelineJob resource to be deleted.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ['region', 'project_id', 'pipeline_job_id', 'impersonation_chain']

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



