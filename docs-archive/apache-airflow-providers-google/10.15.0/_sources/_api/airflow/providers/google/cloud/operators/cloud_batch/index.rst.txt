:py:mod:`airflow.providers.google.cloud.operators.cloud_batch`
==============================================================

.. py:module:: airflow.providers.google.cloud.operators.cloud_batch


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.cloud_batch.CloudBatchSubmitJobOperator
   airflow.providers.google.cloud.operators.cloud_batch.CloudBatchDeleteJobOperator
   airflow.providers.google.cloud.operators.cloud_batch.CloudBatchListJobsOperator
   airflow.providers.google.cloud.operators.cloud_batch.CloudBatchListTasksOperator




.. py:class:: CloudBatchSubmitJobOperator(project_id, region, job_name, job, polling_period_seconds = 10, timeout_seconds = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Submit a job and wait for its completion.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param job_name: Required. The name of the job to create.
   :param job: Required. The job descriptor containing the configuration of the job to submit.
   :param polling_period_seconds: Optional: Control the rate of the poll for the result of deferrable run.
       By default, the trigger will poll every 10 seconds.
   :param timeout: The timeout for this request.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param deferrable: Run operator in the deferrable mode


   .. py:attribute:: template_fields
      :value: ('project_id', 'region', 'gcp_conn_id', 'impersonation_chain', 'job_name')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event)



.. py:class:: CloudBatchDeleteJobOperator(project_id, region, job_name, timeout = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a job and wait for the operation to be completed.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param job_name: Required. The name of the job to be deleted.
   :param timeout: The timeout for this request.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'region', 'gcp_conn_id', 'impersonation_chain', 'job_name')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBatchListJobsOperator(project_id, region, gcp_conn_id = 'google_cloud_default', filter = None, limit = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   List Cloud Batch jobs.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param filter: The filter based on which to list the jobs. If left empty, all the jobs are listed.
   :param limit: The number of jobs to list. If left empty,
       all the jobs matching the filter will be returned.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'region', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBatchListTasksOperator(project_id, region, job_name, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, group_name = 'group0', filter = None, limit = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   List Cloud Batch tasks for a given job.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param job_name: Required. The name of the job for which to list tasks.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param filter: The filter based on which to list the jobs. If left empty, all the jobs are listed.
   :param group_name: The name of the group that owns the task. By default it's `group0`.
   :param limit: The number of tasks to list.
       If left empty, all the tasks matching the filter will be returned.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'region', 'job_name', 'gcp_conn_id', 'impersonation_chain', 'group_name')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



