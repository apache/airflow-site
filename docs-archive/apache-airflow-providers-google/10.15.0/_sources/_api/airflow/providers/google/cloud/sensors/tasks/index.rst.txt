:py:mod:`airflow.providers.google.cloud.sensors.tasks`
======================================================

.. py:module:: airflow.providers.google.cloud.sensors.tasks

.. autoapi-nested-parse::

   This module contains a Google Cloud Task sensor.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.sensors.tasks.TaskQueueEmptySensor




.. py:class:: TaskQueueEmptySensor(*, location, project_id = None, queue_name = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Pulls tasks count from a cloud task queue; waits for queue to return task count as 0.

   :param project_id: the Google Cloud project ID for the subscription (templated)
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param queue_name: The queue name to for which task empty sensing is required.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'location', 'queue_name', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: poke(context)

      Override when deriving this class.



