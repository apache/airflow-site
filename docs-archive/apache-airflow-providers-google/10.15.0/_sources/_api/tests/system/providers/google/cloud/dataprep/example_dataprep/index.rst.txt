:py:mod:`tests.system.providers.google.cloud.dataprep.example_dataprep`
=======================================================================

.. py:module:: tests.system.providers.google.cloud.dataprep.example_dataprep

.. autoapi-nested-parse::

   Example Airflow DAG that shows how to use Google Dataprep.

   This DAG relies on the following OS environment variables

   * SYSTEM_TESTS_DATAPREP_TOKEN - Dataprep API access token.
     For generating it please use instruction
     https://docs.trifacta.com/display/DP/Manage+API+Access+Tokens#:~:text=Enable%20individual%20access-,Generate%20New%20Token,-Via%20UI.



Module Contents
---------------

.. py:data:: ENV_ID

   

.. py:data:: DAG_ID
   :value: 'example_dataprep'

   

.. py:data:: CONNECTION_ID

   

.. py:data:: DATAPREP_TOKEN

   

.. py:data:: GCP_PROJECT_ID

   

.. py:data:: GCS_BUCKET_NAME

   

.. py:data:: GCS_BUCKET_PATH

   

.. py:data:: DATASET_URI
   :value: 'gs://airflow-system-tests-resources/dataprep/dataset-00000.parquet'

   

.. py:data:: DATASET_NAME

   

.. py:data:: DATASET_WRANGLED_NAME

   

.. py:data:: DATASET_WRANGLED_ID
   :value: "{{ task_instance.xcom_pull('create_wrangled_dataset')['id'] }}"

   

.. py:data:: FLOW_ID
   :value: "{{ task_instance.xcom_pull('create_flow')['id'] }}"

   

.. py:data:: FLOW_COPY_ID
   :value: "{{ task_instance.xcom_pull('copy_flow')['id'] }}"

   

.. py:data:: RECIPE_NAME

   

.. py:data:: WRITE_SETTINGS

   

.. py:data:: log

   

.. py:data:: create_bucket_task

   

.. py:data:: test_run

   

