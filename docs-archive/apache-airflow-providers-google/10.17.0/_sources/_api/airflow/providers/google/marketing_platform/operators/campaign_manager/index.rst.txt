:py:mod:`airflow.providers.google.marketing_platform.operators.campaign_manager`
================================================================================

.. py:module:: airflow.providers.google.marketing_platform.operators.campaign_manager

.. autoapi-nested-parse::

   This module contains Google CampaignManager operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerDeleteReportOperator
   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerDownloadReportOperator
   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerInsertReportOperator
   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerRunReportOperator
   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerBatchInsertConversionsOperator
   airflow.providers.google.marketing_platform.operators.campaign_manager.GoogleCampaignManagerBatchUpdateConversionsOperator




.. py:class:: GoogleCampaignManagerDeleteReportOperator(*, profile_id, report_name = None, report_id = None, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Deletes a report by its ID.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/reports/delete`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerDeleteReportOperator`

   :param profile_id: The DFA user profile ID.
   :param report_name: The name of the report to delete.
   :param report_id: The ID of the report.
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'report_id', 'report_name', 'api_version', 'gcp_conn_id', 'delegate_to',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleCampaignManagerDownloadReportOperator(*, profile_id, report_id, file_id, bucket_name, report_name = None, gzip = True, chunk_size = 10 * 1024 * 1024, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Retrieves a report and uploads it to GCS bucket.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/reports/get`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerDownloadReportOperator`

   :param profile_id: The DFA user profile ID.
   :param report_id: The ID of the report.
   :param file_id: The ID of the report file.
   :param bucket_name: The bucket to upload to.
   :param report_name: The report name to set when uploading the local file.
   :param gzip: Option to compress local file or file data for upload
   :param chunk_size: File will be downloaded in chunks of this many bytes.
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'report_id', 'file_id', 'bucket_name', 'report_name', 'chunk_size',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleCampaignManagerInsertReportOperator(*, profile_id, report, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a report.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/reports/insert`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerInsertReportOperator`

   :param profile_id: The DFA user profile ID.
   :param report: Report to be created.
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'report', 'api_version', 'gcp_conn_id', 'delegate_to', 'impersonation_chain')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.json',)

      

   .. py:method:: prepare_template()

      Execute after the templated fields get replaced by their content.

      If you need your object to alter the content of the file before the
      template is rendered, it should override this method to do so.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleCampaignManagerRunReportOperator(*, profile_id, report_id, synchronous = False, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Runs a report.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/reports/run`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerRunReportOperator`

   :param profile_id: The DFA profile ID.
   :param report_id: The ID of the report.
   :param synchronous: If set and true, tries to run the report synchronously.
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'report_id', 'synchronous', 'api_version', 'gcp_conn_id', 'delegate_to',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleCampaignManagerBatchInsertConversionsOperator(*, profile_id, conversions, encryption_entity_type, encryption_entity_id, encryption_source, max_failed_inserts = 0, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Inserts conversions.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchinsert`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerBatchInsertConversionsOperator`

   :param profile_id: User profile ID associated with this request.
   :param conversions: Conversions to insert, should be type of Conversion:
       https://developers.google.com/doubleclick-advertisers/rest/v4/conversions
   :param encryption_entity_type: The encryption entity type. This should match the encryption
       configuration for ad serving or Data Transfer.
   :param encryption_entity_id: The encryption entity ID. This should match the encryption
       configuration for ad serving or Data Transfer.
   :param encryption_source: Describes whether the encrypted cookie was received from ad serving
       (the %m macro) or from Data Transfer.
   :param max_failed_inserts: The maximum number of conversions that failed to be inserted
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'conversions', 'encryption_entity_type', 'encryption_entity_id',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleCampaignManagerBatchUpdateConversionsOperator(*, profile_id, conversions, encryption_entity_type, encryption_entity_id, encryption_source, max_failed_updates = 0, api_version = 'v4', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Updates existing conversions.

   .. seealso::
       Check official API docs:
       `https://developers.google.com/doubleclick-advertisers/rest/v4/conversions/batchupdate`

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleCampaignManagerBatchUpdateConversionsOperator`

   :param profile_id: User profile ID associated with this request.
   :param conversions: Conversations to update, should be type of Conversion:
       https://developers.google.com/doubleclick-advertisers/rest/v4/conversions
   :param encryption_entity_type: The encryption entity type. This should match the encryption
       configuration for ad serving or Data Transfer.
   :param encryption_entity_id: The encryption entity ID. This should match the encryption
       configuration for ad serving or Data Transfer.
   :param encryption_source: Describes whether the encrypted cookie was received from ad serving
       (the %m macro) or from Data Transfer.
   :param max_failed_updates: The maximum number of conversions that failed to be updated
   :param api_version: The version of the api that will be requested, for example 'v4'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('profile_id', 'conversions', 'encryption_entity_type', 'encryption_entity_id',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



