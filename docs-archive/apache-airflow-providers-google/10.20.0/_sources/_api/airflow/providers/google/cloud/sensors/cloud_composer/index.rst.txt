:py:mod:`airflow.providers.google.cloud.sensors.cloud_composer`
===============================================================

.. py:module:: airflow.providers.google.cloud.sensors.cloud_composer

.. autoapi-nested-parse::

   This module contains a Cloud Composer sensor.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.sensors.cloud_composer.CloudComposerEnvironmentSensor
   airflow.providers.google.cloud.sensors.cloud_composer.CloudComposerDAGRunSensor




.. py:class:: CloudComposerEnvironmentSensor(*, project_id, region, operation_name, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, pooling_period_seconds = 30, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Check the status of the Cloud Composer Environment task.

   This Sensor is deprecated. You can achieve the same functionality by using Cloud Composer Operators
   CloudComposerCreateEnvironmentOperator, CloudComposerDeleteEnvironmentOperator and
   CloudComposerUpdateEnvironmentOperator in  deferrable or non-deferrable mode, since every operator
   gives user a possibility to wait (asynchronously or synchronously) until Operation will be finished.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param operation_name: The name of the operation resource
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param pooling_period_seconds: Optional: Control the rate of the poll for the result of deferrable run.

   .. py:method:: execute(context)

      Airflow runs this method on the worker and defers using the trigger.


   .. py:method:: execute_complete(context, event = None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



.. py:class:: CloudComposerDAGRunSensor(*, project_id, region, environment_id, composer_dag_id, allowed_states = None, execution_range = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), poll_interval = 10, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Check if a DAG run has completed.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param environment_id: The name of the Composer environment.
   :param composer_dag_id: The ID of executable DAG.
   :param allowed_states: Iterable of allowed states, default is ``['success']``.
   :param execution_range: execution DAGs time range. Sensor checks DAGs states only for DAGs which were
       started in this time range. For yesterday, use [positive!] datetime.timedelta(days=1).
       For future, use [negative!] datetime.timedelta(days=-1). For specific time, use list of
       datetimes [datetime(2024,3,22,11,0,0), datetime(2024,3,22,12,0,0)].
       Or [datetime(2024,3,22,0,0,0)] in this case sensor will check for states from specific time in the
       past till current time execution.
       Default value datetime.timedelta(days=1).
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param poll_interval: Optional: Control the rate of the poll for the result of deferrable run.
   :param deferrable: Run sensor in deferrable mode.

   .. py:attribute:: template_fields
      :value: ('project_id', 'region', 'environment_id', 'composer_dag_id', 'impersonation_chain')

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event)



