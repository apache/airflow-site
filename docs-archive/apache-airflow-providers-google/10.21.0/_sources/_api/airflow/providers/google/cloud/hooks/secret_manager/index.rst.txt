:py:mod:`airflow.providers.google.cloud.hooks.secret_manager`
=============================================================

.. py:module:: airflow.providers.google.cloud.hooks.secret_manager

.. autoapi-nested-parse::

   This module contains a Secret Manager hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.secret_manager.SecretsManagerHook
   airflow.providers.google.cloud.hooks.secret_manager.GoogleCloudSecretManagerHook




.. py:class:: SecretsManagerHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for the Google Secret Manager API.

   See https://cloud.google.com/secret-manager

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.

   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account.

   .. py:method:: get_conn()

      Retrieve the connection to Secret Manager.

      :return: Secret Manager client.


   .. py:method:: get_secret(secret_id, secret_version = 'latest', project_id = PROVIDE_PROJECT_ID)

      Get secret value from the Secret Manager.

      :param secret_id: Secret Key
      :param secret_version: version of the secret (default is 'latest')
      :param project_id: Project id (if you want to override the project_id from credentials)



.. py:class:: GoogleCloudSecretManagerHook(gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for the Google Cloud Secret Manager API.

   See https://cloud.google.com/secret-manager

   .. py:method:: client()

      Create a Secret Manager Client.

      :return: Secret Manager client.


   .. py:method:: get_conn()

      Retrieve the connection to Secret Manager.

      :return: Secret Manager client.


   .. py:method:: create_secret(project_id, secret_id, secret = None, retry = DEFAULT, timeout = None, metadata = ())

      Create a secret.

      .. seealso::
          For more details see API documentation:
          https://cloud.google.com/python/docs/reference/secretmanager/latest/google.cloud.secretmanager_v1.services.secret_manager_service.SecretManagerServiceClient#google_cloud_secretmanager_v1_services_secret_manager_service_SecretManagerServiceClient_create_secret

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param secret_id: Required. ID of the secret to create.
      :param secret: Optional. Secret to create.
      :param retry: Optional. Designation of what errors, if any, should be retried.
      :param timeout: Optional. The timeout for this request.
      :param metadata: Optional. Strings which should be sent along with the request as metadata.
      :return: Secret object.


   .. py:method:: add_secret_version(project_id, secret_id, secret_payload = None, retry = DEFAULT, timeout = None, metadata = ())

      Add a version to the secret.

      .. seealso::
          For more details see API documentation:
          https://cloud.google.com/python/docs/reference/secretmanager/latest/google.cloud.secretmanager_v1.services.secret_manager_service.SecretManagerServiceClient#google_cloud_secretmanager_v1_services_secret_manager_service_SecretManagerServiceClient_add_secret_version

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param secret_id: Required. ID of the secret to create.
      :param secret_payload: Optional. A secret payload.
      :param retry: Optional. Designation of what errors, if any, should be retried.
      :param timeout: Optional. The timeout for this request.
      :param metadata: Optional. Strings which should be sent along with the request as metadata.
      :return: Secret version object.


   .. py:method:: list_secrets(project_id, page_size = 0, page_token = None, secret_filter = None, retry = DEFAULT, timeout = None, metadata = ())

      List secrets.

      .. seealso::
          For more details see API documentation:
          https://cloud.google.com/python/docs/reference/secretmanager/latest/google.cloud.secretmanager_v1.services.secret_manager_service.SecretManagerServiceClient#google_cloud_secretmanager_v1_services_secret_manager_service_SecretManagerServiceClient_list_secrets

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param page_size: Optional, number of results to return in the list.
      :param page_token: Optional, token to provide to skip to a particular spot in the list.
      :param secret_filter: Optional. Filter string.
      :param retry: Optional. Designation of what errors, if any, should be retried.
      :param timeout: Optional. The timeout for this request.
      :param metadata: Optional. Strings which should be sent along with the request as metadata.
      :return: Secret List object.


   .. py:method:: secret_exists(project_id, secret_id)

      Check whether secret exists.

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param secret_id: Required. ID of the secret to find.
      :return: True if the secret exists, False otherwise.


   .. py:method:: access_secret(project_id, secret_id, secret_version = 'latest', retry = DEFAULT, timeout = None, metadata = ())

      Access a secret version.

      .. seealso::
          For more details see API documentation:
          https://cloud.google.com/python/docs/reference/secretmanager/latest/google.cloud.secretmanager_v1.services.secret_manager_service.SecretManagerServiceClient#google_cloud_secretmanager_v1_services_secret_manager_service_SecretManagerServiceClient_access_secret_version

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param secret_id: Required. ID of the secret to access.
      :param secret_version: Optional. Version of the secret to access. Default: latest.
      :param retry: Optional. Designation of what errors, if any, should be retried.
      :param timeout: Optional. The timeout for this request.
      :param metadata: Optional. Strings which should be sent along with the request as metadata.
      :return: Access secret version response object.


   .. py:method:: delete_secret(project_id, secret_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete a secret.

      .. seealso::
          For more details see API documentation:
          https://cloud.google.com/python/docs/reference/secretmanager/latest/google.cloud.secretmanager_v1.services.secret_manager_service.SecretManagerServiceClient#google_cloud_secretmanager_v1_services_secret_manager_service_SecretManagerServiceClient_delete_secret

      :param project_id: Required. ID of the GCP project that owns the job.
          If set to ``None`` or missing, the default project_id from the GCP connection is used.
      :param secret_id: Required. ID of the secret to delete.
      :param retry: Optional. Designation of what errors, if any, should be retried.
      :param timeout: Optional. The timeout for this request.
      :param metadata: Optional. Strings which should be sent along with the request as metadata.
      :return: Access secret version response object.



