:py:mod:`airflow.providers.google.cloud.operators.vertex_ai.generative_model`
=============================================================================

.. py:module:: airflow.providers.google.cloud.operators.vertex_ai.generative_model

.. autoapi-nested-parse::

   This module contains Google Vertex AI Generative AI operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.vertex_ai.generative_model.PromptLanguageModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.GenerateTextEmbeddingsOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.PromptMultimodalModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.PromptMultimodalModelWithMediaOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.TextGenerationModelPredictOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.TextEmbeddingModelGetEmbeddingsOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.GenerativeModelGenerateContentOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.SupervisedFineTuningTrainOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.CountTokensOperator
   airflow.providers.google.cloud.operators.vertex_ai.generative_model.RunEvaluationOperator




.. py:class:: PromptLanguageModelOperator(*, project_id, location, prompt, pretrained_model = 'text-bison', temperature = 0.0, max_output_tokens = 256, top_p = 0.8, top_k = 40, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Uses the Vertex AI PaLM API to generate natural language text.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Vertex AI PaLM API, in order to elicit a specific response (templated).
   :param pretrained_model: By default uses the pre-trained model `text-bison`,
       optimized for performing natural language tasks such as classification,
       summarization, extraction, content creation, and ideation.
   :param temperature: Temperature controls the degree of randomness in token
       selection. Defaults to 0.0.
   :param max_output_tokens: Token limit determines the maximum amount of text
       output. Defaults to 256.
   :param top_p: Tokens are selected from most probable to least until the sum
       of their probabilities equals the top_p value. Defaults to 0.8.
   :param top_k: A top_k of 1 means the selected token is the most probable
       among all tokens. Defaults to 0.4.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GenerateTextEmbeddingsOperator(*, project_id, location, prompt, pretrained_model = 'textembedding-gecko', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Uses the Vertex AI PaLM API to generate natural language text.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Vertex AI PaLM API, in order to elicit a specific response (templated).
   :param pretrained_model: By default uses the pre-trained model `textembedding-gecko`,
       optimized for performing text embeddings.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: PromptMultimodalModelOperator(*, project_id, location, prompt, generation_config = None, safety_settings = None, pretrained_model = 'gemini-pro', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Vertex AI Gemini Pro foundation model to generate natural language text.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Multi-modal model, in order to elicit a specific response (templated).
   :param generation_config: Optional. Generation configuration settings.
   :param safety_settings: Optional. Per request settings for blocking unsafe content.
   :param pretrained_model: By default uses the pre-trained model `gemini-pro`,
       supporting prompts with text-only input, including natural language
       tasks, multi-turn text and code chat, and code generation. It can
       output text and code.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: PromptMultimodalModelWithMediaOperator(*, project_id, location, prompt, media_gcs_path, mime_type, generation_config = None, safety_settings = None, pretrained_model = 'gemini-pro-vision', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Vertex AI Gemini Pro foundation model to generate natural language text.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Multi-modal model, in order to elicit a specific response (templated).
   :param generation_config: Optional. Generation configuration settings.
   :param safety_settings: Optional. Per request settings for blocking unsafe content.
   :param pretrained_model: By default uses the pre-trained model `gemini-pro-vision`,
       supporting prompts with text-only input, including natural language
       tasks, multi-turn text and code chat, and code generation. It can
       output text and code.
   :param media_gcs_path: A GCS path to a media file such as an image or a video.
       Can be passed to the multi-modal model as part of the prompt. Used with vision models.
   :param mime_type: Validates the media type presented by the file in the media_gcs_path.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TextGenerationModelPredictOperator(*, project_id, location, prompt, pretrained_model = 'text-bison', temperature = 0.0, max_output_tokens = 256, top_p = 0.8, top_k = 40, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Uses the Vertex AI PaLM API to generate natural language text.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Vertex AI PaLM API, in order to elicit a specific response (templated).
   :param pretrained_model: By default uses the pre-trained model `text-bison`,
       optimized for performing natural language tasks such as classification,
       summarization, extraction, content creation, and ideation.
   :param temperature: Temperature controls the degree of randomness in token
       selection. Defaults to 0.0.
   :param max_output_tokens: Token limit determines the maximum amount of text
       output. Defaults to 256.
   :param top_p: Tokens are selected from most probable to least until the sum
       of their probabilities equals the top_p value. Defaults to 0.8.
   :param top_k: A top_k of 1 means the selected token is the most probable
       among all tokens. Defaults to 0.4.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TextEmbeddingModelGetEmbeddingsOperator(*, project_id, location, prompt, pretrained_model = 'textembedding-gecko', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Uses the Vertex AI Embeddings API to generate embeddings based on prompt.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param prompt: Required. Inputs or queries that a user or a program gives
       to the Vertex AI PaLM API, in order to elicit a specific response (templated).
   :param pretrained_model: By default uses the pre-trained model `textembedding-gecko`,
       optimized for performing text embeddings.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'prompt')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GenerativeModelGenerateContentOperator(*, project_id, location, contents, tools = None, generation_config = None, safety_settings = None, system_instruction = None, pretrained_model = 'gemini-pro', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Vertex AI Gemini Pro foundation model to generate content.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param contents: Required. The multi-part content of a message that a user or a program
       gives to the generative model, in order to elicit a specific response.
   :param generation_config: Optional. Generation configuration settings.
   :param safety_settings: Optional. Per request settings for blocking unsafe content.
   :param tools: Optional. A list of tools available to the model during evaluation, such as a data store.
   :param system_instruction: Optional. An instruction given to the model to guide its behavior.
   :param pretrained_model: By default uses the pre-trained model `gemini-pro`,
       supporting prompts with text-only input, including natural language
       tasks, multi-turn text and code chat, and code generation. It can
       output text and code.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'contents', 'pretrained_model')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SupervisedFineTuningTrainOperator(*, project_id, location, source_model, train_dataset, tuned_model_display_name = None, validation_dataset = None, epochs = None, adapter_size = None, learning_rate_multiplier = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Supervised Fine Tuning API to create a tuning job.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to.
   :param location: Required. The ID of the Google Cloud location that the service belongs to.
   :param source_model: Required. A pre-trained model optimized for performing natural
       language tasks such as classification, summarization, extraction, content
       creation, and ideation.
   :param train_dataset: Required. Cloud Storage URI of your training dataset. The dataset
       must be formatted as a JSONL file. For best results, provide at least 100 to 500 examples.
   :param tuned_model_display_name: Optional. Display name of the TunedModel. The name can be up
       to 128 characters long and can consist of any UTF-8 characters.
   :param validation_dataset: Optional. Cloud Storage URI of your training dataset. The dataset must be
       formatted as a JSONL file. For best results, provide at least 100 to 500 examples.
   :param epochs: Optional. To optimize performance on a specific dataset, try using a higher
       epoch value. Increasing the number of epochs might improve results. However, be cautious
       about over-fitting, especially when dealing with small datasets. If over-fitting occurs,
       consider lowering the epoch number.
   :param adapter_size: Optional. Adapter size for tuning.
   :param learning_multiplier_rate: Optional. Multiplier for adjusting the default learning rate.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'train_dataset', 'validation_dataset')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CountTokensOperator(*, project_id, location, contents, pretrained_model = 'gemini-pro', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Vertex AI Count Tokens API to calculate the number of input tokens before sending a request to the Gemini API.

   :param project_id: Required. The ID of the Google Cloud project that the
       service belongs to (templated).
   :param location: Required. The ID of the Google Cloud location that the
       service belongs to (templated).
   :param contents: Required. The multi-part content of a message that a user or a program
       gives to the generative model, in order to elicit a specific response.
   :param pretrained_model: By default uses the pre-trained model `gemini-pro`,
       supporting prompts with text-only input, including natural language
       tasks, multi-turn text and code chat, and code generation. It can
       output text and code.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'contents', 'pretrained_model')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: RunEvaluationOperator(*, project_id, location, pretrained_model, eval_dataset, metrics, experiment_name, experiment_run_name, prompt_template, generation_config = None, safety_settings = None, system_instruction = None, tools = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Use the Rapid Evaluation API to evaluate a model.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud location that the service belongs to.
   :param pretrained_model: Required. A pre-trained model optimized for performing natural
       language tasks such as classification, summarization, extraction, content
       creation, and ideation.
   :param eval_dataset: Required. A fixed dataset for evaluating a model against. Adheres to Rapid Evaluation API.
   :param metrics: Required. A list of evaluation metrics to be used in the experiment. Adheres to Rapid Evaluation API.
   :param experiment_name: Required. The name of the evaluation experiment.
   :param experiment_run_name: Required. The specific run name or ID for this experiment.
   :param prompt_template: Required. The template used to format the model's prompts during evaluation. Adheres to Rapid Evaluation API.
   :param generation_config: Optional. A dictionary containing generation parameters for the model.
   :param safety_settings: Optional. A dictionary specifying harm category thresholds for blocking model outputs.
   :param system_instruction: Optional. An instruction given to the model to guide its behavior.
   :param tools: Optional. A list of tools available to the model during evaluation, such as a data store.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('location', 'project_id', 'impersonation_chain', 'pretrained_model', 'eval_dataset',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



