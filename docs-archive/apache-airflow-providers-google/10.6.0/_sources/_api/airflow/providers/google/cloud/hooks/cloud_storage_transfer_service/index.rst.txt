:py:mod:`airflow.providers.google.cloud.hooks.cloud_storage_transfer_service`
=============================================================================

.. py:module:: airflow.providers.google.cloud.hooks.cloud_storage_transfer_service

.. autoapi-nested-parse::

   This module contains a Google Storage Transfer Service Hook.

   .. spelling::

       ListTransferJobsAsyncPager
       StorageTransferServiceAsyncClient



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.GcpTransferJobsStatus
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.GcpTransferOperationStatus
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceHook
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.CloudDataTransferServiceAsyncHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.gen_job_name



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.log
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TIME_TO_SLEEP_IN_SECONDS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.ACCESS_KEY_ID
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.ALREADY_EXISTING_IN_SINK
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.AWS_ACCESS_KEY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.AWS_SECRET_ACCESS_KEY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.AWS_S3_DATA_SOURCE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.BODY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.BUCKET_NAME
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.COUNTERS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.DAY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.DESCRIPTION
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.FILTER
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.FILTER_JOB_NAMES
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.FILTER_PROJECT_ID
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.GCS_DATA_SINK
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.GCS_DATA_SOURCE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.HOURS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.HTTP_DATA_SOURCE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.INCLUDE_PREFIXES
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.JOB_NAME
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.LIST_URL
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.METADATA
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.MINUTES
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.MONTH
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.NAME
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.OBJECT_CONDITIONS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.OPERATIONS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.OVERWRITE_OBJECTS_ALREADY_EXISTING_IN_SINK
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.PATH
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.PROJECT_ID
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.SCHEDULE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.SCHEDULE_END_DATE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.SCHEDULE_START_DATE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.SECONDS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.SECRET_ACCESS_KEY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.START_TIME_OF_DAY
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.STATUS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.STATUS1
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_JOB
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_JOBS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_JOB_FIELD_MASK
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_OPERATIONS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_OPTIONS
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.TRANSFER_SPEC
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.YEAR
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.ALREADY_EXIST_CODE
   airflow.providers.google.cloud.hooks.cloud_storage_transfer_service.NEGATIVE_STATUSES


.. py:data:: log

   

.. py:data:: TIME_TO_SLEEP_IN_SECONDS
   :value: 10

   

.. py:class:: GcpTransferJobsStatus


   Google Cloud Transfer job status.

   .. py:attribute:: ENABLED
      :value: 'ENABLED'

      

   .. py:attribute:: DISABLED
      :value: 'DISABLED'

      

   .. py:attribute:: DELETED
      :value: 'DELETED'

      


.. py:class:: GcpTransferOperationStatus


   Google Cloud Transfer operation status.

   .. py:attribute:: IN_PROGRESS
      :value: 'IN_PROGRESS'

      

   .. py:attribute:: PAUSED
      :value: 'PAUSED'

      

   .. py:attribute:: SUCCESS
      :value: 'SUCCESS'

      

   .. py:attribute:: FAILED
      :value: 'FAILED'

      

   .. py:attribute:: ABORTED
      :value: 'ABORTED'

      


.. py:data:: ACCESS_KEY_ID
   :value: 'accessKeyId'

   

.. py:data:: ALREADY_EXISTING_IN_SINK
   :value: 'overwriteObjectsAlreadyExistingInSink'

   

.. py:data:: AWS_ACCESS_KEY
   :value: 'awsAccessKey'

   

.. py:data:: AWS_SECRET_ACCESS_KEY
   :value: 'secretAccessKey'

   

.. py:data:: AWS_S3_DATA_SOURCE
   :value: 'awsS3DataSource'

   

.. py:data:: BODY
   :value: 'body'

   

.. py:data:: BUCKET_NAME
   :value: 'bucketName'

   

.. py:data:: COUNTERS
   :value: 'counters'

   

.. py:data:: DAY
   :value: 'day'

   

.. py:data:: DESCRIPTION
   :value: 'description'

   

.. py:data:: FILTER
   :value: 'filter'

   

.. py:data:: FILTER_JOB_NAMES
   :value: 'job_names'

   

.. py:data:: FILTER_PROJECT_ID
   :value: 'project_id'

   

.. py:data:: GCS_DATA_SINK
   :value: 'gcsDataSink'

   

.. py:data:: GCS_DATA_SOURCE
   :value: 'gcsDataSource'

   

.. py:data:: HOURS
   :value: 'hours'

   

.. py:data:: HTTP_DATA_SOURCE
   :value: 'httpDataSource'

   

.. py:data:: INCLUDE_PREFIXES
   :value: 'includePrefixes'

   

.. py:data:: JOB_NAME
   :value: 'name'

   

.. py:data:: LIST_URL
   :value: 'list_url'

   

.. py:data:: METADATA
   :value: 'metadata'

   

.. py:data:: MINUTES
   :value: 'minutes'

   

.. py:data:: MONTH
   :value: 'month'

   

.. py:data:: NAME
   :value: 'name'

   

.. py:data:: OBJECT_CONDITIONS
   :value: 'object_conditions'

   

.. py:data:: OPERATIONS
   :value: 'operations'

   

.. py:data:: OVERWRITE_OBJECTS_ALREADY_EXISTING_IN_SINK
   :value: 'overwriteObjectsAlreadyExistingInSink'

   

.. py:data:: PATH
   :value: 'path'

   

.. py:data:: PROJECT_ID
   :value: 'projectId'

   

.. py:data:: SCHEDULE
   :value: 'schedule'

   

.. py:data:: SCHEDULE_END_DATE
   :value: 'scheduleEndDate'

   

.. py:data:: SCHEDULE_START_DATE
   :value: 'scheduleStartDate'

   

.. py:data:: SECONDS
   :value: 'seconds'

   

.. py:data:: SECRET_ACCESS_KEY
   :value: 'secretAccessKey'

   

.. py:data:: START_TIME_OF_DAY
   :value: 'startTimeOfDay'

   

.. py:data:: STATUS
   :value: 'status'

   

.. py:data:: STATUS1
   :value: 'status'

   

.. py:data:: TRANSFER_JOB
   :value: 'transfer_job'

   

.. py:data:: TRANSFER_JOBS
   :value: 'transferJobs'

   

.. py:data:: TRANSFER_JOB_FIELD_MASK
   :value: 'update_transfer_job_field_mask'

   

.. py:data:: TRANSFER_OPERATIONS
   :value: 'transferOperations'

   

.. py:data:: TRANSFER_OPTIONS
   :value: 'transfer_options'

   

.. py:data:: TRANSFER_SPEC
   :value: 'transferSpec'

   

.. py:data:: YEAR
   :value: 'year'

   

.. py:data:: ALREADY_EXIST_CODE
   :value: 409

   

.. py:data:: NEGATIVE_STATUSES

   

.. py:function:: gen_job_name(job_name)

   Add a unique suffix to the job name.

   :param job_name:
   :return: job_name with suffix


.. py:class:: CloudDataTransferServiceHook(api_version = 'v1', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Google Storage Transfer Service functionalities.

   All methods in the hook with *project_id* in the signature must be called
   with keyword arguments rather than positional.

   .. py:method:: get_conn()

      Retrieve connection to Google Storage Transfer service.

      :return: Google Storage Transfer service object


   .. py:method:: create_transfer_job(body)

      Create a transfer job that runs periodically.

      :param body: (Required) The request body, as described in
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/patch#request-body
      :return: The transfer job. See:
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob


   .. py:method:: get_transfer_job(job_name, project_id)

      Get latest state of a long-running Google Storage Transfer Service job.

      :param job_name: (Required) Name of the job to be fetched
      :param project_id: (Optional) the ID of the project that owns the Transfer
          Job. If set to None or missing, the default project_id from the Google Cloud
          connection is used.
      :return: Transfer Job


   .. py:method:: list_transfer_job(request_filter = None, **kwargs)

      List long-running operations in Google Storage Transfer Service.

      A filter can be specified to match only certain entries.

      :param request_filter: (Required) A request filter, as described in
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/list#body.QUERY_PARAMETERS.filter
      :return: List of Transfer Jobs


   .. py:method:: enable_transfer_job(job_name, project_id)

      Make new transfers be performed based on the schedule.

      :param job_name: (Required) Name of the job to be updated
      :param project_id: (Optional) the ID of the project that owns the Transfer
          Job. If set to None or missing, the default project_id from the Google Cloud
          connection is used.
      :return: If successful, TransferJob.


   .. py:method:: update_transfer_job(job_name, body)

      Update a transfer job that runs periodically.

      :param job_name: (Required) Name of the job to be updated
      :param body: A request body, as described in
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/patch#request-body
      :return: If successful, TransferJob.


   .. py:method:: delete_transfer_job(job_name, project_id)

      Delete a transfer job.

      This is a soft delete. After a transfer job is deleted, the job and all
      the transfer executions are subject to garbage collection. Transfer jobs
      become eligible for garbage collection 30 days after soft delete.

      :param job_name: (Required) Name of the job to be deleted
      :param project_id: (Optional) the ID of the project that owns the Transfer
          Job. If set to None or missing, the default project_id from the Google Cloud
          connection is used.


   .. py:method:: cancel_transfer_operation(operation_name)

      Cancel a transfer operation in Google Storage Transfer Service.

      :param operation_name: Name of the transfer operation.


   .. py:method:: get_transfer_operation(operation_name)

      Get a transfer operation in Google Storage Transfer Service.

      :param operation_name: (Required) Name of the transfer operation.
      :return: transfer operation

      .. seealso:: https://cloud.google.com/storage-transfer/docs/reference/rest/v1/Operation


   .. py:method:: list_transfer_operations(request_filter = None, **kwargs)

      Get a transfer operation in Google Storage Transfer Service.

      :param request_filter: (Required) A request filter, as described in
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs/list#body.QUERY_PARAMETERS.filter
          With one additional improvement:
      :return: transfer operation

      The ``project_id`` parameter is optional if you have a project ID
      defined in the connection. See: :doc:`/connections/gcp`


   .. py:method:: pause_transfer_operation(operation_name)

      Pause a transfer operation in Google Storage Transfer Service.

      :param operation_name: (Required) Name of the transfer operation.


   .. py:method:: resume_transfer_operation(operation_name)

      Resume a transfer operation in Google Storage Transfer Service.

      :param operation_name: (Required) Name of the transfer operation.


   .. py:method:: wait_for_transfer_job(job, expected_statuses = None, timeout = None)

      Wait until the job reaches the expected state.

      :param job: The transfer job to wait for. See:
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs#TransferJob
      :param expected_statuses: The expected state. See:
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferOperations#Status
      :param timeout: Time in which the operation must end in seconds. If not
          specified, defaults to 60 seconds.


   .. py:method:: operations_contain_expected_statuses(operations, expected_statuses)
      :staticmethod:

      Check whether an operation exists with the expected status.

      :param operations: (Required) List of transfer operations to check.
      :param expected_statuses: (Required) The expected status. See:
          https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferOperations#Status
      :return: If there is an operation with the expected state in the
          operation list, returns true,
      :raises AirflowException: If it encounters operations with state FAILED
          or ABORTED in the list.



.. py:class:: CloudDataTransferServiceAsyncHook(project_id = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseAsyncHook`

   Asynchronous hook for Google Storage Transfer Service.

   .. py:method:: get_conn()

      Returns async connection to the Storage Transfer Service.

      :return: Google Storage Transfer asynchronous client.


   .. py:method:: get_jobs(job_names)
      :async:

      Gets the latest state of a long-running operations in Google Storage Transfer Service.

      :param job_names: (Required) List of names of the jobs to be fetched.
      :return: Object that yields Transfer jobs.


   .. py:method:: get_latest_operation(job)
      :async:

      Gets the latest operation of the given TransferJob instance.

      :param job: Transfer job instance.
      :return: The latest job operation.



