:py:mod:`airflow.providers.google.cloud.triggers.dataflow`
==========================================================

.. py:module:: airflow.providers.google.cloud.triggers.dataflow


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.dataflow.TemplateJobStartTrigger




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.dataflow.DEFAULT_DATAFLOW_LOCATION


.. py:data:: DEFAULT_DATAFLOW_LOCATION
   :value: 'us-central1'

   

.. py:class:: TemplateJobStartTrigger(job_id, project_id, location = DEFAULT_DATAFLOW_LOCATION, gcp_conn_id = 'google_cloud_default', poll_sleep = 10, impersonation_chain = None, cancel_timeout = 5 * 60)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Dataflow trigger to check if templated job has been finished.

   :param project_id: Required. the Google Cloud project ID in which the job was started.
   :param job_id: Required. ID of the job.
   :param location: Optional. the location where job is executed. If set to None then
       the value of DEFAULT_DATAFLOW_LOCATION will be used
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param cancel_timeout: Optional. How long (in seconds) operator should wait for the pipeline to be
       successfully cancelled when task is being killed.

   .. py:method:: serialize()

      Serializes class arguments and classpath.


   .. py:method:: run()
      :async:

      Main loop of the class in where it is fetching the job status and yields certain Event.

      If the job has status success then it yields TriggerEvent with success status, if job has
      status failed - with error status. In any other case Trigger will wait for specified
      amount of time stored in self.poll_sleep variable.



