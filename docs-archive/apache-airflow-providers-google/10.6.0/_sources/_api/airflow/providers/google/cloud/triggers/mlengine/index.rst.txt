:py:mod:`airflow.providers.google.cloud.triggers.mlengine`
==========================================================

.. py:module:: airflow.providers.google.cloud.triggers.mlengine


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.mlengine.MLEngineStartTrainingJobTrigger




.. py:class:: MLEngineStartTrainingJobTrigger(conn_id, job_id, region, poll_interval = 4.0, package_uris = None, training_python_module = None, training_args = None, runtime_version = None, python_version = None, job_dir = None, project_id = None, labels = None, gcp_conn_id = 'google_cloud_default', impersonation_chain = None)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   MLEngineStartTrainingJobTrigger run on the trigger worker to perform starting training job operation.

   :param conn_id: Reference to google cloud connection id
   :param job_id:  The ID of the job. It will be suffixed with hash of job configuration
   :param project_id: Google Cloud Project where the job is running
   :param poll_interval: polling period in seconds to check for the status

   .. py:method:: serialize()

      Serializes MLEngineStartTrainingJobTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Gets current job execution status and yields a TriggerEvent.



