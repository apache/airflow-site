:py:mod:`airflow.providers.google.marketing_platform.operators.display_video`
=============================================================================

.. py:module:: airflow.providers.google.marketing_platform.operators.display_video

.. autoapi-nested-parse::

   This module contains Google DisplayVideo operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360CreateQueryOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360DeleteReportOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360DownloadReportV2Operator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360RunQueryOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360DownloadLineItemsOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360UploadLineItemsOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360CreateSDFDownloadTaskOperator
   airflow.providers.google.marketing_platform.operators.display_video.GoogleDisplayVideo360SDFtoGCSOperator




.. py:class:: GoogleDisplayVideo360CreateQueryOperator(*, body, api_version = 'v2', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a query.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       ``GoogleDisplayVideo360CreateQueryOperator``

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v2/queries/create`

   :param body: Report object passed to the request's body as described here:
       https://developers.google.com/bid-manager/v2/queries#Query
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('body', 'impersonation_chain')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.json',)

      

   .. py:method:: prepare_template()

      Execute after the templated fields get replaced by their content.

      If you need your object to alter the content of the file before the
      template is rendered, it should override this method to do so.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360DeleteReportOperator(*, report_id = None, report_name = None, api_version = 'v2', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Deletes a stored query as well as the associated stored reports.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360DeleteReportOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v2/queries/delete`

   :param report_id: Report ID to delete.
   :param report_name: Name of the report to delete.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('report_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360DownloadReportV2Operator(*, query_id, report_id, bucket_name, report_name = None, gzip = True, chunk_size = 10 * 1024 * 1024, api_version = 'v2', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Retrieves a stored query.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360DownloadReportV2Operator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v2/queries/get`

   :param report_id: Report ID to retrieve.
   :param bucket_name: The bucket to upload to.
   :param report_name: The report name to set when uploading the local file.
   :param chunk_size: File will be downloaded in chunks of this many bytes.
   :param gzip: Option to compress local file or file data for upload
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('query_id', 'report_id', 'bucket_name', 'report_name', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360RunQueryOperator(*, query_id, parameters = None, api_version = 'v2', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Runs a stored query to generate a report.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360RunQueryOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v2/queries/run`

   :param report_id: Report ID to run.
   :param parameters: Parameters for running a report as described here:
       https://developers.google.com/bid-manager/v2/queries/run
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('query_id', 'parameters', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360DownloadLineItemsOperator(*, request_body, bucket_name, object_name, gzip = False, api_version = 'v1.1', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Retrieves line items in CSV format.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360DownloadLineItemsOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1.1/lineitems/downloadlineitems`

   :param request_body: dictionary with parameters that should be passed into.
           More information about it can be found here:
           https://developers.google.com/bid-manager/v1.1/lineitems/downloadlineitems

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('request_body', 'bucket_name', 'object_name', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360UploadLineItemsOperator(*, bucket_name, object_name, api_version = 'v1.1', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Uploads line items in CSV format.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360UploadLineItemsOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/bid-manager/v1.1/lineitems/uploadlineitems`

   :param request_body: request to upload line items.
   :param bucket_name: The bucket form data is downloaded.
   :param object_name: The object to fetch.
   :param filename: The filename to fetch.
   :param dry_run: Upload status without actually persisting the line items.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('bucket_name', 'object_name', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360CreateSDFDownloadTaskOperator(*, body_request, api_version = 'v1', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates SDF operation task.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360CreateSDFDownloadTaskOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/display-video/api/reference/rest`

   :param version: The SDF version of the downloaded file.
   :param partner_id: The ID of the partner to download SDF for.
   :param advertiser_id: The ID of the advertiser to download SDF for.
   :param parent_entity_filter: Filters on selected file types.
   :param id_filter: Filters on entities by their entity IDs.
   :param inventory_source_filter: Filters on Inventory Sources by their IDs.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('body_request', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GoogleDisplayVideo360SDFtoGCSOperator(*, operation_name, bucket_name, object_name, gzip = False, api_version = 'v1', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Download SDF media and save it in the Google Cloud Storage.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360SDFtoGCSOperator`

   .. seealso::
       Check also the official API docs:
       `https://developers.google.com/display-video/api/reference/rest`

   :param version: The SDF version of the downloaded file.
   :param partner_id: The ID of the partner to download SDF for.
   :param advertiser_id: The ID of the advertiser to download SDF for.
   :param parent_entity_filter: Filters on selected file types.
   :param id_filter: Filters on entities by their entity IDs.
   :param inventory_source_filter: Filters on Inventory Sources by their IDs.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('operation_name', 'bucket_name', 'object_name', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



