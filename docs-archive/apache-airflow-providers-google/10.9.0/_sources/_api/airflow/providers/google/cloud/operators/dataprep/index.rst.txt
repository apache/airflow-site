:py:mod:`airflow.providers.google.cloud.operators.dataprep`
===========================================================

.. py:module:: airflow.providers.google.cloud.operators.dataprep

.. autoapi-nested-parse::

   This module contains a Google Dataprep operator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.dataprep.DataprepGetJobsForJobGroupOperator
   airflow.providers.google.cloud.operators.dataprep.DataprepGetJobGroupOperator
   airflow.providers.google.cloud.operators.dataprep.DataprepRunJobGroupOperator
   airflow.providers.google.cloud.operators.dataprep.DataprepCopyFlowOperator
   airflow.providers.google.cloud.operators.dataprep.DataprepDeleteFlowOperator
   airflow.providers.google.cloud.operators.dataprep.DataprepRunFlowOperator




.. py:class:: DataprepGetJobsForJobGroupOperator(*, dataprep_conn_id = 'dataprep_default', job_group_id, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get information about the batch jobs within a Cloud Dataprep job.

   API documentation: https://clouddataprep.com/documentation/api#section/Overview.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataprepGetJobsForJobGroupOperator`

   :param job_group_id The ID of the job group that will be requests

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_group_id',)

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprepGetJobGroupOperator(*, dataprep_conn_id = 'dataprep_default', project_id = None, job_group_id, embed, include_deleted, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get the specified job group.

   A job group is a job that is executed from a specific node in a flow.

   API documentation: https://clouddataprep.com/documentation/api#section/Overview.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataprepGetJobGroupOperator`

   :param job_group_id: The ID of the job group that will be requests
   :param embed: Comma-separated list of objects to pull in as part of the response
   :param include_deleted: if set to "true", will include deleted objects

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_group_id', 'embed', 'project_id')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprepRunJobGroupOperator(*, project_id = None, dataprep_conn_id = 'dataprep_default', body_request, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create a ``jobGroup``, which launches the specified job as the authenticated user.

   This performs the same action as clicking on the Run Job button in the application.

   To get recipe_id please follow the Dataprep API documentation:
   https://clouddataprep.com/documentation/api#operation/runJobGroup.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataprepRunJobGroupOperator`

   :param dataprep_conn_id: The Dataprep connection ID
   :param body_request:  Passed as the body_request to GoogleDataprepHook's run_job_group,
       where it's the identifier for the recipe to run

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('body_request',)

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprepCopyFlowOperator(*, project_id = None, dataprep_conn_id = 'dataprep_default', flow_id, name = '', description = '', copy_datasources = False, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create a copy of the provided flow id, as well as all contained recipes.

   :param dataprep_conn_id: The Dataprep connection ID
   :param flow_id: ID of the flow to be copied
   :param name: Name for the copy of the flow
   :param description: Description of the copy of the flow
   :param copy_datasources: Bool value to define should the copy of data inputs be made or not.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('flow_id', 'name', 'project_id', 'description')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprepDeleteFlowOperator(*, dataprep_conn_id = 'dataprep_default', flow_id, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete the flow with provided id.

   :param dataprep_conn_id: The Dataprep connection ID
   :param flow_id: ID of the flow to be copied

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('flow_id',)

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprepRunFlowOperator(*, project_id = None, flow_id, body_request, dataprep_conn_id = 'dataprep_default', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Runs the flow with the provided id copy of the provided flow id.

   :param dataprep_conn_id: The Dataprep connection ID
   :param flow_id: ID of the flow to be copied
   :param body_request: Body of the POST request to be sent.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('flow_id', 'project_id')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



