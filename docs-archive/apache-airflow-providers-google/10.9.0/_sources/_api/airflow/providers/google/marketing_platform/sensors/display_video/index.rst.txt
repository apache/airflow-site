:py:mod:`airflow.providers.google.marketing_platform.sensors.display_video`
===========================================================================

.. py:module:: airflow.providers.google.marketing_platform.sensors.display_video

.. autoapi-nested-parse::

   Sensor for detecting the completion of DV360 reports.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.marketing_platform.sensors.display_video.GoogleDisplayVideo360GetSDFDownloadOperationSensor
   airflow.providers.google.marketing_platform.sensors.display_video.GoogleDisplayVideo360RunQuerySensor




.. py:class:: GoogleDisplayVideo360GetSDFDownloadOperationSensor(operation_name, api_version = 'v1', gcp_conn_id = 'google_cloud_default', delegate_to = None, mode = 'reschedule', poke_interval = 60 * 5, impersonation_chain = None, *args, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Sensor for detecting the completion of SDF operation.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360GetSDFDownloadOperationSensor`

   :param operation_name: The name of the operation resource
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('operation_name', 'impersonation_chain')

      

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: GoogleDisplayVideo360RunQuerySensor(*, query_id, report_id, api_version = 'v2', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Sensor for detecting the completion of DV360 reports for API v2.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDisplayVideo360RunQuerySensor`

   :param query_id: Query ID for which report was generated
   :param report_id: Report ID for which you want to wait
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('query_id', 'report_id', 'impersonation_chain')

      

   .. py:method:: poke(context)

      Override when deriving this class.



