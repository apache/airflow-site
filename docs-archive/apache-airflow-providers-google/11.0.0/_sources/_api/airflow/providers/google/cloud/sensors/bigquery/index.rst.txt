:py:mod:`airflow.providers.google.cloud.sensors.bigquery`
=========================================================

.. py:module:: airflow.providers.google.cloud.sensors.bigquery

.. autoapi-nested-parse::

   This module contains Google BigQuery sensors.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.sensors.bigquery.BigQueryTableExistenceSensor
   airflow.providers.google.cloud.sensors.bigquery.BigQueryTablePartitionExistenceSensor




.. py:class:: BigQueryTableExistenceSensor(*, project_id, dataset_id, table_id, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Checks for the existence of a table in Google Bigquery.

   :param project_id: The Google cloud project in which to look for the table.
       The connection supplied to the hook must provide
       access to the specified project.
   :param dataset_id: The name of the dataset in which to look for the table.
       storage bucket.
   :param table_id: The name of the table to check the existence of.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('project_id', 'dataset_id', 'table_id', 'impersonation_chain')

      

   .. py:attribute:: ui_color
      :value: '#f0eee4'

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Airflow runs this method on the worker and defers using the trigger.


   .. py:method:: execute_complete(context, event = None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



.. py:class:: BigQueryTablePartitionExistenceSensor(*, project_id, dataset_id, table_id, partition_id, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Checks for the existence of a partition within a table in Google Bigquery.

   :param project_id: The Google cloud project in which to look for the table.
       The connection supplied to the hook must provide
       access to the specified project.
   :param dataset_id: The name of the dataset in which to look for the table.
       storage bucket.
   :param table_id: The name of the table to check the existence of.
   :param partition_id: The name of the partition to check the existence of.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('project_id', 'dataset_id', 'table_id', 'partition_id', 'impersonation_chain')

      

   .. py:attribute:: ui_color
      :value: '#f0eee4'

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Airflow runs this method on the worker and defers using the triggers if deferrable is True.


   .. py:method:: execute_complete(context, event = None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



