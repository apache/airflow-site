airflow.providers.google.cloud.hooks.translate
==============================================

.. py:module:: airflow.providers.google.cloud.hooks.translate

.. autoapi-nested-parse::

   This module contains a Google Cloud Translate Hook.



Exceptions
----------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.translate.WaitOperationNotDoneYetError


Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.translate.CloudTranslateHook
   airflow.providers.google.cloud.hooks.translate.TranslateHook


Module Contents
---------------

.. py:exception:: WaitOperationNotDoneYetError

   Bases: :py:obj:`Exception`


   Wait operation not done yet error.


.. py:class:: CloudTranslateHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`


   Hook for Google Cloud translate APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.


   .. py:method:: get_conn()

      Retrieve connection to Cloud Translate.

      :return: Google Cloud Translate client object.



   .. py:method:: translate(values, target_language, format_ = None, source_language = None, model = None)

      Translate a string or list of strings.

      See https://cloud.google.com/translate/docs/translating-text

      :param values: String or list of strings to translate.
      :param target_language: The language to translate results into. This
                              is required by the API and defaults to
                              the target language of the current instance.
      :param format_: (Optional) One of ``text`` or ``html``, to specify
                      if the input text is plain text or HTML.
      :param source_language: (Optional) The language of the text to
                              be translated.
      :param model: (Optional) The model used to translate the text, such
                    as ``'base'`` or ``'NMT'``.
      :returns: A list of dictionaries for each queried value. Each
                dictionary typically contains three keys (though not
                all will be present in all cases)

                * ``detectedSourceLanguage``: The detected language (as an
                  ISO 639-1 language code) of the text.

                * ``translatedText``: The translation of the text into the
                  target language.

                * ``input``: The corresponding input value.

                * ``model``: The model used to translate the text.

                If only a single value is passed, then only a single
                dictionary will be returned.
      :raises: :class:`~exceptions.ValueError` if the number of
               values and translations differ.



.. py:class:: TranslateHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`


   Hook for Google Cloud translation (Advanced) using client version V3.

   See related docs https://cloud.google.com/translate/docs/editions#advanced.


   .. py:method:: get_client()

      Retrieve TranslationService client.

      :return: Google Cloud Translation Service client object.



   .. py:method:: wait_for_operation_done(*, operation, timeout = None, initial = 3, multiplier = 2, maximum = 3600)
      :staticmethod:


      Wait for long-running operation to be done.

      Calls operation.done() until success or timeout exhaustion, following the back-off retry strategy.
      See `google.api_core.retry.Retry`.
      It's intended use on `Operation` instances that have empty result
      (:class `google.protobuf.empty_pb2.Empty`) by design.
      Thus calling operation.result() for such operation triggers the exception
      ``GoogleAPICallError("Unexpected state: Long-running operation had neither response nor error set.")``
      even though operation itself is totally fine.



   .. py:method:: wait_for_operation_result(operation, timeout = None)
      :staticmethod:


      Wait for long-lasting operation to complete.



   .. py:method:: extract_object_id(obj)
      :staticmethod:


      Return unique id of the object.



   .. py:method:: translate_text(*, project_id = PROVIDE_PROJECT_ID, contents, target_language_code, source_language_code = None, mime_type = None, location = None, model = None, transliteration_config = None, glossary_config = None, labels = None, timeout = DEFAULT, metadata = (), retry = DEFAULT)

      Translate text content provided.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param contents: Required. The content of the input in string
          format. Max length 1024 items with 30_000 codepoints recommended.
      :param  mime_type: Optional. The format of the source text, If left
          blank, the MIME type defaults to "text/html".
      :param source_language_code: Optional. The ISO-639 language code of the
          input text if known. If the source language
          isn't specified, the API attempts to identify
          the source language automatically and returns
          the source language within the response.
      :param target_language_code: Required. The ISO-639 language code to use
          for translation of the input text
      :param location: Optional. Project or location to make a call. Must refer to
          a caller's project.
          If not specified, 'global' is used.
          Non-global location is required for requests using AutoML
          models or custom glossaries.
          Models and glossaries must be within the same region (have
          the same location-id).
      :param model: Optional. The ``model`` type requested for this translation.
          If not provided, the default Google model (NMT) will be used.
          The format depends on model type:

          - AutoML Translation models:
            ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
          - General (built-in) models:
            ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``
          - Translation LLM models:
            ``projects/{project-number-or-id}/locations/{location-id}/models/general/translation-llm``

          For global (no region) requests, use ``location-id`` ``global``.
          For example, ``projects/{project-number-or-id}/locations/global/models/general/nmt``.
      :param glossary_config: Optional. Glossary to be applied. The glossary must be
          within the same region (have the same location-id) as the
          model.
      :param transliteration_config: Optional. Transliteration to be applied.
      :param labels: Optional. The labels with user-defined
          metadata for the request.
          See https://cloud.google.com/translate/docs/advanced/labels for more information.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.

      :return: Translate text result from the API response.



   .. py:method:: batch_translate_text(*, project_id = PROVIDE_PROJECT_ID, location, source_language_code, target_language_codes, input_configs, output_config, models = None, glossaries = None, labels = None, timeout = DEFAULT, metadata = (), retry = DEFAULT)

      Translate large volumes of text data.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Optional. Project or location to make a call. Must refer to
          a caller's project. Must be non-global.
      :param source_language_code: Required. Source language code.
      :param target_language_codes: Required. Specify up to 10 language codes here.
      :param models: Optional. The models to use for translation. Map's key is
          target language code. Map's value is model name. Value can
          be a built-in general model, or an AutoML Translation model.
          The value format depends on model type:

          - AutoML Translation models:
            ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
          - General (built-in) models:
            ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``

          If the map is empty or a specific model is not requested for
          a language pair, then the default Google model (NMT) is used.
      :param input_configs: Required. Input configurations.
          The total number of files matched should be <= 100. The total content size should be <= 100M
          Unicode codepoints. The files must use UTF-8 encoding.
      :param output_config: Required. Output configuration.
      :param glossaries: Optional. Glossaries to be applied for
          translation. It's keyed by target language code.
      :param labels: Optional. The labels with user-defined metadata for the request.
          See https://cloud.google.com/translate/docs/advanced/labels for more information.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.

      :return: Operation object with the batch text translate results,
          that are returned by batches as they are ready.



   .. py:method:: create_dataset(*, project_id = PROVIDE_PROJECT_ID, location, dataset, timeout = DEFAULT, metadata = (), retry = DEFAULT)

      Create the translation dataset.

      :param dataset: The dataset to create. If a dict is provided, it must correspond to
       the automl_translation.Dataset type.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object for the dataset to be created.



   .. py:method:: get_dataset(dataset_id, project_id, location, retry = DEFAULT, timeout = DEFAULT, metadata = ())

      Retrieve the dataset for the given dataset_id.

      :param dataset_id: ID of translation dataset to be retrieved.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `automl_translation.Dataset` instance.



   .. py:method:: import_dataset_data(dataset_id, location, input_config, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Import data into the translation dataset.

      :param dataset_id: ID of the translation dataset.
      :param input_config: The desired input location and its domain specific semantics, if any.
          If a dict is provided, it must be of the same form as the protobuf message InputConfig.
      :param project_id: ID of the Google Cloud project where dataset is located if None then
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object for the import data.



   .. py:method:: list_datasets(project_id, location, retry = DEFAULT, timeout = DEFAULT, metadata = ())

      List translation datasets in a project.

      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: ``pagers.ListDatasetsPager`` instance, iterable object to retrieve the datasets list.



   .. py:method:: delete_dataset(dataset_id, project_id, location, retry = DEFAULT, timeout = None, metadata = ())

      Delete the translation dataset and all of its contents.

      :param dataset_id: ID of dataset to be deleted.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object with dataset deletion results, when finished.



   .. py:method:: create_model(dataset_id, display_name, project_id, location, retry = DEFAULT, timeout = None, metadata = ())

      Create the native model by training on translation dataset provided.

      :param dataset_id: ID of dataset to be used for model training.
      :param display_name: Display name of the model trained.
          A-Z and a-z, underscores (_), and ASCII digits 0-9.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object with the model creation results, when finished.



   .. py:method:: get_model(model_id, project_id, location, retry = DEFAULT, timeout = DEFAULT, metadata = ())

      Retrieve the dataset for the given model_id.

      :param model_id: ID of translation model to be retrieved.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `automl_translation.Model` instance.



   .. py:method:: list_models(project_id, location, filter_str = None, page_size = None, retry = DEFAULT, timeout = DEFAULT, metadata = ())

      List translation models in a project.

      :param project_id: ID of the Google Cloud project where models are located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param filter_str: An optional expression for filtering the models that will
          be returned. Supported filter: ``dataset_id=${dataset_id}``.
      :param page_size: Optional custom page size value. The server can
          return fewer results than requested.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: ``pagers.ListDatasetsPager`` instance, iterable object to retrieve the datasets list.



   .. py:method:: delete_model(model_id, project_id, location, retry = DEFAULT, timeout = None, metadata = ())

      Delete the translation model and all of its contents.

      :param model_id: ID of model to be deleted.
      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object with dataset deletion results, when finished.



   .. py:method:: translate_document(*, project_id = PROVIDE_PROJECT_ID, source_language_code = None, target_language_code, location = None, document_input_config, document_output_config, customized_attribution = None, is_translate_native_pdf_only = False, enable_shadow_removal_native_pdf = False, enable_rotation_correction = False, model = None, glossary_config = None, labels = None, timeout = DEFAULT, metadata = (), retry = DEFAULT)

      Translate the document provided.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param source_language_code: Optional. The ISO-639 language code of the
          input document text if known. If the source language isn't specified,
          the API attempts to identify the source language automatically and returns
          the source language within the response.
      :param target_language_code: Required. The ISO-639 language code to use
          for translation of the input document text.
      :param location: Optional. Project or location to make a call. Must refer to
          a caller's project.
          If not specified, 'global' is used.
          Non-global location is required for requests using AutoML models or custom glossaries.
          Models and glossaries must be within the same region (have the same location-id).
      :param document_input_config: A document translation request input config.
      :param document_output_config: Optional. A document translation request output config.
          If not provided the translated file will only be returned through a byte-stream
          and its output mime type will be the same as the input file's mime type.
      :param customized_attribution: Optional. This flag is to support user customized
          attribution. If not provided, the default is ``Machine Translated by Google``.
          Customized attribution should follow rules in
          https://cloud.google.com/translate/attribution#attribution_and_logos
      :param is_translate_native_pdf_only: Optional. Param for external
          customers. If true, the page limit of online native PDF
          translation is 300 and only native PDF pages will be
          translated.
      :param enable_shadow_removal_native_pdf: Optional. If true, use the text removal server to remove the
          shadow text on background image for native PDF translation.
          Shadow removal feature can only be enabled when both ``is_translate_native_pdf_only``,
          ``pdf_native_only`` are False.
      :param enable_rotation_correction: Optional. If true, enable auto rotation
          correction in DVS.
      :param model: Optional. The ``model`` type requested for this translation.
          If not provided, the default Google model (NMT) will be used.
          The format depends on model type:

          -  AutoML Translation models:
             ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
          -  General (built-in) models:
             ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``,

          If not provided, the default Google model (NMT) will be used
          for translation.
      :param glossary_config: Optional. Glossary to be applied. The glossary must be
          within the same region (have the same location-id) as the
          model.
      :param labels: Optional. The labels with user-defined
          metadata for the request.
          See https://cloud.google.com/translate/docs/advanced/labels for more information.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.

      :return: Translate document result from the API response.



   .. py:method:: batch_translate_document(*, project_id = PROVIDE_PROJECT_ID, source_language_code, target_language_codes = None, location = None, input_configs, output_config, customized_attribution = None, format_conversions = None, enable_shadow_removal_native_pdf = False, enable_rotation_correction = False, models = None, glossaries = None, timeout = DEFAULT, metadata = (), retry = DEFAULT)

      Translate documents batch by configs provided.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param source_language_code: Optional. The ISO-639 language code of the
          input text if known. If the source language isn't specified, the API attempts to identify
          the source language automatically and returns the source language within the response.
      :param target_language_codes: Required. The ISO-639 language code to use
          for translation of the input document. Specify up to 10 language codes here.
      :param location: Optional. Project or location to make a call. Must refer to
          a caller's project. If not specified, 'global' is used.
          Non-global location is required for requests using AutoML models or custom glossaries.
          Models and glossaries must be within the same region (have the same location-id).
      :param input_configs: Input configurations. The total number of files matched should be <=
          100. The total content size to translate should be <= 100M Unicode codepoints.
          The files must use UTF-8 encoding.
      :param output_config: Output configuration. If 2 input configs match to the same file (that
          is, same input path), no output for duplicate inputs will be generated.
      :param format_conversions: Optional. The file format conversion map that is applied to
          all input files. The map key is the original mime_type.
          The map value is the target mime_type of translated documents.
          Supported file format conversion includes:

          -  ``application/pdf`` to
             ``application/vnd.openxmlformats-officedocument.wordprocessingml.document``

          If nothing specified, output files will be in the same format as the original file.
      :param customized_attribution: Optional. This flag is to support user customized
          attribution. If not provided, the default is ``Machine Translated by Google``.
          Customized attribution should follow rules in
          https://cloud.google.com/translate/attribution#attribution_and_logos
      :param enable_shadow_removal_native_pdf: Optional. If true, use the text removal server to remove the
          shadow text on background image for native PDF translation.
          Shadow removal feature can only be enabled when both ``is_translate_native_pdf_only``,
          ``pdf_native_only`` are False.
      :param enable_rotation_correction: Optional. If true, enable auto rotation
          correction in DVS.
      :param models: Optional. The models to use for translation. Map's key is
          target language code. Map's value is the model name. Value
          can be a built-in general model, or an AutoML Translation model.
          The value format depends on model type:

          -  AutoML Translation models:
             ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
          -  General (built-in) models:
             ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``,

          If the map is empty or a specific model is not requested for
          a language pair, then default google model (NMT) is used.
      :param glossaries: Glossaries to be applied. It's keyed by target language code.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.

      :return: Batch translate document result from the API response.



   .. py:method:: create_glossary(project_id, location, glossary_id, input_config, language_pair = None, language_codes_set = None, retry = DEFAULT, timeout = None, metadata = ())

      Create the glossary resource from the input source file.

      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param glossary_id: User-specified id to built glossary resource name.
      :param input_config: The input configuration of examples to built glossary from.
          Total glossary must not exceed 10M Unicode codepoints.
          The headers should not be included into the input file table, as languages specified with the
          ``language_pair`` or ``language_codes_set`` params.
      :param language_pair: Pair of language codes to be used for glossary creation.
          Used to built unidirectional glossary. If specified, the ``language_codes_set`` should be empty.
      :param language_codes_set: Set of language codes to create the equivalent term sets glossary.
          Meant multiple languages mapping. If specified, the ``language_pair`` should be empty.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` object with the glossary creation results.



   .. py:method:: get_glossary(project_id, location, glossary_id, retry = DEFAULT, timeout = None, metadata = ())

      Fetch glossary item data by the given id.

      The glossary_id is a substring of glossary name, following the format:
      ``projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}``

      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param glossary_id: User-specified id to built glossary resource name.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: Fetched glossary item.



   .. py:method:: update_glossary(glossary, new_display_name = None, new_input_config = None, retry = DEFAULT, timeout = None, metadata = ())

      Update glossary item with values provided.

      Only ``display_name`` and ``input_config`` fields are allowed for update.

      :param glossary: Glossary item to update.
      :param new_display_name: New value of the ``display_name`` to be updated.
      :param new_input_config: New value of the ``input_config`` to be updated.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` with glossary update results.



   .. py:method:: list_glossaries(project_id, location, page_size = None, page_token = None, filter_str = None, retry = DEFAULT, timeout = None, metadata = ())

      Get the list of glossaries available.

      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param page_size: Page size requested, if not set server use appropriate default.
      :param page_token: A token identifying a page of results the server should return.
          The first page is returned if ``page_token`` is empty or missing.
      :param filter_str: Filter specifying constraints of a list operation. Specify the constraint by the
          format of "key=value", where key must be ``src`` or ``tgt``, and the value must be a valid
          language code.
          For multiple restrictions, concatenate them by "AND" (uppercase only), such as:
          ``src=en-US AND tgt=zh-CN``. Notice that the exact match is used here, which means using 'en-US'
          and 'en' can lead to different results, which depends on the language code you used when you
          create the glossary.
          For the unidirectional glossaries, the ``src`` and ``tgt`` add restrictions
          on the source and target language code separately.
          For the equivalent term set glossaries, the ``src`` and/or ``tgt`` add restrictions on the term set.
          For example: ``src=en-US AND tgt=zh-CN`` will only pick the unidirectional glossaries which exactly
          match the source language code as ``en-US`` and the target language code ``zh-CN``, but all
          equivalent term set glossaries which contain ``en-US`` and ``zh-CN`` in their language set will
          be picked.
          If missing, no filtering is performed.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: Glossaries list pager object.



   .. py:method:: delete_glossary(project_id, location, glossary_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete the glossary item by the given id.

      :param project_id: ID of the Google Cloud project where dataset is located. If not provided
          default project_id is used.
      :param location: The location of the project.
      :param glossary_id: Glossary id to be deleted.
      :param retry: A retry object used to retry requests. If `None` is specified, requests will not be
          retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
          `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.

      :return: `Operation` with glossary deletion results.



