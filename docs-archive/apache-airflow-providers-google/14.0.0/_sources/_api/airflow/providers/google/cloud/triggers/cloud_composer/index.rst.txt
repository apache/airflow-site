airflow.providers.google.cloud.triggers.cloud_composer
======================================================

.. py:module:: airflow.providers.google.cloud.triggers.cloud_composer


Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.triggers.cloud_composer.CloudComposerExecutionTrigger
   airflow.providers.google.cloud.triggers.cloud_composer.CloudComposerAirflowCLICommandTrigger
   airflow.providers.google.cloud.triggers.cloud_composer.CloudComposerDAGRunTrigger


Module Contents
---------------

.. py:class:: CloudComposerExecutionTrigger(project_id, region, operation_name, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, pooling_period_seconds = 30)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   The trigger handles the async communication with the Google Cloud Composer.


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: operation_name


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: pooling_period_seconds
      :value: 30



   .. py:attribute:: gcp_hook


   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).



   .. py:method:: run()
      :async:


      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: CloudComposerAirflowCLICommandTrigger(project_id, region, environment_id, execution_cmd_info, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, poll_interval = 10)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   The trigger wait for the Airflow CLI command result.


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: environment_id


   .. py:attribute:: execution_cmd_info


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: poll_interval
      :value: 10



   .. py:attribute:: gcp_hook


   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).



   .. py:method:: run()
      :async:


      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



.. py:class:: CloudComposerDAGRunTrigger(project_id, region, environment_id, composer_dag_id, start_date, end_date, allowed_states, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, poll_interval = 10, composer_airflow_version = 2)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   The trigger wait for the DAG run completion.


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: environment_id


   .. py:attribute:: composer_dag_id


   .. py:attribute:: start_date


   .. py:attribute:: end_date


   .. py:attribute:: allowed_states


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: poll_interval
      :value: 10



   .. py:attribute:: composer_airflow_version
      :value: 2



   .. py:attribute:: gcp_hook


   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).



   .. py:method:: run()
      :async:


      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



