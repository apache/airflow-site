tests.system.google.cloud.dataflow.example_dataflow_go
======================================================

.. py:module:: tests.system.google.cloud.dataflow.example_dataflow_go

.. autoapi-nested-parse::

   Example Airflow DAG for Apache Beam operators

   Requirements:
       This test requires the gcloud and go commands to run.



Attributes
----------

.. autoapisummary::

   tests.system.google.cloud.dataflow.example_dataflow_go.ENV_ID
   tests.system.google.cloud.dataflow.example_dataflow_go.DAG_ID
   tests.system.google.cloud.dataflow.example_dataflow_go.BUCKET_NAME
   tests.system.google.cloud.dataflow.example_dataflow_go.GCS_TMP
   tests.system.google.cloud.dataflow.example_dataflow_go.GCS_STAGING
   tests.system.google.cloud.dataflow.example_dataflow_go.GCS_OUTPUT
   tests.system.google.cloud.dataflow.example_dataflow_go.GO_FILE_NAME
   tests.system.google.cloud.dataflow.example_dataflow_go.GO_FILE_LOCAL_PATH
   tests.system.google.cloud.dataflow.example_dataflow_go.GCS_GO
   tests.system.google.cloud.dataflow.example_dataflow_go.LOCATION
   tests.system.google.cloud.dataflow.example_dataflow_go.default_args
   tests.system.google.cloud.dataflow.example_dataflow_go.create_bucket
   tests.system.google.cloud.dataflow.example_dataflow_go.test_run


Module Contents
---------------

.. py:data:: ENV_ID

.. py:data:: DAG_ID
   :value: 'dataflow_native_go_async'


.. py:data:: BUCKET_NAME
   :value: 'bucket_dataflow_native_go_async_Uninferable'


.. py:data:: GCS_TMP
   :value: 'gs://bucket_dataflow_native_go_async_Uninferable/temp/'


.. py:data:: GCS_STAGING
   :value: 'gs://bucket_dataflow_native_go_async_Uninferable/staging/'


.. py:data:: GCS_OUTPUT
   :value: 'gs://bucket_dataflow_native_go_async_Uninferable/output'


.. py:data:: GO_FILE_NAME
   :value: 'wordcount.go'


.. py:data:: GO_FILE_LOCAL_PATH
   :value: ''


.. py:data:: GCS_GO
   :value: 'gs://bucket_dataflow_native_go_async_Uninferable/wordcount.go'


.. py:data:: LOCATION
   :value: 'europe-west3'


.. py:data:: default_args

.. py:data:: create_bucket

.. py:data:: test_run

