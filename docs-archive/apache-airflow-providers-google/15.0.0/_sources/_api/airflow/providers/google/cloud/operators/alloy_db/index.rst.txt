airflow.providers.google.cloud.operators.alloy_db
=================================================

.. py:module:: airflow.providers.google.cloud.operators.alloy_db

.. autoapi-nested-parse::

   This module contains Google Cloud Alloy DB operators.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.operators.alloy_db.AlloyDBBaseOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBWriteBaseOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBCreateClusterOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBUpdateClusterOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBDeleteClusterOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBCreateInstanceOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBUpdateInstanceOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBDeleteInstanceOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBCreateUserOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBUpdateUserOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBDeleteUserOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBCreateBackupOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBUpdateBackupOperator
   airflow.providers.google.cloud.operators.alloy_db.AlloyDBDeleteBackupOperator


Module Contents
---------------

.. py:class:: AlloyDBBaseOperator(project_id, location, gcp_conn_id = 'google_cloud_default', retry = DEFAULT, timeout = None, metadata = (), impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Base class for all AlloyDB operators.

   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id')



   .. py:attribute:: project_id


   .. py:attribute:: location


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:property:: hook
      :type: airflow.providers.google.cloud.hooks.alloy_db.AlloyDbHook



.. py:class:: AlloyDBWriteBaseOperator(request_id = None, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBBaseOperator`


   Base class for writing AlloyDB operators.

   These operators perform create, update or delete operations. with the objects (not inside of database).

   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: request_id
      :value: None



   .. py:attribute:: validate_request
      :value: False



   .. py:method:: get_operation_result(operation)

      Retrieve operation result as a proto.Message.

      If the `validate_request` parameter is set, then no operation is performed and thus nothing to wait.



.. py:class:: AlloyDBCreateClusterOperator(cluster_id, cluster_configuration, is_secondary = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Create an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBCreateClusterOperator`

   :param cluster_id: Required. ID of the cluster to create.
   :param cluster_configuration: Required. Cluster to create. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Cluster
   :param is_secondary: Required. Specifies if the Cluster to be created is Primary or Secondary.
       Please note, if set True, then specify the `secondary_config` field in the cluster so the created
       secondary cluster was pointing to the primary cluster.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: cluster_configuration


   .. py:attribute:: is_secondary
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBUpdateClusterOperator(cluster_id, cluster_configuration, update_mask = None, allow_missing = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Update an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBUpdateClusterOperator`

   :param cluster_id: Required. ID of the cluster to update.
   :param cluster_configuration: Required. Cluster to update. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Cluster
   :param update_mask: Optional. Field mask is used to specify the fields to be overwritten in the
           Cluster resource by the update.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param allow_missing: Optional. If set to true, update succeeds even if cluster is not found.
       In that case, a new cluster is created and update_mask is ignored.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: cluster_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: allow_missing
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBDeleteClusterOperator(cluster_id, etag = None, force = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Delete an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBDeleteClusterOperator`

   :param cluster_id: Required. ID of the cluster to delete.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param etag: Optional. The current etag of the Cluster. If an etag is provided and does not match the
           current etag of the Cluster, deletion will be blocked and an ABORTED error will be returned.
   :param force: Optional. Whether to cascade delete child instances for given cluster.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: cluster_id


   .. py:attribute:: etag
      :value: None



   .. py:attribute:: force
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBCreateInstanceOperator(cluster_id, instance_id, instance_configuration, is_secondary = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Create an Instance in an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBCreateInstanceOperator`

   :param cluster_id: Required. ID of the cluster for creating an instance in.
   :param instance_id: Required. ID of the instance to create.
   :param instance_configuration: Required. Instance to create. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Instance
   :param is_secondary: Required. Specifies if the Instance to be created is Primary or Secondary.
       Please note, if set True, then specify the `instance_type` field in the instance.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: instance_id


   .. py:attribute:: instance_configuration


   .. py:attribute:: is_secondary
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBUpdateInstanceOperator(cluster_id, instance_id, instance_configuration, update_mask = None, allow_missing = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Update an Alloy DB instance.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBUpdateInstanceOperator`

   :param cluster_id: Required. ID of the cluster.
   :param instance_id: Required. ID of the instance to update.
   :param instance_configuration: Required. Instance to update. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Instance
   :param update_mask: Optional. Field mask is used to specify the fields to be overwritten in the
           Instance resource by the update.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param allow_missing: Optional. If set to true, update succeeds even if instance is not found.
       In that case, a new instance is created and update_mask is ignored.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: instance_id


   .. py:attribute:: instance_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: allow_missing
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBDeleteInstanceOperator(instance_id, cluster_id, etag = None, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Delete an Alloy DB instance.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBDeleteInstanceOperator`

   :param instance_id: Required. ID of the instance to delete.
   :param cluster_id: Required. ID of the cluster.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param etag: Optional. The current etag of the Instance. If an etag is provided and does not match the
           current etag of the Instance, deletion will be blocked and an ABORTED error will be returned.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: instance_id


   .. py:attribute:: cluster_id


   .. py:attribute:: etag
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBCreateUserOperator(user_id, user_configuration, cluster_id, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Create a User in an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBCreateUserOperator`

   :param user_id: Required. ID of the user to create.
   :param user_configuration: Required. The user to create. For more details please see API documentation:
       https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.User
   :param cluster_id: Required. ID of the cluster for creating a user in.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: user_id


   .. py:attribute:: user_configuration


   .. py:attribute:: cluster_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBUpdateUserOperator(cluster_id, user_id, user_configuration, update_mask = None, allow_missing = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Update an Alloy DB user.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBUpdateUserOperator`

   :param user_id: Required. The ID of the user to update.
   :param cluster_id: Required. ID of the cluster.
   :param user_configuration: Required. User to update. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.User
   :param update_mask: Optional. Field mask is used to specify the fields to be overwritten in the
           User resource by the update.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param allow_missing: Optional. If set to true, update succeeds even if instance is not found.
       In that case, a new user is created and update_mask is ignored.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: user_id


   .. py:attribute:: user_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: allow_missing
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBDeleteUserOperator(user_id, cluster_id, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Delete an Alloy DB user.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBDeleteUserOperator`

   :param user_id: Required. ID of the user to delete.
   :param cluster_id: Required. ID of the cluster.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: user_id


   .. py:attribute:: cluster_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBCreateBackupOperator(backup_id, backup_configuration, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Create a Backup in an Alloy DB cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBCreateBackupOperator`

   :param backup_id: Required. ID of the backup to create.
   :param backup_configuration: Required. Backup to create. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Backup
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the backups should be saved.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: backup_id


   .. py:attribute:: backup_configuration


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBUpdateBackupOperator(backup_id, backup_configuration, update_mask = None, allow_missing = False, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Update an Alloy DB backup.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBUpdateBackupOperator`

   :param backup_id: Required. ID of the backup to update.
   :param backup_configuration: Required. Backup to update. For more details please see API documentation:
           https://cloud.google.com/python/docs/reference/alloydb/latest/google.cloud.alloydb_v1.types.Backup
   :param update_mask: Optional. Field mask is used to specify the fields to be overwritten in the
           Backup resource by the update.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param allow_missing: Optional. If set to true, update succeeds even if backup is not found.
       In that case, a new backup is created and update_mask is ignored.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: backup_id


   .. py:attribute:: backup_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: allow_missing
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AlloyDBDeleteBackupOperator(backup_id, *args, **kwargs)

   Bases: :py:obj:`AlloyDBWriteBaseOperator`


   Delete an Alloy DB backup.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AlloyDBDeleteBackupOperator`

   :param backup_id: Required. ID of the backup to delete.
   :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
       so that if you must retry your request, the server ignores the request if it has already been
       completed. The server guarantees that for at least 60 minutes since the first request.
       For example, consider a situation where you make an initial request and the request times out.
       If you make the request again with the same request ID, the server can check if the original operation
       with the same request ID was received, and if so, ignores the second request.
       This prevents clients from accidentally creating duplicate commitments.
       The request ID must be a valid UUID with the exception that zero UUID is not supported
       (00000000-0000-0000-0000-000000000000).
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: backup_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



