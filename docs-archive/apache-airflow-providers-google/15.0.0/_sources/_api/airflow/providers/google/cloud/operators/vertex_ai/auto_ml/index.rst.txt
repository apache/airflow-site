airflow.providers.google.cloud.operators.vertex_ai.auto_ml
==========================================================

.. py:module:: airflow.providers.google.cloud.operators.vertex_ai.auto_ml

.. autoapi-nested-parse::

   This module contains Google Vertex AI operators.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.AutoMLTrainingJobBaseOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.CreateAutoMLForecastingTrainingJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.CreateAutoMLImageTrainingJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.CreateAutoMLTabularTrainingJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.CreateAutoMLVideoTrainingJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.DeleteAutoMLTrainingJobOperator
   airflow.providers.google.cloud.operators.vertex_ai.auto_ml.ListAutoMLTrainingJobOperator


Module Contents
---------------

.. py:class:: AutoMLTrainingJobBaseOperator(*, project_id, region, display_name, labels = None, parent_model = None, is_default_version = None, model_version_aliases = None, model_version_description = None, training_encryption_spec_key_name = None, model_encryption_spec_key_name = None, training_fraction_split = None, test_fraction_split = None, model_display_name = None, model_labels = None, sync = True, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   The base class for operators that launch AutoML jobs on VertexAI.


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: display_name


   .. py:attribute:: labels
      :value: None



   .. py:attribute:: parent_model
      :value: None



   .. py:attribute:: is_default_version
      :value: None



   .. py:attribute:: model_version_aliases
      :value: None



   .. py:attribute:: model_version_description
      :value: None



   .. py:attribute:: training_encryption_spec_key_name
      :value: None



   .. py:attribute:: model_encryption_spec_key_name
      :value: None



   .. py:attribute:: training_fraction_split
      :value: None



   .. py:attribute:: test_fraction_split
      :value: None



   .. py:attribute:: model_display_name
      :value: None



   .. py:attribute:: model_labels
      :value: None



   .. py:attribute:: sync
      :value: True



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: hook
      :type:  airflow.providers.google.cloud.hooks.vertex_ai.auto_ml.AutoMLHook | None
      :value: None



   .. py:method:: on_kill()

      Act as a callback called when the operator is killed; cancel any running job.



.. py:class:: CreateAutoMLForecastingTrainingJobOperator(*, dataset_id, target_column, time_column, time_series_identifier_column, unavailable_at_forecast_columns, available_at_forecast_columns, forecast_horizon, data_granularity_unit, data_granularity_count, display_name, model_display_name = None, optimization_objective = None, column_specs = None, column_transformations = None, validation_fraction_split = None, predefined_split_column_name = None, weight_column = None, time_series_attribute_columns = None, context_window = None, export_evaluated_data_items = False, export_evaluated_data_items_bigquery_destination_uri = None, export_evaluated_data_items_override_destination = False, quantiles = None, validation_options = None, budget_milli_node_hours = 1000, region, impersonation_chain = None, parent_model = None, window_stride_length = None, window_max_count = None, holiday_regions = None, **kwargs)

   Bases: :py:obj:`AutoMLTrainingJobBaseOperator`


   Create AutoML Forecasting Training job.


   .. py:attribute:: template_fields
      :value: ('parent_model', 'dataset_id', 'region', 'impersonation_chain', 'display_name', 'model_display_name')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: dataset_id


   .. py:attribute:: target_column


   .. py:attribute:: time_column


   .. py:attribute:: time_series_identifier_column


   .. py:attribute:: unavailable_at_forecast_columns


   .. py:attribute:: available_at_forecast_columns


   .. py:attribute:: forecast_horizon


   .. py:attribute:: data_granularity_unit


   .. py:attribute:: data_granularity_count


   .. py:attribute:: optimization_objective
      :value: None



   .. py:attribute:: column_specs
      :value: None



   .. py:attribute:: column_transformations
      :value: None



   .. py:attribute:: validation_fraction_split
      :value: None



   .. py:attribute:: predefined_split_column_name
      :value: None



   .. py:attribute:: weight_column
      :value: None



   .. py:attribute:: time_series_attribute_columns
      :value: None



   .. py:attribute:: context_window
      :value: None



   .. py:attribute:: export_evaluated_data_items
      :value: False



   .. py:attribute:: export_evaluated_data_items_bigquery_destination_uri
      :value: None



   .. py:attribute:: export_evaluated_data_items_override_destination
      :value: False



   .. py:attribute:: quantiles
      :value: None



   .. py:attribute:: validation_options
      :value: None



   .. py:attribute:: budget_milli_node_hours
      :value: 1000



   .. py:attribute:: window_stride_length
      :value: None



   .. py:attribute:: window_max_count
      :value: None



   .. py:attribute:: holiday_regions
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CreateAutoMLImageTrainingJobOperator(*, dataset_id, prediction_type = 'classification', multi_label = False, model_type = 'CLOUD', base_model = None, validation_fraction_split = None, training_filter_split = None, validation_filter_split = None, test_filter_split = None, budget_milli_node_hours = None, disable_early_stopping = False, region, impersonation_chain = None, parent_model = None, **kwargs)

   Bases: :py:obj:`AutoMLTrainingJobBaseOperator`


   Create Auto ML Image Training job.


   .. py:attribute:: template_fields
      :value: ('parent_model', 'dataset_id', 'region', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: dataset_id


   .. py:attribute:: prediction_type
      :value: 'classification'



   .. py:attribute:: multi_label
      :value: False



   .. py:attribute:: model_type
      :value: 'CLOUD'



   .. py:attribute:: base_model
      :value: None



   .. py:attribute:: validation_fraction_split
      :value: None



   .. py:attribute:: training_filter_split
      :value: None



   .. py:attribute:: validation_filter_split
      :value: None



   .. py:attribute:: test_filter_split
      :value: None



   .. py:attribute:: budget_milli_node_hours
      :value: None



   .. py:attribute:: disable_early_stopping
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CreateAutoMLTabularTrainingJobOperator(*, dataset_id, target_column, optimization_prediction_type, optimization_objective = None, column_specs = None, column_transformations = None, optimization_objective_recall_value = None, optimization_objective_precision_value = None, validation_fraction_split = None, predefined_split_column_name = None, timestamp_split_column_name = None, weight_column = None, budget_milli_node_hours = 1000, disable_early_stopping = False, export_evaluated_data_items = False, export_evaluated_data_items_bigquery_destination_uri = None, export_evaluated_data_items_override_destination = False, region, impersonation_chain = None, parent_model = None, **kwargs)

   Bases: :py:obj:`AutoMLTrainingJobBaseOperator`


   Create Auto ML Tabular Training job.


   .. py:attribute:: template_fields
      :value: ('parent_model', 'dataset_id', 'region', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: dataset_id


   .. py:attribute:: target_column


   .. py:attribute:: optimization_prediction_type


   .. py:attribute:: optimization_objective
      :value: None



   .. py:attribute:: column_specs
      :value: None



   .. py:attribute:: column_transformations
      :value: None



   .. py:attribute:: optimization_objective_recall_value
      :value: None



   .. py:attribute:: optimization_objective_precision_value
      :value: None



   .. py:attribute:: validation_fraction_split
      :value: None



   .. py:attribute:: predefined_split_column_name
      :value: None



   .. py:attribute:: timestamp_split_column_name
      :value: None



   .. py:attribute:: weight_column
      :value: None



   .. py:attribute:: budget_milli_node_hours
      :value: 1000



   .. py:attribute:: disable_early_stopping
      :value: False



   .. py:attribute:: export_evaluated_data_items
      :value: False



   .. py:attribute:: export_evaluated_data_items_bigquery_destination_uri
      :value: None



   .. py:attribute:: export_evaluated_data_items_override_destination
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CreateAutoMLVideoTrainingJobOperator(*, dataset_id, prediction_type = 'classification', model_type = 'CLOUD', training_filter_split = None, test_filter_split = None, region, impersonation_chain = None, parent_model = None, **kwargs)

   Bases: :py:obj:`AutoMLTrainingJobBaseOperator`


   Create Auto ML Video Training job.


   .. py:attribute:: template_fields
      :value: ('parent_model', 'dataset_id', 'region', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: dataset_id


   .. py:attribute:: prediction_type
      :value: 'classification'



   .. py:attribute:: model_type
      :value: 'CLOUD'



   .. py:attribute:: training_filter_split
      :value: None



   .. py:attribute:: test_filter_split
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DeleteAutoMLTrainingJobOperator(*, training_pipeline_id, region, project_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Delete an AutoML training job.

   Can be used with AutoMLForecastingTrainingJob, AutoMLImageTrainingJob,
   AutoMLTabularTrainingJob, AutoMLTextTrainingJob, or AutoMLVideoTrainingJob.


   .. py:attribute:: template_fields
      :value: ('training_pipeline_id', 'region', 'project_id', 'impersonation_chain')



   .. py:attribute:: training_pipeline_id


   .. py:attribute:: region


   .. py:attribute:: project_id


   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ListAutoMLTrainingJobOperator(*, region, project_id, page_size = None, page_token = None, filter = None, read_mask = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   List an AutoML training job.

   Can be used with AutoMLForecastingTrainingJob, AutoMLImageTrainingJob, AutoMLTabularTrainingJob,
   AutoMLTextTrainingJob, or AutoMLVideoTrainingJob in a Location.


   .. py:attribute:: template_fields
      :value: ('region', 'project_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: region


   .. py:attribute:: project_id


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter
      :value: None



   .. py:attribute:: read_mask
      :value: None



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



