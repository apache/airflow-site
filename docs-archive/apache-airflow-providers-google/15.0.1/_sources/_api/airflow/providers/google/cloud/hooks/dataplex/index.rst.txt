airflow.providers.google.cloud.hooks.dataplex
=============================================

.. py:module:: airflow.providers.google.cloud.hooks.dataplex

.. autoapi-nested-parse::

   This module contains Google Dataplex hook.



Attributes
----------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.dataplex.PATH_DATA_SCAN


Exceptions
----------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.dataplex.AirflowDataQualityScanException
   airflow.providers.google.cloud.hooks.dataplex.AirflowDataQualityScanResultTimeoutException


Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.dataplex.DataplexHook
   airflow.providers.google.cloud.hooks.dataplex.DataplexAsyncHook


Module Contents
---------------

.. py:data:: PATH_DATA_SCAN
   :value: 'projects/{project_id}/locations/{region}/dataScans/{data_scan_id}'


.. py:exception:: AirflowDataQualityScanException

   Bases: :py:obj:`airflow.exceptions.AirflowException`


   Raised when data quality scan rules fail.


.. py:exception:: AirflowDataQualityScanResultTimeoutException

   Bases: :py:obj:`airflow.exceptions.AirflowException`


   Raised when no result found after specified amount of seconds.


.. py:class:: DataplexHook(api_version = 'v1', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`, :py:obj:`airflow.providers.google.common.hooks.operation_helpers.OperationHelper`


   Hook for Google Dataplex.

   :param api_version: The version of the api that will be requested for example 'v3'.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: location
      :value: None



   .. py:method:: get_dataplex_client()

      Return DataplexServiceClient.



   .. py:method:: get_dataplex_data_scan_client()

      Return DataScanServiceClient.



   .. py:method:: get_dataplex_catalog_client()

      Return CatalogServiceClient.



   .. py:method:: wait_for_operation(operation, timeout = None)

      Wait for long-lasting operation to complete.



   .. py:method:: create_entry(location, entry_id, entry_group_id, entry_configuration, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Create an EntryType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
          Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
          names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
          The format is a full resource name of the resource without the prefix double slashes in the API
          service name part of the full resource name. This allows retrieval of entries using their
          associated resource name.

          For example, if the full resource name of a resource is
          ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
          ``library.googleapis.com/shelves/shelf1/books/book2``.

          It is also suggested to follow the same convention for entries corresponding to resources from
          providers or systems other than Google Cloud.
          The maximum size of the field is 4000 characters.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param entry_configuration: Required. Entry configuration body.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: get_entry(location, entry_id, entry_group_id, view = None, aspect_types = None, paths = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Get an Entry resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
          Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
          names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
          The format is a full resource name of the resource without the prefix double slashes in the API
          service name part of the full resource name. This allows retrieval of entries using their
          associated resource name.

          For example, if the full resource name of a resource is
          ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
          ``library.googleapis.com/shelves/shelf1/books/book2``.

          It is also suggested to follow the same convention for entries corresponding to resources from
          providers or systems other than Google Cloud.
          The maximum size of the field is 4000 characters.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param view: Optional. View to control which parts of an entry the service should return.
      :param aspect_types: Optional. Limits the aspects returned to the provided aspect types.
          It only works for CUSTOM view.
      :param paths: Optional. Limits the aspects returned to those associated with the provided paths
          within the Entry. It only works for CUSTOM view.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: delete_entry(location, entry_id, entry_group_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Delete an AspectType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
          Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
          names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
          The format is a full resource name of the resource without the prefix double slashes in the API
          service name part of the full resource name. This allows retrieval of entries using their
          associated resource name.

          For example, if the full resource name of a resource is
          ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
          ``library.googleapis.com/shelves/shelf1/books/book2``.

          It is also suggested to follow the same convention for entries corresponding to resources from
          providers or systems other than Google Cloud.
          The maximum size of the field is 4000 characters.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: list_entries(location, entry_group_id, filter_by = None, page_size = None, page_token = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      List Entries resources from specific location.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param filter_by: Optional. A filter on the entries to return. Filters are case-sensitive.
          You can filter the request by the following fields:

          - entry_type
          - entry_source.display_name

          The comparison operators are =, !=, <, >, <=, >=. The service compares strings according to
          lexical order.
          You can use the logical operators AND, OR, NOT in the filter. You can use Wildcard "*", but for
          entry_type you need to provide the full project id or number.
          Example filter expressions:

          - "entry_source.display_name=AnExampleDisplayName"
          - "entry_type=projects/example-project/locations/global/entryTypes/example-entry_type"
          - "entry_type=projects/example-project/locations/us/entryTypes/a\*
             OR entry_type=projects/another-project/locations/\*"
          - "NOT entry_source.display_name=AnotherExampleDisplayName".

      :param page_size: Optional. Number of items to return per page. If there are remaining results,
          the service returns a next_page_token. If unspecified, the service returns at most 10 Entries.
          The maximum value is 100; values above 100 will be coerced to 100.
      :param page_token: Optional. Page token received from a previous ``ListEntries`` call. Provide
          this to retrieve the subsequent page.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: search_entries(location, query, order_by = None, scope = None, page_size = None, page_token = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Search for Entries matching the given query and scope.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param query: Required. The query against which entries in scope should be matched. The query
          syntax is defined in `Search syntax for Dataplex Catalog
          <https://cloud.google.com/dataplex/docs/search-syntax>`__.
      :param order_by: Optional. Specifies the ordering of results. Supported values are:

          - ``relevance`` (default)
          - ``last_modified_timestamp``
          - ``last_modified_timestamp asc``

      :param scope: Optional. The scope under which the search should be operating. It must either be
          ``organizations/<org_id>`` or ``projects/<project_ref>``. If it is unspecified, it
          defaults to the organization where the project provided in ``name`` is located.
      :param page_size: Optional. Number of items to return per page. If there are remaining results,
          the service returns a next_page_token. If unspecified, the service returns at most 10 Entries.
          The maximum value is 100; values above 100 will be coerced to 100.
      :param page_token: Optional. Page token received from a previous ``ListEntries`` call. Provide
          this to retrieve the subsequent page.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: lookup_entry(location, entry_id, entry_group_id, view = None, aspect_types = None, paths = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Look up a single Entry by name using the permission on the source system.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
          Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
          names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
          The format is a full resource name of the resource without the prefix double slashes in the API
          service name part of the full resource name. This allows retrieval of entries using their
          associated resource name.
          For example, if the full resource name of a resource is
          ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
          ``library.googleapis.com/shelves/shelf1/books/book2``.
          It is also suggested to follow the same convention for entries corresponding to resources from
          providers or systems other than Google Cloud.
          The maximum size of the field is 4000 characters.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param view: Optional. View to control which parts of an entry the service should return.
      :param aspect_types: Optional. Limits the aspects returned to the provided aspect types.
          It only works for CUSTOM view.
      :param paths: Optional. Limits the aspects returned to those associated with the provided paths
          within the Entry. It only works for CUSTOM view.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: update_entry(location, entry_id, entry_group_id, entry_configuration, allow_missing = False, delete_missing_aspects = False, aspect_keys = None, update_mask = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Update an Entry resource.

      :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
          Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
          names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
          The format is a full resource name of the resource without the prefix double slashes in the API
          service name part of the full resource name. This allows retrieval of entries using their
          associated resource name.
          For example, if the full resource name of a resource is
          ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
          ``library.googleapis.com/shelves/shelf1/books/book2``.
          It is also suggested to follow the same convention for entries corresponding to resources from
          providers or systems other than Google Cloud.
          The maximum size of the field is 4000 characters.
      :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
      :param entry_configuration: Required. The updated configuration body of the Entry.
      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
          If this parameter is absent or empty, all modifiable fields are overwritten. If such
          fields are non-required and omitted in the request body, their values are emptied.
      :param allow_missing: Optional. If set to true and entry doesn't exist, the service will create it.
      :param delete_missing_aspects: Optional. If set to true and the aspect_keys specify aspect
          ranges, the service deletes any existing aspects from that range that weren't provided
          in the request.
      :param aspect_keys: Optional. The map keys of the Aspects which the service should modify.
          It supports the following syntax:

          - ``<aspect_type_reference>`` - matches an aspect of the given type and empty path.
          - ``<aspect_type_reference>@path`` - matches an aspect of the given type and specified path.
              For example, to attach an aspect to a field that is specified by the ``schema``
              aspect, the path should have the format ``Schema.<field_name>``.
          - ``<aspect_type_reference>@*`` - matches aspects of the given type for all paths.
          - ``*@path`` - matches aspects of all types on the given path.

          The service will not remove existing aspects matching the syntax unless ``delete_missing_aspects``
          is set to true.
          If this field is left empty, the service treats it as specifying exactly those Aspects present
          in the request.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: create_aspect_type(location, aspect_type_id, aspect_type_configuration, project_id = PROVIDE_PROJECT_ID, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Create an EntryType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param aspect_type_id: Required. AspectType identifier.
      :param aspect_type_configuration: Required. AspectType configuration body.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. If set, performs request validation, but does not actually execute
          the create request.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: get_aspect_type(location, aspect_type_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Get an AspectType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param aspect_type_id: Required. AspectType identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: create_entry_type(location, entry_type_id, entry_type_configuration, project_id = PROVIDE_PROJECT_ID, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Create an EntryType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_type_id: Required. EntryType identifier.
      :param entry_type_configuration: Required. EntryType configuration body.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. If set, performs request validation, but does not actually execute
          the create request.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: get_entry_type(location, entry_type_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Get an EntryType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_type_id: Required. EntryGroup identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: delete_aspect_type(location, aspect_type_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Delete an AspectType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param aspect_type_id: Required. AspectType identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: list_aspect_types(location, filter_by = None, order_by = None, page_size = None, page_token = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      List AspectTypes resources from specific location.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param filter_by: Optional. Filter to apply on the list results.
      :param order_by: Optional. Fields to order the results by.
      :param page_size: Optional. Maximum number of EntryGroups to return on one page.
      :param page_token: Optional. Token to retrieve the next page of results.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: update_aspect_type(location, aspect_type_id, aspect_type_configuration, project_id = PROVIDE_PROJECT_ID, update_mask = None, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Update an AspectType resource.

      :param aspect_type_id: Required. ID of the AspectType to update.
      :param aspect_type_configuration: Required. The updated configuration body of the AspectType.
      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
          If this parameter is absent or empty, all modifiable fields are overwritten. If such
          fields are non-required and omitted in the request body, their values are emptied.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. The service validates the request without performing any mutations.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: delete_entry_type(location, entry_type_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Delete an EntryType resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_type_id: Required. EntryType identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: list_entry_types(location, filter_by = None, order_by = None, page_size = None, page_token = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      List EntryTypes resources from specific location.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param filter_by: Optional. Filter to apply on the list results.
      :param order_by: Optional. Fields to order the results by.
      :param page_size: Optional. Maximum number of EntryGroups to return on one page.
      :param page_token: Optional. Token to retrieve the next page of results.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: update_entry_type(location, entry_type_id, entry_type_configuration, project_id = PROVIDE_PROJECT_ID, update_mask = None, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Update an EntryType resource.

      :param entry_type_id: Required. ID of the EntryType to update.
      :param entry_type_configuration: Required. The updated configuration body of the EntryType.
      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
          If this parameter is absent or empty, all modifiable fields are overwritten. If such
          fields are non-required and omitted in the request body, their values are emptied.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. The service validates the request without performing any mutations.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: create_entry_group(location, entry_group_id, entry_group_configuration, project_id = PROVIDE_PROJECT_ID, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Create an Entry resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_group_id: Required. EntryGroup identifier.
      :param entry_group_configuration: Required. EntryGroup configuration body.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. If set, performs request validation, but does not actually execute
          the create request.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: get_entry_group(location, entry_group_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Get an EntryGroup resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_group_id: Required. EntryGroup identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: delete_entry_group(location, entry_group_id, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      Delete an EntryGroup resource.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param entry_group_id: Required. EntryGroup identifier.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: list_entry_groups(location, filter_by = None, order_by = None, page_size = None, page_token = None, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None, metadata = ())

      List EntryGroups resources from specific location.

      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param filter_by: Optional. Filter to apply on the list results.
      :param order_by: Optional. Fields to order the results by.
      :param page_size: Optional. Maximum number of EntryGroups to return on one page.
      :param page_token: Optional. Token to retrieve the next page of results.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: update_entry_group(location, entry_group_id, entry_group_configuration, project_id = PROVIDE_PROJECT_ID, update_mask = None, validate_only = False, retry = DEFAULT, timeout = None, metadata = ())

      Update an EntryGroup resource.

      :param entry_group_id: Required. ID of the EntryGroup to update.
      :param entry_group_configuration: Required. The updated configuration body of the EntryGroup.
      :param location: Required. The ID of the Google Cloud location that the task belongs to.
      :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
          If this parameter is absent or empty, all modifiable fields are overwritten. If such
          fields are non-required and omitted in the request body, their values are emptied.
      :param project_id: Optional. The ID of the Google Cloud project that the task belongs to.
      :param validate_only: Optional. The service validates the request without performing any mutations.
      :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Optional. Additional metadata that is provided to the method.



   .. py:method:: create_task(project_id, region, lake_id, body, dataplex_task_id, validate_only = None, retry = DEFAULT, timeout = None, metadata = ())

      Create a task resource within a lake.

      :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
      :param region: Required. The ID of the Google Cloud region that the task belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
      :param body: Required. The Request body contains an instance of Task.
      :param dataplex_task_id: Required. Task identifier.
      :param validate_only: Optional. Only validate the request, but do not perform mutations.
          The default is false.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: delete_task(project_id, region, lake_id, dataplex_task_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete the task resource.

      :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
      :param region: Required. The ID of the Google Cloud region that the task belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
      :param dataplex_task_id: Required. The ID of the Google Cloud task to be deleted.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: list_tasks(project_id, region, lake_id, page_size = None, page_token = None, filter = None, order_by = None, retry = DEFAULT, timeout = None, metadata = ())

      List tasks under the given lake.

      :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
      :param region: Required. The ID of the Google Cloud region that the task belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
      :param page_size: Optional. Maximum number of tasks to return. The service may return fewer than this
          value. If unspecified, at most 10 tasks will be returned. The maximum value is 1000;
          values above 1000 will be coerced to 1000.
      :param page_token: Optional. Page token received from a previous ListZones call. Provide this to
          retrieve the subsequent page. When paginating, all other parameters provided to ListZones must
          match the call that provided the page token.
      :param filter: Optional. Filter request.
      :param order_by: Optional. Order by fields for the result.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: get_task(project_id, region, lake_id, dataplex_task_id, retry = DEFAULT, timeout = None, metadata = ())

      Get task resource.

      :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
      :param region: Required. The ID of the Google Cloud region that the task belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
      :param dataplex_task_id: Required. The ID of the Google Cloud task to be retrieved.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: delete_lake(project_id, region, lake_id, retry = DEFAULT, timeout = None, metadata = ())

       Delete the lake resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be deleted.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: create_lake(project_id, region, lake_id, body, validate_only = None, retry = DEFAULT, timeout = None, metadata = ())

      Create a lake resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. Lake identifier.
      :param body: Required. The Request body contains an instance of Lake.
      :param validate_only: Optional. Only validate the request, but do not perform mutations.
          The default is false.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: get_lake(project_id, region, lake_id, retry = DEFAULT, timeout = None, metadata = ())

      Get lake resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be retrieved.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: create_zone(project_id, region, lake_id, zone_id, body, retry = DEFAULT, timeout = None, metadata = ())

      Create a zone resource within a lake.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be retrieved.
      :param body: Required. The Request body contains an instance of Zone.
      :param zone_id: Required. Zone identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: delete_zone(project_id, region, lake_id, zone_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete a zone resource. All assets within a zone must be deleted before the zone can be deleted.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be retrieved.
      :param zone_id: Required. Zone identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: create_asset(project_id, region, lake_id, zone_id, asset_id, body, retry = DEFAULT, timeout = None, metadata = ())

      Create an asset resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be retrieved.
      :param zone_id: Required. Zone identifier.
      :param asset_id: Required. Asset identifier.
      :param body: Required. The Request body contains an instance of Asset.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: delete_asset(project_id, region, lake_id, asset_id, zone_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete an asset resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param lake_id: Required. The ID of the Google Cloud lake to be retrieved.
      :param zone_id: Required. Zone identifier.
      :param asset_id: Required. Asset identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: create_data_scan(project_id, region, body, data_scan_id = None, retry = DEFAULT, timeout = None, metadata = ())

      Create a DataScan resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param body: Required. The Request body contains an instance of DataScan.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: run_data_scan(project_id, region, data_scan_id, retry = DEFAULT, timeout = None, metadata = ())

      Run an on-demand execution of a DataScan.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: get_data_scan_job(project_id, region, data_scan_id = None, job_id = None, retry = DEFAULT, timeout = None, metadata = ())

      Get a DataScan Job resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param job_id: Required. The resource name of the DataScanJob:
          projects/{project_id}/locations/{region}/dataScans/{data_scan_id}/jobs/{data_scan_job_id}
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: wait_for_data_scan_job(data_scan_id, job_id = None, project_id = PROVIDE_PROJECT_ID, region = None, wait_time = 10, result_timeout = None)

      Wait for Dataplex data scan job.

      :param job_id: Required. The job_id to wait for.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param project_id: Optional. Google Cloud project ID.
      :param wait_time: Number of seconds between checks.
      :param result_timeout: Value in seconds for which operator will wait for the Data Quality scan result.
          Throws exception if there is no result found after specified amount of seconds.



   .. py:method:: get_data_scan(project_id, region, data_scan_id, retry = DEFAULT, timeout = None, metadata = ())

      Get a DataScan resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: update_data_scan(project_id, region, data_scan_id, body, update_mask = None, retry = DEFAULT, timeout = None, metadata = ())

      Update a DataScan resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param body: Required. The Request body contains an instance of DataScan.
      :param update_mask: Required. Mask of fields to update.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: delete_data_scan(project_id, region, data_scan_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete a DataScan resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



   .. py:method:: list_data_scan_jobs(project_id, region, data_scan_id, retry = DEFAULT, timeout = None, metadata = ())

      List DataScanJobs under the given DataScan.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. Data Quality scan identifier.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



.. py:class:: DataplexAsyncHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseAsyncHook`


   Asynchronous Hook for Google Cloud Dataplex APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.


   .. py:attribute:: sync_hook_class


   .. py:method:: get_dataplex_data_scan_client()
      :async:


      Return DataScanServiceAsyncClient.



   .. py:method:: get_data_scan_job(project_id, region, data_scan_id = None, job_id = None, retry = DEFAULT, timeout = None, metadata = ())
      :async:


      Get a DataScan Job resource.

      :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
      :param region: Required. The ID of the Google Cloud region that the lake belongs to.
      :param data_scan_id: Required. DataScan identifier.
      :param job_id: Required. The resource name of the DataScanJob:
          projects/{project_id}/locations/{region}/dataScans/{data_scan_id}/jobs/{data_scan_job_id}
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.



