airflow.providers.google.cloud.hooks.managed_kafka
==================================================

.. py:module:: airflow.providers.google.cloud.hooks.managed_kafka

.. autoapi-nested-parse::

   This module contains a Managed Service for Apache Kafka hook.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.hooks.managed_kafka.ManagedKafkaTokenProvider
   airflow.providers.google.cloud.hooks.managed_kafka.ManagedKafkaHook


Module Contents
---------------

.. py:class:: ManagedKafkaTokenProvider(credentials)

   Helper for providing authentication token for establishing connection via confluent to Apache Kafka cluster managed by Google Cloud.


   .. py:method:: confluent_token()


.. py:class:: ManagedKafkaHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)

   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`


   Hook for Managed Service for Apache Kafka APIs.


   .. py:method:: get_managed_kafka_client()

      Return ManagedKafkaClient object.



   .. py:method:: wait_for_operation(operation, timeout = None)

      Wait for long-lasting operation to complete.



   .. py:method:: get_confluent_token()

      Get the authentication token for confluent client.



   .. py:method:: create_cluster(project_id, location, cluster, cluster_id, request_id = None, retry = DEFAULT, timeout = None, metadata = ())

      Create a new Apache Kafka cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster: Required. Configuration of the cluster to create. Its ``name`` field is ignored.
      :param cluster_id: Required. The ID to use for the cluster, which will become the final component of
          the cluster's name. The ID must be 1-63 characters long, and match the regular expression
          ``[a-z]([-a-z0-9]*[a-z0-9])?`` to comply with RFC 1035. This value is structured like: ``my-cluster-id``.
      :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
          to avoid duplication of requests. If a request times out or fails, retrying with the same ID
          allows the server to recognize the previous attempt. For at least 60 minutes, the server ignores
          duplicate requests bearing the same ID. For example, consider a situation where you make an
          initial request and the request times out. If you make the request again with the same request ID
          within 60 minutes of the last request, the server checks if an original operation with the same
          request ID was received. If so, the server ignores the second request. The request ID must be a
          valid UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: list_clusters(project_id, location, page_size = None, page_token = None, filter = None, order_by = None, retry = DEFAULT, timeout = None, metadata = ())

      List the clusters in a given project and location.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param page_size: Optional. The maximum number of clusters to return. The service may return fewer
          than this value. If unspecified, server will pick an appropriate default.
      :param page_token: Optional. A page token, received from a previous ``ListClusters`` call. Provide
          this to retrieve the subsequent page.
          When paginating, all other parameters provided to ``ListClusters`` must match the call that
          provided the page token.
      :param filter: Optional. Filter expression for the result.
      :param order_by: Optional. Order by fields for the result.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: get_cluster(project_id, location, cluster_id, retry = DEFAULT, timeout = None, metadata = ())

      Return the properties of a single cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose configuration to return.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: update_cluster(project_id, location, cluster_id, cluster, update_mask, request_id = None, retry = DEFAULT, timeout = None, metadata = ())

      Update the properties of a single cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose configuration to update.
      :param cluster: Required. The cluster to update.
      :param update_mask: Required. Field mask is used to specify the fields to be overwritten in the
          cluster resource by the update. The fields specified in the update_mask are relative to the
          resource, not the full request. A field will be overwritten if it is in the mask.
      :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
          to avoid duplication of requests. If a request times out or fails, retrying with the same ID
          allows the server to recognize the previous attempt. For at least 60 minutes, the server ignores
          duplicate requests bearing the same ID.
          For example, consider a situation where you make an initial request and the request times out. If
          you make the request again with the same request ID within 60 minutes of the last request, the
          server checks if an original operation with the same request ID was received. If so, the server
          ignores the second request.
          The request ID must be a valid UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: delete_cluster(project_id, location, cluster_id, request_id = None, retry = DEFAULT, timeout = None, metadata = ())

      Delete a single cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster to delete.
      :param request_id: Optional. An optional request ID to identify requests. Specify a unique request ID
          to avoid duplication of requests. If a request times out or fails, retrying with the same ID
          allows the server to recognize the previous attempt. For at least 60 minutes, the server ignores
          duplicate requests bearing the same ID.
          For example, consider a situation where you make an initial request and the request times out. If
          you make the request again with the same request ID within 60 minutes of the last request, the
          server checks if an original operation with the same request ID was received. If so, the server
          ignores the second request.
          The request ID must be a valid UUID. A zero UUID is not supported (00000000-0000-0000-0000-000000000000).
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: create_topic(project_id, location, cluster_id, topic_id, topic, retry = DEFAULT, timeout = None, metadata = ())

      Create a new topic in a given project and location.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster in which to create the topic.
      :param topic_id: Required. The ID to use for the topic, which will become the final component of the
          topic's name.
      :param topic: Required. Configuration of the topic to create.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: list_topics(project_id, location, cluster_id, page_size = None, page_token = None, retry = DEFAULT, timeout = None, metadata = ())

      List the topics in a given cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose topics are to be listed.
      :param page_size: Optional. The maximum number of topics to return. The service may return fewer than
          this value. If unset or zero, all topics for the parent is returned.
      :param page_token: Optional. A page token, received from a previous ``ListTopics`` call. Provide this
          to retrieve the subsequent page. When paginating, all other parameters provided to ``ListTopics``
          must match the call that provided the page token.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: get_topic(project_id, location, cluster_id, topic_id, retry = DEFAULT, timeout = None, metadata = ())

      Return the properties of a single topic.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose topic is to be returned.
      :param topic_id: Required. The ID of the topic whose configuration to return.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: update_topic(project_id, location, cluster_id, topic_id, topic, update_mask, retry = DEFAULT, timeout = None, metadata = ())

      Update the properties of a single topic.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose topic is to be updated.
      :param topic_id: Required. The ID of the topic whose configuration to update.
      :param topic: Required. The topic to update. Its ``name`` field must be populated.
      :param update_mask: Required. Field mask is used to specify the fields to be overwritten in the Topic
          resource by the update. The fields specified in the update_mask are relative to the resource, not
          the full request. A field will be overwritten if it is in the mask.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: delete_topic(project_id, location, cluster_id, topic_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete a single topic.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose topic is to be deleted.
      :param topic_id: Required. The ID of the topic to delete.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: list_consumer_groups(project_id, location, cluster_id, page_size = None, page_token = None, retry = DEFAULT, timeout = None, metadata = ())

      List the consumer groups in a given cluster.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose consumer groups are to be listed.
      :param page_size: Optional. The maximum number of consumer groups to return. The service may return
          fewer than this value. If unset or zero, all consumer groups for the parent is returned.
      :param page_token: Optional. A page token, received from a previous ``ListConsumerGroups`` call.
          Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
          ``ListConsumerGroups`` must match the call that provided the page token.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: get_consumer_group(project_id, location, cluster_id, consumer_group_id, retry = DEFAULT, timeout = None, metadata = ())

      Return the properties of a single consumer group.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose consumer group is to be returned.
      :param consumer_group_id: Required. The ID of the consumer group whose configuration to return.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: update_consumer_group(project_id, location, cluster_id, consumer_group_id, consumer_group, update_mask, retry = DEFAULT, timeout = None, metadata = ())

      Update the properties of a single consumer group.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose topic is to be updated.
      :param consumer_group_id: Required. The ID of the consumer group whose configuration to update.
      :param consumer_group: Required. The consumer_group to update. Its ``name`` field must be populated.
      :param update_mask: Required. Field mask is used to specify the fields to be overwritten in the
          ConsumerGroup resource by the update. The fields specified in the update_mask are relative to the
          resource, not the full request. A field will be overwritten if it is in the mask.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



   .. py:method:: delete_consumer_group(project_id, location, cluster_id, consumer_group_id, retry = DEFAULT, timeout = None, metadata = ())

      Delete a single consumer group.

      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
      :param location: Required. The ID of the Google Cloud region that the service belongs to.
      :param cluster_id: Required. The ID of the cluster whose consumer group is to be deleted.
      :param consumer_group_id: Required. The ID of the consumer group to delete.
      :param retry: Designation of what errors, if any, should be retried.
      :param timeout: The timeout for this request.
      :param metadata: Strings which should be sent along with the request as metadata.



