airflow.providers.google.cloud.triggers.cloud_storage_transfer_service
======================================================================

.. py:module:: airflow.providers.google.cloud.triggers.cloud_storage_transfer_service


Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.triggers.cloud_storage_transfer_service.CloudStorageTransferServiceCreateJobsTrigger
   airflow.providers.google.cloud.triggers.cloud_storage_transfer_service.CloudStorageTransferServiceCheckJobStatusTrigger


Module Contents
---------------

.. py:class:: CloudStorageTransferServiceCreateJobsTrigger(job_names, project_id = PROVIDE_PROJECT_ID, poll_interval = 10, gcp_conn_id = 'google_cloud_default')

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   StorageTransferJobTrigger run on the trigger worker to perform Cloud Storage Transfer job.

   :param job_names: List of transfer jobs names.
   :param project_id: GCP project id.
   :param poll_interval: Interval in seconds between polls.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.


   .. py:attribute:: project_id
      :value: None



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: job_names


   .. py:attribute:: poll_interval
      :value: 10



   .. py:method:: serialize()

      Serialize StorageTransferJobsTrigger arguments and classpath.



   .. py:method:: run()
      :async:


      Get current data storage transfer jobs and yields a TriggerEvent.



   .. py:method:: get_async_hook()


.. py:class:: CloudStorageTransferServiceCheckJobStatusTrigger(job_name, expected_statuses = None, project_id = PROVIDE_PROJECT_ID, poke_interval = 10.0, gcp_conn_id = 'google_cloud_default', impersonation_chain = None)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   CloudStorageTransferServiceCheckJobStatusTrigger run on the trigger worker to check Cloud Storage Transfer job.

   :param job_name: The name of the transfer job
   :param expected_statuses: The expected state of the operation.
       See:
       https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferOperations#Status
   :param project_id: The ID of the project that owns the Transfer Job.
   :param poke_interval: Polling period in seconds to check for the status
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: job_name


   .. py:attribute:: expected_statuses
      :value: None



   .. py:attribute:: project_id
      :value: None



   .. py:attribute:: poke_interval
      :value: 10.0



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: serialize()

      Serialize CloudStorageTransferServiceCheckJobStatusTrigger arguments and classpath.



   .. py:method:: run()
      :async:


      Check the status of the transfer job and yield a TriggerEvent.



