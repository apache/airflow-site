airflow.providers.google.cloud.operators.dataplex
=================================================

.. py:module:: airflow.providers.google.cloud.operators.dataplex

.. autoapi-nested-parse::

   This module contains Google Dataplex operators.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.operators.dataplex.DataplexCreateTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexListTasksOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetTaskOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateLakeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteLakeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateOrUpdateDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexRunDataQualityScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataQualityScanResultOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateOrUpdateDataProfileScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataProfileScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteDataProfileScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexRunDataProfileScanOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexGetDataProfileScanResultOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateZoneOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteZoneOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCreateAssetOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexDeleteAssetOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogBaseOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogCreateEntryGroupOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogGetEntryGroupOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogDeleteEntryGroupOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogListEntryGroupsOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogUpdateEntryGroupOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogCreateEntryTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogGetEntryTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogDeleteEntryTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogListEntryTypesOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogUpdateEntryTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogCreateAspectTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogGetAspectTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogListAspectTypesOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogUpdateAspectTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogDeleteAspectTypeOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogCreateEntryOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogGetEntryOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogListEntriesOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogSearchEntriesOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogLookupEntryOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogUpdateEntryOperator
   airflow.providers.google.cloud.operators.dataplex.DataplexCatalogDeleteEntryOperator


Module Contents
---------------

.. py:class:: DataplexCreateTaskOperator(project_id, region, lake_id, body, dataplex_task_id, validate_only = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates a task resource within a lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param body:  Required. The Request body contains an instance of Task.
   :param dataplex_task_id: Required. Task identifier.
   :param validate_only: Optional. Only validate the request, but do not perform mutations. The default is
       false.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing should the Dataplex task be created asynchronously.
       This is useful for long running creating tasks and
       waiting on them asynchronously using the DataplexTaskSensor


   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'body', 'validate_only', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: operator_extra_links


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: body


   .. py:attribute:: dataplex_task_id


   .. py:attribute:: validate_only
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: asynchronous
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteTaskOperator(project_id, region, lake_id, dataplex_task_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Delete the task resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param dataplex_task_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: dataplex_task_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexListTasksOperator(project_id, region, lake_id, page_size = None, page_token = None, filter = None, order_by = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Lists tasks under the given lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param page_size: Optional. Maximum number of tasks to return. The service may return fewer than this
       value. If unspecified, at most 10 tasks will be returned. The maximum value is 1000; values above 1000
       will be coerced to 1000.
   :param page_token: Optional. Page token received from a previous ListZones call. Provide this to retrieve
       the subsequent page. When paginating, all other parameters provided to ListZones must match the call
       that provided the page token.
   :param filter: Optional. Filter request.
   :param order_by: Optional. Order by fields for the result.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'page_size', 'page_token', 'filter', 'order_by', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexGetTaskOperator(project_id, region, lake_id, dataplex_task_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Get task resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param dataplex_task_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'dataplex_task_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: dataplex_task_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateLakeOperator(project_id, region, lake_id, body, validate_only = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates a lake resource within a lake.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param lake_id: Required. Lake identifier.
   :param body:  Required. The Request body contains an instance of Lake.
   :param validate_only: Optional. Only validate the request, but do not perform mutations. The default is
       false.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing should the Dataplex lake be created asynchronously.
       This is useful for long-running creating lakes.


   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'body', 'validate_only', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: operator_extra_links


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: body


   .. py:attribute:: validate_only
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: asynchronous
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteLakeOperator(project_id, region, lake_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Delete the lake resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param lake_id: Required. Lake identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateOrUpdateDataQualityScanOperator(project_id, region, data_scan_id, body, api_version = 'v1', retry = DEFAULT, timeout = None, update_mask = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param body:  Required. The Request body contains an instance of DataScan.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param update_mask: Mask of fields to update.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data scan id


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'body', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: body


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexGetDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Gets a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data scan


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Deletes a DataScan resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: None


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexRunDataQualityScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, fail_on_dq_failure = False, result_timeout = 60.0 * 10, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), polling_interval_seconds = 10, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Runs an on-demand execution of a DataScan.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing that the Dataplex job should be run asynchronously.
       This is useful for submitting long-running jobs and
       waiting on them asynchronously using the DataplexDataQualityJobStatusSensor
   :param fail_on_dq_failure: If set to true and not all Data Quality scan rules have been passed,
       an exception is thrown. If set to false and not all Data Quality scan rules have been passed,
       execution will finish with success.
   :param result_timeout: Value in seconds for which operator will wait for the Data Quality scan result
       when the flag `asynchronous = False`.
       Throws exception if there is no result found after specified amount of seconds.
   :param polling_interval_seconds: time in seconds between polling for job completion.
       The value is considered only when running in deferrable mode. Must be greater than 0.
   :param deferrable: Run operator in the deferrable mode.

   :return: Dataplex Data Quality scan job id.


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: asynchronous
      :value: False



   .. py:attribute:: fail_on_dq_failure
      :value: False



   .. py:attribute:: result_timeout
      :value: 600.0



   .. py:attribute:: deferrable
      :value: True



   .. py:attribute:: polling_interval_seconds
      :value: 10



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: execute_complete(context, event=None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexGetDataQualityScanResultOperator(project_id, region, data_scan_id, job_id = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, fail_on_dq_failure = False, wait_for_results = True, result_timeout = 60.0 * 10, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), polling_interval_seconds = 10, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Gets a Data Scan Job resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Quality scan identifier.
   :param job_id: Optional. Data Quality scan job identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
       ``retry`` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param fail_on_dq_failure: If set to true and not all Data Quality scan rules have been passed,
       an exception is thrown. If set to false and not all Data Quality scan rules have been passed,
       execution will finish with success.
   :param wait_for_results: Flag indicating whether to wait for the result of a job execution
       or to return the job in its current state.
   :param result_timeout: Value in seconds for which operator will wait for the Data Quality scan result
       when the flag `wait_for_results = True`.
       Throws exception if there is no result found after specified amount of seconds.
   :param polling_interval_seconds: time in seconds between polling for job completion.
       The value is considered only when running in deferrable mode. Must be greater than 0.
   :param deferrable: Run operator in the deferrable mode.

   :return: Dict representing DataScanJob.
       When the job completes with a successful status, information about the Data Quality result
       is available.


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain', 'job_id')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: job_id
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: fail_on_dq_failure
      :value: False



   .. py:attribute:: wait_for_results
      :value: True



   .. py:attribute:: result_timeout
      :value: 600.0



   .. py:attribute:: deferrable
      :value: True



   .. py:attribute:: polling_interval_seconds
      :value: 10



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: execute_complete(context, event=None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexCreateOrUpdateDataProfileScanOperator(project_id, region, data_scan_id, body, api_version = 'v1', retry = DEFAULT, timeout = None, update_mask = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates a DataScan Data Profile resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param body:  Required. The Request body contains an instance of DataScan.
   :param data_scan_id: Required. Data Profile scan identifier.
   :param update_mask: Mask of fields to update.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data profile id


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'body', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: body


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexGetDataProfileScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Gets a DataScan DataProfile resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Profile scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Dataplex data profile


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteDataProfileScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Deletes a DataScan DataProfile resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Profile scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :return: None


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexRunDataProfileScanOperator(project_id, region, data_scan_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, asynchronous = False, result_timeout = 60.0 * 10, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), polling_interval_seconds = 10, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Runs an on-demand execution of a DataScan Data Profile Scan.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Profile scan identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
           will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
           Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag informing that the Dataplex job should be run asynchronously.
       This is useful for submitting long-running jobs and
       waiting on them asynchronously using the DataplexDataProfileJobStatusSensor
   :param result_timeout: Value in seconds for which operator will wait for the Data Profile scan result
       when the flag `asynchronous = False`.
       Throws exception if there is no result found after specified amount of seconds.
   :param polling_interval_seconds: time in seconds between polling for job completion.
       The value is considered only when running in deferrable mode. Must be greater than 0.
   :param deferrable: Run operator in the deferrable mode.

   :return: Dataplex Data Profile scan job id.


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: asynchronous
      :value: False



   .. py:attribute:: result_timeout
      :value: 600.0



   .. py:attribute:: deferrable
      :value: True



   .. py:attribute:: polling_interval_seconds
      :value: 10



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: execute_complete(context, event=None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexGetDataProfileScanResultOperator(project_id, region, data_scan_id, job_id = None, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, wait_for_results = True, result_timeout = 60.0 * 10, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Gets a DataScan Data Profile Job resource.

   :param project_id: Required. The ID of the Google Cloud project that the lake belongs to.
   :param region: Required. The ID of the Google Cloud region that the lake belongs to.
   :param data_scan_id: Required. Data Profile scan identifier.
   :param job_id: Optional. Data Profile scan job identifier.
   :param api_version: The version of the api that will be requested for example 'v1'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete. Note that if
       ``retry`` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param wait_for_results: Flag indicating whether to wait for the result of a job execution
       or to return the job in its current state.
   :param result_timeout: Value in seconds for which operator will wait for the Data Profile scan result
       when the flag `wait_for_results = True`.
       Throws exception if there is no result found after specified amount of seconds.

   :return: Dict representing DataScanJob.
       When the job completes with a successful status, information about the Data Profile result
       is available.


   .. py:attribute:: template_fields
      :value: ('project_id', 'data_scan_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: data_scan_id


   .. py:attribute:: job_id
      :value: None



   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: wait_for_results
      :value: True



   .. py:attribute:: result_timeout
      :value: 600.0



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: execute_complete(context, event=None)

      Act as a callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



.. py:class:: DataplexCreateZoneOperator(project_id, region, lake_id, body, zone_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates a Zone resource within a Lake.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param body:  Required. The Request body contains an instance of Zone.
   :param zone_id: Required. Task identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: Zone


   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'body', 'lake_id', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: body


   .. py:attribute:: zone_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteZoneOperator(project_id, region, lake_id, zone_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Deletes a Zone resource. All assets within a zone must be deleted before the zone can be deleted.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the task belongs to.
   :param zone_id: Required. Zone identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :return: None


   .. py:attribute:: template_fields
      :value: ('project_id', 'lake_id', 'zone_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: zone_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCreateAssetOperator(project_id, region, lake_id, body, zone_id, asset_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Creates an Asset resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the lake belongs to.
   :param zone_id: Required. Zone identifier.
   :param asset_id: Required. Asset identifier.
   :param body:  Required. The Request body contains an instance of Asset.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :return: Asset


   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'asset_id', 'body', 'impersonation_chain')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: body


   .. py:attribute:: zone_id


   .. py:attribute:: asset_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexDeleteAssetOperator(project_id, region, lake_id, zone_id, asset_id, api_version = 'v1', retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Deletes an asset resource.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param lake_id: Required. The ID of the Google Cloud lake that the asset belongs to.
   :param zone_id: Required. Zone identifier.
   :param asset_id: Required. Asset identifier.
   :param api_version: The version of the api that will be requested for example 'v3'.
   :param retry: A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   :return: None


   .. py:attribute:: template_fields
      :value: ('project_id', 'zone_id', 'asset_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: region


   .. py:attribute:: lake_id


   .. py:attribute:: zone_id


   .. py:attribute:: asset_id


   .. py:attribute:: api_version
      :value: 'v1'



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogBaseOperator(project_id, location, gcp_conn_id = 'google_cloud_default', retry = DEFAULT, timeout = None, metadata = (), impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Base class for all Dataplex Catalog operators.

   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id', 'impersonation_chain')



   .. py:attribute:: project_id


   .. py:attribute:: location


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: retry


   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: metadata
      :value: ()



   .. py:property:: hook
      :type: airflow.providers.google.cloud.hooks.dataplex.DataplexHook



.. py:class:: DataplexCatalogCreateEntryGroupOperator(entry_group_id, entry_group_configuration, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Create an EntryGroup resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogCreateEntryGroupOperator`

   :param entry_group_id: Required. EntryGroup identifier.
   :param entry_group_configuration: Required. EntryGroup configuration.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups#EntryGroup
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_group_id


   .. py:attribute:: entry_group_configuration


   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogGetEntryGroupOperator(entry_group_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Get an EntryGroup resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogGetEntryGroupOperator`

   :param entry_group_id: Required. EntryGroup identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_group_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogDeleteEntryGroupOperator(entry_group_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Delete an EntryGroup resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogDeleteEntryGroupOperator`

   :param entry_group_id: Required. EntryGroup identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: entry_group_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogListEntryGroupsOperator(page_size = None, page_token = None, filter_by = None, order_by = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   List EntryGroup resources.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogListEntryGroupsOperator`

   :param filter_by: Optional. Filter to apply on the list results.
   :param order_by: Optional. Fields to order the results by.
   :param page_size: Optional. Maximum number of EntryGroups to return on the page.
   :param page_token: Optional. Token to retrieve the next page of results.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter_by
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogUpdateEntryGroupOperator(entry_group_id, entry_group_configuration, update_mask = None, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Update an EntryGroup resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogUpdateEntryGroupOperator`

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param location: Required. The ID of the Google Cloud region that the task belongs to.
   :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
       If this parameter is absent or empty, all modifiable fields are overwritten. If such
       fields are non-required and omitted in the request body, their values are emptied.
   :param entry_group_id: Required. ID of the EntryGroup to update.
   :param entry_group_configuration: Required. The updated configuration body of the EntryGroup.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups#EntryGroup
   :param validate_only: Optional. The service validates the request without performing any mutations.
   :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param gcp_conn_id: Optional. The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_group_id


   .. py:attribute:: entry_group_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogCreateEntryTypeOperator(entry_type_id, entry_type_configuration, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Create an EntryType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogCreateEntryTypeOperator`

   :param entry_type_id: Required. EntryType identifier.
   :param entry_type_configuration: Required. EntryType configuration.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups#EntryGroup
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_type_id


   .. py:attribute:: entry_type_configuration


   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogGetEntryTypeOperator(entry_type_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Get an EntryType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogGetEntryTypeOperator`

   :param entry_type_id: Required. EntryType identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_type_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogDeleteEntryTypeOperator(entry_type_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Delete an EntryType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogDeleteEntryTypeOperator`

   :param entry_type_id: Required. EntryType identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: entry_type_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogListEntryTypesOperator(page_size = None, page_token = None, filter_by = None, order_by = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   List EntryType resources.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogListEntryTypesOperator`

   :param filter_by: Optional. Filter to apply on the list results.
   :param order_by: Optional. Fields to order the results by.
   :param page_size: Optional. Maximum number of EntryTypes to return on the page.
   :param page_token: Optional. Token to retrieve the next page of results.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter_by
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogUpdateEntryTypeOperator(entry_type_id, entry_type_configuration, update_mask = None, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Update an EntryType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogUpdateEntryTypeOperator`

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param location: Required. The ID of the Google Cloud region that the task belongs to.
   :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
       If this parameter is absent or empty, all modifiable fields are overwritten. If such
       fields are non-required and omitted in the request body, their values are emptied.
   :param entry_type_id: Required. ID of the EntryType to update.
   :param entry_type_configuration: Required. The updated configuration body of the EntryType.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups#EntryGroup
   :param validate_only: Optional. The service validates the request without performing any mutations.
   :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param gcp_conn_id: Optional. The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_type_id


   .. py:attribute:: entry_type_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogCreateAspectTypeOperator(aspect_type_id, aspect_type_configuration, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Create an AspectType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogCreateAspectTypeOperator`

   :param aspect_type_id: Required. AspectType identifier.
   :param aspect_type_configuration: Required. AspectType configuration.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.aspectTypes#AspectType
   :param validate_request: Optional. If set, performs request validation, but does not actually
       execute the request.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: aspect_type_id


   .. py:attribute:: aspect_type_configuration


   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogGetAspectTypeOperator(aspect_type_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Get an AspectType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogGetAspectTypeOperator`

   :param aspect_type_id: Required. AspectType identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: aspect_type_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogListAspectTypesOperator(page_size = None, page_token = None, filter_by = None, order_by = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   List AspectType resources.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogListAspectTypesOperator`

   :param filter_by: Optional. Filter to apply on the list results.
   :param order_by: Optional. Fields to order the results by.
   :param page_size: Optional. Maximum number of AspectTypes to return on the page.
   :param page_token: Optional. Token to retrieve the next page of results.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter_by
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogUpdateAspectTypeOperator(aspect_type_id, aspect_type_configuration, update_mask = None, validate_request = False, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Update an AspectType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogUpdateAspectTypeOperator`

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param location: Required. The ID of the Google Cloud region that the task belongs to.
   :param update_mask: Optional. Names of fields whose values to overwrite on an entry group.
       If this parameter is absent or empty, all modifiable fields are overwritten. If such
       fields are non-required and omitted in the request body, their values are emptied.
   :param aspect_type_id: Required. ID of the AspectType to update.
   :param aspect_type_configuration: Required. The updated configuration body of the AspectType.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.aspectTypes#AspectType
   :param validate_only: Optional. The service validates the request without performing any mutations.
   :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param gcp_conn_id: Optional. The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: aspect_type_id


   .. py:attribute:: aspect_type_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: validate_request
      :value: False



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogDeleteAspectTypeOperator(aspect_type_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Delete an AspectType resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogDeleteAspectTypeOperator`

   :param aspect_type_id: Required. AspectType identifier.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: aspect_type_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogCreateEntryOperator(entry_id, entry_group_id, entry_configuration, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Create an Entry resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogCreateEntryOperator`

   :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
       Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
       names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
       The format is a full resource name of the resource without the prefix double slashes in the API
       service name part of the full resource name. This allows retrieval of entries using their associated
       resource name.
       For example, if the full resource name of a resource is
       ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
       ``library.googleapis.com/shelves/shelf1/books/book2``.
       It is also suggested to follow the same convention for entries corresponding to resources from
       providers or systems other than Google Cloud.
       The maximum size of the field is 4000 characters.
   :param entry_group_id: Required. EntryGroup resource name to which created Entry will belong to.
   :param entry_configuration: Required. Entry configuration.
       For more details please see API documentation:
       https://cloud.google.com/dataplex/docs/reference/rest/v1/projects.locations.entryGroups.entries#Entry
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_id


   .. py:attribute:: entry_group_id


   .. py:attribute:: entry_configuration


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogGetEntryOperator(entry_id, entry_group_id, view = None, aspect_types = None, paths = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Get an Entry resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogGetEntryOperator`

   :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
       Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
       names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
       The format is a full resource name of the resource without the prefix double slashes in the API
       service name part of the full resource name. This allows retrieval of entries using their associated
       resource name.
       For example, if the full resource name of a resource is
       ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
       ``library.googleapis.com/shelves/shelf1/books/book2``.
       It is also suggested to follow the same convention for entries corresponding to resources from
       providers or systems other than Google Cloud.
       The maximum size of the field is 4000 characters.
   :param entry_group_id: Required. EntryGroup resource name to which created Entry will belong to.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param view: Optional. View to control which parts of an Entry the service should return.
   :param aspect_types: Optional. Limits the aspects returned to the provided aspect types. It only works
       for CUSTOM view.
   :param paths: Optional. Limits the aspects returned to those associated with the provided paths within
       the Entry. It only works for CUSTOM view.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_id


   .. py:attribute:: entry_group_id


   .. py:attribute:: view
      :value: None



   .. py:attribute:: aspect_types
      :value: None



   .. py:attribute:: paths
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogListEntriesOperator(entry_group_id, page_size = None, page_token = None, filter_by = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   List Entry resources.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogListEntriesOperator`

   :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
   :param filter_by: Optional. A filter on the entries to return. Filters are case-sensitive.
       You can filter the request by the following fields:

       -  entry_type
       -  entry_source.display_name

       The comparison operators are =, !=, <, >, <=, >=. The service compares strings according to
       lexical order.
       You can use the logical operators AND, OR, NOT in the filter. You can use Wildcard "*", but for
       entry_type you need to provide the full project id or number.
       Example filter expressions:

       - "entry_source.display_name=AnExampleDisplayName"
       - "entry_type=projects/example-project/locations/global/entryTypes/example-entry_type"
       - "entry_type=projects/example-project/locations/us/entryTypes/a\*
          OR entry_type=projects/another-project/locations/\*"
       - "NOT entry_source.display_name=AnotherExampleDisplayName".

   :param page_size: Optional. Number of items to return per page. If there are remaining results,
       the service returns a next_page_token. If unspecified, the service returns at most 10 Entries.
       The maximum value is 100; values above 100 will be coerced to 100.
   :param page_token: Optional. Page token received from a previous ``ListEntries`` call. Provide
       this to retrieve the subsequent page.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('project_id', 'location', 'gcp_conn_id', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_group_id


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: filter_by
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogSearchEntriesOperator(query, order_by = None, scope = None, page_size = None, page_token = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Search for Entries matching the given query and scope.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogSearchEntriesOperator`

   :param query: Required. The query against which entries in scope should be matched. The query
       syntax is defined in `Search syntax for Dataplex Catalog
       <https://cloud.google.com/dataplex/docs/search-syntax>`__.
   :param order_by: Optional. Specifies the ordering of results. Supported values are:

       - ``relevance`` (default)
       - ``last_modified_timestamp``
       - ``last_modified_timestamp asc``

   :param scope: Optional. The scope under which the search should be operating. It must either be
       ``organizations/<org_id>`` or ``projects/<project_ref>``. If it is unspecified, it
       defaults to the organization where the project provided in ``name`` is located.
   :param page_size: Optional. Number of items to return per page. If there are remaining results,
       the service returns a next_page_token. If unspecified, the service returns at most 10 Entries.
       The maximum value is 100; values above 100 will be coerced to 100.
   :param page_token: Optional. Page token received from a previous ``ListEntries`` call. Provide
       this to retrieve the subsequent page.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: query


   .. py:attribute:: page_size
      :value: None



   .. py:attribute:: page_token
      :value: None



   .. py:attribute:: order_by
      :value: None



   .. py:attribute:: scope
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogLookupEntryOperator(entry_id, entry_group_id, view = None, aspect_types = None, paths = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Look up a single Entry by name using the permission on the source system.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogLookupEntryOperator`

   :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
       Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
       names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
       The format is a full resource name of the resource without the prefix double slashes in the API
       service name part of the full resource name. This allows retrieval of entries using their associated
       resource name.
       For example, if the full resource name of a resource is
       ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
       ``library.googleapis.com/shelves/shelf1/books/book2``.
       It is also suggested to follow the same convention for entries corresponding to resources from
       providers or systems other than Google Cloud.
       The maximum size of the field is 4000 characters.
   :param entry_group_id: Required. EntryGroup resource name to which created Entry will belong to.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param view: Optional. View to control which parts of an Entry the service should return.
   :param aspect_types: Optional. Limits the aspects returned to the provided aspect types. It only works
       for CUSTOM view.
   :param paths: Optional. Limits the aspects returned to those associated with the provided paths within
       the Entry. It only works for CUSTOM view.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_id


   .. py:attribute:: entry_group_id


   .. py:attribute:: view
      :value: None



   .. py:attribute:: aspect_types
      :value: None



   .. py:attribute:: paths
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogUpdateEntryOperator(entry_id, entry_group_id, entry_configuration, allow_missing = False, delete_missing_aspects = False, aspect_keys = None, update_mask = None, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Update an Entry resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogUpdateEntryOperator`

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param location: Required. The ID of the Google Cloud region that the task belongs to.
   :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
       Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
       names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
       The format is a full resource name of the resource without the prefix double slashes in the API
       service name part of the full resource name. This allows retrieval of entries using their
       associated resource name.
       For example, if the full resource name of a resource is
       ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
       ``library.googleapis.com/shelves/shelf1/books/book2``.
       It is also suggested to follow the same convention for entries corresponding to resources from
       providers or systems other than Google Cloud.
       The maximum size of the field is 4000 characters.
   :param entry_group_id: Required. EntryGroup resource name to which created Entry belongs to.
   :param entry_configuration: Required. The updated configuration body of the Entry.
   :param allow_missing: Optional. If set to true and entry doesn't exist, the service will create it.
   :param delete_missing_aspects: Optional. If set to true and the aspect_keys specify aspect
       ranges, the service deletes any existing aspects from that range that weren't provided
       in the request.
   :param aspect_keys: Optional. The map keys of the Aspects which the service should modify.
       It supports the following syntax:

       - ``<aspect_type_reference>`` - matches an aspect of the given type and empty path.
       - ``<aspect_type_reference>@path`` - matches an aspect of the given type and specified path.
           For example, to attach an aspect to a field that is specified by the ``schema``
           aspect, the path should have the format ``Schema.<field_name>``.
       - ``<aspect_type_reference>@*`` - matches aspects of the given type for all paths.
       - ``*@path`` - matches aspects of all types on the given path.

       The service will not remove existing aspects matching the syntax unless ``delete_missing_aspects``
       is set to true.
       If this field is left empty, the service treats it as specifying exactly those Aspects present
       in the request.
   :param retry: Optional. A retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param gcp_conn_id: Optional. The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: entry_id


   .. py:attribute:: entry_group_id


   .. py:attribute:: entry_configuration


   .. py:attribute:: update_mask
      :value: None



   .. py:attribute:: allow_missing
      :value: False



   .. py:attribute:: delete_missing_aspects
      :value: False



   .. py:attribute:: aspect_keys
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataplexCatalogDeleteEntryOperator(entry_id, entry_group_id, *args, **kwargs)

   Bases: :py:obj:`DataplexCatalogBaseOperator`


   Delete an Entry resource.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DataplexCatalogDeleteEntryOperator`

   :param entry_id: Required. Entry identifier. It has to be unique within an Entry Group.
       Entries corresponding to Google Cloud resources use an Entry ID format based on `full resource
       names <https://cloud.google.com/apis/design/resource_names#full_resource_name>`__.
       The format is a full resource name of the resource without the prefix double slashes in the API
       service name part of the full resource name. This allows retrieval of entries using their
       associated resource name.
       For example, if the full resource name of a resource is
       ``//library.googleapis.com/shelves/shelf1/books/book2``, then the suggested entry_id is
       ``library.googleapis.com/shelves/shelf1/books/book2``.
       It is also suggested to follow the same convention for entries corresponding to resources from
       providers or systems other than Google Cloud.
       The maximum size of the field is 4000 characters.
   :param entry_group_id: Required. EntryGroup resource name to which created Entry will belong to.
   :param project_id: Required. The ID of the Google Cloud project where the service is used.
   :param location: Required. The ID of the Google Cloud region where the service is used.
   :param gcp_conn_id: Optional. The connection ID to use to connect to Google Cloud.
   :param retry: Optional. A retry object used to retry requests. If `None` is specified, requests will not
       be retried.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional. Additional metadata that is provided to the method.
   :param impersonation_chain: Optional. Service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: entry_id


   .. py:attribute:: entry_group_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



