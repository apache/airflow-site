airflow.providers.google.cloud.operators.vertex_ai.ray
======================================================

.. py:module:: airflow.providers.google.cloud.operators.vertex_ai.ray

.. autoapi-nested-parse::

   This module contains Google Vertex AI Ray operators.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.operators.vertex_ai.ray.RayBaseOperator
   airflow.providers.google.cloud.operators.vertex_ai.ray.CreateRayClusterOperator
   airflow.providers.google.cloud.operators.vertex_ai.ray.ListRayClustersOperator
   airflow.providers.google.cloud.operators.vertex_ai.ray.GetRayClusterOperator
   airflow.providers.google.cloud.operators.vertex_ai.ray.UpdateRayClusterOperator
   airflow.providers.google.cloud.operators.vertex_ai.ray.DeleteRayClusterOperator


Module Contents
---------------

.. py:class:: RayBaseOperator(project_id, location, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`


   Base class for Ray operators.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('location', 'gcp_conn_id', 'project_id', 'impersonation_chain')



   .. py:attribute:: location


   .. py:attribute:: project_id


   .. py:attribute:: gcp_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:property:: hook
      :type: airflow.providers.google.cloud.hooks.vertex_ai.ray.RayHook



.. py:class:: CreateRayClusterOperator(head_node_type = resources.Resources(), python_version = '3.10', ray_version = '2.33', network = None, service_account = None, cluster_name = None, worker_node_types = None, custom_images = None, enable_metrics_collection = True, enable_logging = True, psc_interface_config = None, reserved_ip_ranges = None, labels = None, *args, **kwargs)

   Bases: :py:obj:`RayBaseOperator`


   Create a Ray cluster on the Vertex AI.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param head_node_type: The head node resource. Resources.node_count must be 1. If not set, default
       value of Resources() class will be used.
   :param python_version: Python version for the ray cluster.
   :param ray_version: Ray version for the ray cluster. Default is 2.33.0.
   :param network: Virtual private cloud (VPC) network. For Ray Client, VPC peering is required to
       connect to the Ray Cluster managed in the Vertex API service. For Ray Job API, VPC network is not
       required because Ray Cluster connection can be accessed through dashboard address.
   :param service_account: Service account to be used for running Ray programs on the cluster.
   :param cluster_name: This value may be up to 63 characters, and valid characters are `[a-z0-9_-]`.
       The first character cannot be a number or hyphen.
   :param worker_node_types: The list of Resources of the worker nodes. The same Resources object should
       not appear multiple times in the list.
   :param custom_images: The NodeImages which specifies head node and worker nodes images. All the
       workers will share the same image. If each Resource has a specific custom image, use
       `Resources.custom_image` for head/worker_node_type(s). Note that configuring
       `Resources.custom_image` will override `custom_images` here. Allowlist only.
   :param enable_metrics_collection: Enable Ray metrics collection for visualization.
   :param enable_logging: Enable exporting Ray logs to Cloud Logging.
   :param psc_interface_config: PSC-I config.
   :param reserved_ip_ranges: A list of names for the reserved IP ranges under the VPC network that can
       be used for this cluster. If set, we will deploy the cluster within the provided IP ranges.
       Otherwise, the cluster is deployed to any IP ranges under the provided VPC network.
       Example: ["vertex-ai-ip-range"].
   :param labels: The labels with user-defined metadata to organize Ray cluster.
       Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain
       lowercase letters, numeric characters, underscores and dashes. International characters are allowed.
       See https://goo.gl/xmQnxf for more information and examples of labels.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: head_node_type


   .. py:attribute:: python_version
      :value: '3.10'



   .. py:attribute:: ray_version
      :value: '2.33'



   .. py:attribute:: network
      :value: None



   .. py:attribute:: service_account
      :value: None



   .. py:attribute:: cluster_name
      :value: None



   .. py:attribute:: worker_node_types
      :value: None



   .. py:attribute:: custom_images
      :value: None



   .. py:attribute:: enable_metrics_collection
      :value: True



   .. py:attribute:: enable_logging
      :value: True



   .. py:attribute:: psc_interface_config
      :value: None



   .. py:attribute:: reserved_ip_ranges
      :value: None



   .. py:attribute:: labels
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ListRayClustersOperator(project_id, location, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`RayBaseOperator`


   List Ray clusters under the currently authenticated project.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: operator_extra_links


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GetRayClusterOperator(cluster_id, *args, **kwargs)

   Bases: :py:obj:`RayBaseOperator`


   Get Ray cluster.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param cluster_id: Cluster resource ID.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: UpdateRayClusterOperator(cluster_id, worker_node_types, *args, **kwargs)

   Bases: :py:obj:`RayBaseOperator`


   Update Ray cluster (currently support resizing node counts for worker nodes).

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param cluster_id: Cluster resource ID.
   :param worker_node_types: The list of Resources of the resized worker nodes. The same Resources
       object should not appear multiple times in the list.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: operator_extra_links


   .. py:attribute:: cluster_id


   .. py:attribute:: worker_node_types


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DeleteRayClusterOperator(cluster_id, *args, **kwargs)

   Bases: :py:obj:`RayBaseOperator`


   Delete Ray cluster.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param location: Required. The ID of the Google Cloud region that the service belongs to.
   :param cluster_id: Cluster resource ID.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]


   .. py:attribute:: cluster_id


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



