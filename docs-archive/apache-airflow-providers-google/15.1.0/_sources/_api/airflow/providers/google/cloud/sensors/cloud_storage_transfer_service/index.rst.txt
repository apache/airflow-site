airflow.providers.google.cloud.sensors.cloud_storage_transfer_service
=====================================================================

.. py:module:: airflow.providers.google.cloud.sensors.cloud_storage_transfer_service

.. autoapi-nested-parse::

   This module contains a Google Cloud Transfer sensor.



Classes
-------

.. autoapisummary::

   airflow.providers.google.cloud.sensors.cloud_storage_transfer_service.CloudDataTransferServiceJobStatusSensor


Module Contents
---------------

.. py:class:: CloudDataTransferServiceJobStatusSensor(*, job_name, expected_statuses, project_id = PROVIDE_PROJECT_ID, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`


   Waits for at least one operation belonging to the job to have the expected status.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDataTransferServiceJobStatusSensor`

   :param job_name: The name of the transfer job
   :param expected_statuses: The expected state of the operation.
       See:
       https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferOperations#Status
   :param project_id: (Optional) the ID of the project that owns the Transfer
       Job. If set to None or missing, the default project_id from the Google Cloud
       connection is used.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param deferrable: Run sensor in deferrable mode


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('job_name', 'impersonation_chain')



   .. py:attribute:: operator_extra_links


   .. py:attribute:: job_name


   .. py:attribute:: expected_statuses


   .. py:attribute:: project_id
      :value: None



   .. py:attribute:: gcp_cloud_conn_id
      :value: 'google_cloud_default'



   .. py:attribute:: impersonation_chain
      :value: None



   .. py:attribute:: deferrable
      :value: True



   .. py:method:: poke(context)

      Override when deriving this class.



   .. py:method:: execute(context)

      Run on the worker and defer using the triggers if deferrable is set to True.



   .. py:method:: execute_complete(context, event)

      Act as a callback for when the trigger fires.

      This returns immediately. It relies on trigger to throw an exception,
      otherwise it assumes execution was successful.



