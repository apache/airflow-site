:mod:`airflow.providers.google.cloud.utils.credentials_provider`
================================================================

.. py:module:: airflow.providers.google.cloud.utils.credentials_provider

.. autoapi-nested-parse::

   This module contains a mechanism for providing temporary
   Google Cloud authentication.



Module Contents
---------------

.. data:: log
   

   

.. data:: AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT
   :annotation: = AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT

   

.. function:: build_gcp_conn(key_file_path: Optional[str] = None, scopes: Optional[Sequence[str]] = None, project_id: Optional[str] = None) -> str
   Builds a uri that can be used as :envvar:`AIRFLOW_CONN_{CONN_ID}` with provided service key,
   scopes and project id.

   :param key_file_path: Path to service key.
   :type key_file_path: Optional[str]
   :param scopes: Required OAuth scopes.
   :type scopes: Optional[List[str]]
   :param project_id: The Google Cloud project id to be used for the connection.
   :type project_id: Optional[str]
   :return: String representing Airflow connection.


.. function:: provide_gcp_credentials(key_file_path: Optional[str] = None, key_file_dict: Optional[Dict] = None)
   Context manager that provides a Google Cloud credentials for application supporting `Application
   Default Credentials (ADC) strategy <https://cloud.google.com/docs/authentication/production>`__.

   It can be used to provide credentials for external programs (e.g. gcloud) that expect authorization
   file in ``GOOGLE_APPLICATION_CREDENTIALS`` environment variable.

   :param key_file_path: Path to file with Google Cloud Service Account .json file.
   :type key_file_path: str
   :param key_file_dict: Dictionary with credentials.
   :type key_file_dict: Dict


.. function:: provide_gcp_connection(key_file_path: Optional[str] = None, scopes: Optional[Sequence] = None, project_id: Optional[str] = None) -> Generator
   Context manager that provides a temporary value of :envvar:`AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT`
   connection. It build a new connection that includes path to provided service json,
   required scopes and project id.

   :param key_file_path: Path to file with Google Cloud Service Account .json file.
   :type key_file_path: str
   :param scopes: OAuth scopes for the connection
   :type scopes: Sequence
   :param project_id: The id of Google Cloud project for the connection.
   :type project_id: str


.. function:: provide_gcp_conn_and_credentials(key_file_path: Optional[str] = None, scopes: Optional[Sequence] = None, project_id: Optional[str] = None) -> Generator
   Context manager that provides both:

   - Google Cloud credentials for application supporting `Application Default Credentials (ADC)
     strategy <https://cloud.google.com/docs/authentication/production>`__.
   - temporary value of :envvar:`AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT` connection

   :param key_file_path: Path to file with Google Cloud Service Account .json file.
   :type key_file_path: str
   :param scopes: OAuth scopes for the connection
   :type scopes: Sequence
   :param project_id: The id of Google Cloud project for the connection.
   :type project_id: str


.. function:: get_credentials_and_project_id(*args, **kwargs) -> Tuple[google.auth.credentials.Credentials, str]
   Returns the Credentials object for Google API and the associated project_id.


