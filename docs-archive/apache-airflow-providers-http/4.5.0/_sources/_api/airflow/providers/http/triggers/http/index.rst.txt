:py:mod:`airflow.providers.http.triggers.http`
==============================================

.. py:module:: airflow.providers.http.triggers.http


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.http.triggers.http.HttpTrigger




.. py:class:: HttpTrigger(http_conn_id = 'http_default', auth_type = None, method = 'POST', endpoint = None, headers = None, data = None, extra_options = None)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   HttpTrigger run on the trigger worker.

   :param http_conn_id: http connection id that has the base
       API url i.e https://www.google.com/ and optional authentication credentials. Default
       headers can also be specified in the Extra field in json format.
   :param auth_type: The auth type for the service
   :param method: the API method to be called
   :param endpoint: Endpoint to be called, i.e. ``resource/v1/query?``.
   :param headers: Additional headers to be passed through as a dict.
   :param data: Payload to be uploaded or request parameters.
   :param extra_options: Additional kwargs to pass when creating a request.
       For example, ``run(json=obj)`` is passed as
       ``aiohttp.ClientSession().get(json=obj)``.
       2XX or 3XX status codes

   .. py:method:: serialize()

      Serializes HttpTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Makes a series of asynchronous http calls via an http hook.



