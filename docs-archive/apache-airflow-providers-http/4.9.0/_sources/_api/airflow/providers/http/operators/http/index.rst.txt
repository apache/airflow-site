:py:mod:`airflow.providers.http.operators.http`
===============================================

.. py:module:: airflow.providers.http.operators.http


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.http.operators.http.HttpOperator
   airflow.providers.http.operators.http.SimpleHttpOperator




.. py:class:: HttpOperator(*, endpoint = None, method = 'POST', data = None, headers = None, pagination_function = None, response_check = None, response_filter = None, extra_options = None, http_conn_id = 'http_default', log_response = False, auth_type = None, tcp_keep_alive = True, tcp_keep_alive_idle = 120, tcp_keep_alive_count = 20, tcp_keep_alive_interval = 30, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Calls an endpoint on an HTTP system to execute an action.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:HttpOperator`

   :param http_conn_id: The :ref:`http connection<howto/connection:http>` to run
       the operator against
   :param endpoint: The relative part of the full url. (templated)
   :param method: The HTTP method to use, default = "POST"
   :param data: The data to pass. POST-data in POST/PUT and params
       in the URL for a GET request. (templated)
   :param headers: The HTTP headers to be added to the GET request
   :param pagination_function: A callable that generates the parameters used to call the API again,
       based on the previous response. Typically used when the API is paginated and returns for e.g a
       cursor, a 'next page id', or a 'next page URL'. When provided, the Operator will call the API
       repeatedly until this callable returns None. The result of the Operator will become by default a
       list of Response.text objects (instead of a single response object). Same with the other injected
       functions (like response_check, response_filter, ...) which will also receive a list of Response
       objects. This function receives a Response object form previous call, and should return a nested
       dictionary with the following optional keys: `endpoint`, `data`, `headers` and `extra_options.
       Those keys will be merged and/or override the parameters provided into the HttpOperator declaration.
       Parameters are merged when they are both a dictionary (e.g.: HttpOperator.headers will be merged
       with the `headers` dict provided by this function). When merging, dict items returned by this
       function will override initial ones (e.g: if both HttpOperator.headers and `headers` have a 'cookie'
       item, the one provided by `headers` is kept). Parameters are simply overridden when any of them are
       string (e.g.: HttpOperator.endpoint is overridden by `endpoint`).
   :param response_check: A check against the 'requests' response object.
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
       It should return True for 'pass' and False otherwise. If a pagination_function
       is provided, this function will receive a list of response objects instead of a
       single response object.
   :param response_filter: A function allowing you to manipulate the response
       text. e.g response_filter=lambda response: json.loads(response.text).
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
       If a pagination_function is provided, this function will receive a list of response
       object instead of a single response object.
   :param extra_options: Extra options for the 'requests' library, see the
       'requests' documentation (options to modify timeout, ssl, etc.)
   :param log_response: Log the response (default: False)
   :param auth_type: The auth type for the service
   :param tcp_keep_alive: Enable TCP Keep Alive for the connection.
   :param tcp_keep_alive_idle: The TCP Keep Alive Idle parameter (corresponds to ``socket.TCP_KEEPIDLE``).
   :param tcp_keep_alive_count: The TCP Keep Alive count parameter (corresponds to ``socket.TCP_KEEPCNT``)
   :param tcp_keep_alive_interval: The TCP Keep Alive interval parameter (corresponds to
       ``socket.TCP_KEEPINTVL``)
   :param deferrable: Run operator in the deferrable mode

   .. py:property:: hook
      :type: airflow.providers.http.hooks.http.HttpHook

      Get Http Hook based on connection type.


   .. py:attribute:: conn_id_field
      :value: 'http_conn_id'

      

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('endpoint', 'data', 'headers')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ()

      

   .. py:attribute:: ui_color
      :value: '#f4a460'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_sync(context)


   .. py:method:: paginate_sync(response)


   .. py:method:: execute_async(context)


   .. py:method:: process_response(context, response)

      Process the response.


   .. py:method:: execute_complete(context, event, paginated_responses = None)

      Callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.


   .. py:method:: paginate_async(context, response, previous_responses = None)



.. py:class:: SimpleHttpOperator(**kwargs)


   Bases: :py:obj:`HttpOperator`

   Calls an endpoint on an HTTP system to execute an action.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:HttpOperator`

   :param http_conn_id: The :ref:`http connection<howto/connection:http>` to run
       the operator against
   :param endpoint: The relative part of the full url. (templated)
   :param method: The HTTP method to use, default = "POST"
   :param data: The data to pass. POST-data in POST/PUT and params
       in the URL for a GET request. (templated)
   :param headers: The HTTP headers to be added to the GET request
   :param pagination_function: A callable that generates the parameters used to call the API again,
       based on the previous response. Typically used when the API is paginated and returns for e.g a
       cursor, a 'next page id', or a 'next page URL'. When provided, the Operator will call the API
       repeatedly until this callable returns None. The result of the Operator will become by default a
       list of Response.text objects (instead of a single response object). Same with the other injected
       functions (like response_check, response_filter, ...) which will also receive a list of Response
       objects. This function receives a Response object form previous call, and should return a nested
       dictionary with the following optional keys: `endpoint`, `data`, `headers` and `extra_options.
       Those keys will be merged and/or override the parameters provided into the HttpOperator declaration.
       Parameters are merged when they are both a dictionary (e.g.: HttpOperator.headers will be merged
       with the `headers` dict provided by this function). When merging, dict items returned by this
       function will override initial ones (e.g: if both HttpOperator.headers and `headers` have a 'cookie'
       item, the one provided by `headers` is kept). Parameters are simply overridden when any of them are
       string (e.g.: HttpOperator.endpoint is overridden by `endpoint`).
   :param response_check: A check against the 'requests' response object.
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
       It should return True for 'pass' and False otherwise. If a pagination_function
       is provided, this function will receive a list of response objects instead of a
       single response object.
   :param response_filter: A function allowing you to manipulate the response
       text. e.g response_filter=lambda response: json.loads(response.text).
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
       If a pagination_function is provided, this function will receive a list of response
       object instead of a single response object.
   :param extra_options: Extra options for the 'requests' library, see the
       'requests' documentation (options to modify timeout, ssl, etc.)
   :param log_response: Log the response (default: False)
   :param auth_type: The auth type for the service
   :param tcp_keep_alive: Enable TCP Keep Alive for the connection.
   :param tcp_keep_alive_idle: The TCP Keep Alive Idle parameter (corresponds to ``socket.TCP_KEEPIDLE``).
   :param tcp_keep_alive_count: The TCP Keep Alive count parameter (corresponds to ``socket.TCP_KEEPCNT``)
   :param tcp_keep_alive_interval: The TCP Keep Alive interval parameter (corresponds to
       ``socket.TCP_KEEPINTVL``)
   :param deferrable: Run operator in the deferrable mode


