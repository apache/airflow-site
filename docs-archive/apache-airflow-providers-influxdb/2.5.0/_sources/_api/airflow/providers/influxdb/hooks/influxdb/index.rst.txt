:py:mod:`airflow.providers.influxdb.hooks.influxdb`
===================================================

.. py:module:: airflow.providers.influxdb.hooks.influxdb

.. autoapi-nested-parse::

   This module allows to connect to a InfluxDB database.

   .. spelling:word-list::

       FluxTable



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.influxdb.hooks.influxdb.InfluxDBHook




.. py:class:: InfluxDBHook(conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with InfluxDB.

   Performs a connection to InfluxDB and retrieves client.

   :param influxdb_conn_id: Reference to :ref:`Influxdb connection id <howto/connection:influxdb>`.

   .. py:attribute:: conn_name_attr
      :value: 'influxdb_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'influxdb_default'

      

   .. py:attribute:: conn_type
      :value: 'influxdb'

      

   .. py:attribute:: hook_name
      :value: 'Influxdb'

      

   .. py:method:: get_client(uri, token, org_name)


   .. py:method:: get_uri(conn)

      Add additional parameters to the URI based on InfluxDB host requirements.


   .. py:method:: get_conn()

      Initiate a new InfluxDB connection with token and organization name.


   .. py:method:: query(query)

      Run the query.

      Note: The bucket name should be included in the query.

      :param query: InfluxDB query
      :return: List


   .. py:method:: query_to_df(query)

      Run the query and return a pandas dataframe.

      Note: The bucket name should be included in the query.

      :param query: InfluxDB query
      :return: pd.DataFrame


   .. py:method:: write(bucket_name, point_name, tag_name, tag_value, field_name, field_value, synchronous=False)

      Write a Point to the bucket specified.

      Example: ``Point("my_measurement").tag("location", "Prague").field("temperature", 25.3)``


   .. py:method:: create_organization(name)

      Create a new organization.


   .. py:method:: delete_organization(org_id)

      Delete an organization by ID.


   .. py:method:: create_bucket(bucket_name, description, org_id, retention_rules=None)

      Create a bucket for an organization.


   .. py:method:: find_bucket_id_by_name(bucket_name)

      Get bucket ID by name.


   .. py:method:: delete_bucket(bucket_name)

      Delete bucket by name.



