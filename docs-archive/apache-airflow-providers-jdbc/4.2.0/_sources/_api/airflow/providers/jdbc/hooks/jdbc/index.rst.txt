:py:mod:`airflow.providers.jdbc.hooks.jdbc`
===========================================

.. py:module:: airflow.providers.jdbc.hooks.jdbc


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.jdbc.hooks.jdbc.JdbcHook




.. py:class:: JdbcHook(*args, driver_path = None, driver_class = None, **kwargs)


   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   General hook for JDBC access.

   JDBC URL, username and password will be taken from the predefined connection.
   Note that the whole JDBC URL must be specified in the "host" field in the DB.
   Raises an airflow error if the given connection id doesn't exist.

   To configure driver parameters, you can use the following methods:
       1. Supply them as constructor arguments when instantiating the hook.
       2. Set the "driver_path" and/or "driver_class" parameters in the "hook_params" dictionary when
          creating the hook using SQL operators.
       3. Set the "driver_path" and/or "driver_class" extra in the connection and correspondingly enable
          the "allow_driver_path_in_extra" and/or "allow_driver_class_in_extra" options in the
          "providers.jdbc" section of the Airflow configuration. If you're enabling these options in Airflow
          configuration, you should make sure that you trust the users who can edit connections in the UI
          to not use it maliciously.
       4. Patch the ``JdbcHook.default_driver_path`` and/or ``JdbcHook.default_driver_class`` values in the
          ``local_settings.py`` file.

   See :doc:`/connections/jdbc` for full documentation.

   :param args: passed to DbApiHook
   :param driver_path: path to the JDBC driver jar file. See above for more info
   :param driver_class: name of the JDBC driver class. See above for more info
   :param kwargs: passed to DbApiHook

   .. py:property:: connection_extra_lower
      :type: dict

      ``connection.extra_dejson`` but where keys are converted to lower case.

      This is used internally for case-insensitive access of jdbc params.


   .. py:property:: driver_path
      :type: str | None


   .. py:property:: driver_class
      :type: str | None


   .. py:attribute:: conn_name_attr
      :value: 'jdbc_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'jdbc_default'

      

   .. py:attribute:: conn_type
      :value: 'jdbc'

      

   .. py:attribute:: hook_name
      :value: 'JDBC Connection'

      

   .. py:attribute:: supports_autocommit
      :value: True

      

   .. py:attribute:: default_driver_path
      :type: str | None

      

   .. py:attribute:: default_driver_class
      :type: str | None

      

   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Get custom field behaviour.


   .. py:method:: get_conn()

      Return a connection object.


   .. py:method:: set_autocommit(conn, autocommit)

      Set autocommit for the given connection.

      :param conn: The connection.
      :param autocommit: The connection's autocommit setting.


   .. py:method:: get_autocommit(conn)

      Get autocommit setting for the provided connection.

      :param conn: Connection to get autocommit setting from.
      :return: connection autocommit setting. True if ``autocommit`` is set
          to True on the connection. False if it is either not set, set to
          False, or the connection does not support auto-commit.



