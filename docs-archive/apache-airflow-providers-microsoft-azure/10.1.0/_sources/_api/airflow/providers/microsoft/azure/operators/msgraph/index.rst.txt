:py:mod:`airflow.providers.microsoft.azure.operators.msgraph`
=============================================================

.. py:module:: airflow.providers.microsoft.azure.operators.msgraph


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.msgraph.MSGraphAsyncOperator




.. py:class:: MSGraphAsyncOperator(*, url, response_type = None, path_parameters = None, url_template = None, method = 'GET', query_parameters = None, headers = None, data = None, conn_id = KiotaRequestAdapterHook.default_conn_name, key = XCOM_RETURN_KEY, timeout = None, proxies = None, api_version = None, pagination_function = None, result_processor = lambda context, result: result, serializer = ResponseSerializer, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   A Microsoft Graph API operator which allows you to execute REST call to the Microsoft Graph API.

   https://learn.microsoft.com/en-us/graph/use-the-api

       .. seealso::
           For more information on how to use this operator, take a look at the guide:
           :ref:`howto/operator:MSGraphAsyncOperator`

   :param url: The url being executed on the Microsoft Graph API (templated).
   :param response_type: The expected return type of the response as a string. Possible value are: `bytes`,
       `str`, `int`, `float`, `bool` and `datetime` (default is None).
   :param method: The HTTP method being used to do the REST call (default is GET).
   :param conn_id: The HTTP Connection ID to run the operator against (templated).
   :param key: The key that will be used to store `XCom's` ("return_value" is default).
   :param timeout: The HTTP timeout being used by the `KiotaRequestAdapter` (default is None).
       When no timeout is specified or set to None then there is no HTTP timeout on each request.
   :param proxies: A dict defining the HTTP proxies to be used (default is None).
   :param api_version: The API version of the Microsoft Graph API to be used (default is v1).
       You can pass an enum named APIVersion which has 2 possible members v1 and beta,
       or you can pass a string as `v1.0` or `beta`.
   :param result_processor: Function to further process the response from MS Graph API
       (default is lambda: context, response: response).  When the response returned by the
       `KiotaRequestAdapterHook` are bytes, then those will be base64 encoded into a string.
   :param serializer: Class which handles response serialization (default is ResponseSerializer).
       Bytes will be base64 encoded into a string, so it can be stored as an XCom.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('url', 'response_type', 'path_parameters', 'url_template', 'query_parameters', 'headers',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)

      Execute callback when MSGraphTrigger finishes execution.

      This method gets executed automatically when MSGraphTrigger completes its execution.


   .. py:method:: append_result(result, append_result_as_list_if_absent = False)


   .. py:method:: push_xcom(context, value)


   .. py:method:: pull_execute_complete(context, event = None)


   .. py:method:: paginate(operator, response)
      :staticmethod:


   .. py:method:: trigger_next_link(response, method_name='execute_complete')



