:py:mod:`airflow.providers.microsoft.azure.operators.adls`
==========================================================

.. py:module:: airflow.providers.microsoft.azure.operators.adls


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.adls.ADLSCreateObjectOperator
   airflow.providers.microsoft.azure.operators.adls.ADLSDeleteOperator
   airflow.providers.microsoft.azure.operators.adls.ADLSListOperator




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.adls.DEFAULT_AZURE_DATA_LAKE_CONN_ID


.. py:data:: DEFAULT_AZURE_DATA_LAKE_CONN_ID
   :value: 'azure_data_lake_default'

   

.. py:class:: ADLSCreateObjectOperator(*, file_system_name, file_name, data, length = None, replace = False, azure_data_lake_conn_id = DEFAULT_AZURE_DATA_LAKE_CONN_ID, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a new object from passed data to Azure Data Lake on specified file.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:ADLSCreateObjectOperator`

   :param file_system_name: Name of the file system or instance of FileSystemProperties.
   :param file_name: Name of the file which needs to be created in the file system.
   :param data: The data that will be uploaded.
   :param length: Size of the data in bytes (optional).
   :param replace: Whether to forcibly overwrite existing files/directories.
           If False and remote path is a directory, will quit regardless if any files
           would be overwritten or not. If True, only matching filenames are actually
           overwritten.
   :param azure_data_lake_conn_id: Reference to the :ref:`Azure Data Lake connection<howto/connection:adl>`.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('file_system_name', 'file_name', 'data')

      

   .. py:attribute:: ui_color
      :value: '#e4f0e8'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ADLSDeleteOperator(*, path, recursive = False, ignore_not_found = True, azure_data_lake_conn_id = DEFAULT_AZURE_DATA_LAKE_CONN_ID, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Delete files in the specified path.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:ADLSDeleteOperator`

   :param path: A directory or file to remove
   :param recursive: Whether to loop into directories in the location and remove the files
   :param ignore_not_found: Whether to raise error if file to delete is not found
   :param azure_data_lake_conn_id: Reference to the :ref:`Azure Data Lake connection<howto/connection:adl>`.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('path',)

      

   .. py:attribute:: ui_color
      :value: '#901dd2'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ADLSListOperator(*, path, azure_data_lake_conn_id = DEFAULT_AZURE_DATA_LAKE_CONN_ID, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   List all files from the specified path.

   This operator returns a python list with the names of files which can be used by
    `xcom` in the downstream tasks.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:ADLSListOperator`

   :param path: The Azure Data Lake path to find the objects. Supports glob strings (templated)
   :param azure_data_lake_conn_id: Reference to the :ref:`Azure Data Lake connection<howto/connection:adl>`.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('path',)

      

   .. py:attribute:: ui_color
      :value: '#901dd2'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



