:py:mod:`airflow.providers.microsoft.azure.triggers.powerbi`
============================================================

.. py:module:: airflow.providers.microsoft.azure.triggers.powerbi


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.triggers.powerbi.PowerBITrigger




.. py:class:: PowerBITrigger(conn_id, dataset_id, group_id, timeout = 60 * 60 * 24 * 7, proxies = None, api_version = None, check_interval = 60, wait_for_termination = True)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Triggers when Power BI dataset refresh is completed.

   Wait for termination will always be True.

   :param conn_id: The connection Id to connect to PowerBI.
   :param timeout: The HTTP timeout being used by the `KiotaRequestAdapter` (default is None).
       When no timeout is specified or set to None then there is no HTTP timeout on each request.
   :param proxies: A dict defining the HTTP proxies to be used (default is None).
   :param api_version: The API version of the Microsoft Graph API to be used (default is v1).
       You can pass an enum named APIVersion which has 2 possible members v1 and beta,
       or you can pass a string as `v1.0` or `beta`.
   :param dataset_id: The dataset Id to refresh.
   :param group_id: The workspace Id where dataset is located.
   :param end_time: Time in seconds when trigger should stop polling.
   :param check_interval: Time in seconds to wait between each poll.
   :param wait_for_termination: Wait for the dataset refresh to complete or fail.

   .. py:property:: conn_id
      :type: str


   .. py:property:: proxies
      :type: dict | None


   .. py:property:: api_version
      :type: msgraph_core.APIVersion | str


   .. py:method:: serialize()

      Serialize the trigger instance.


   .. py:method:: run()
      :async:

      Make async connection to the PowerBI and polls for the dataset refresh status.



