airflow.providers.microsoft.azure.hooks.asb
===========================================

.. py:module:: airflow.providers.microsoft.azure.hooks.asb


Attributes
----------

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.asb.MessageCallback


Classes
-------

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.asb.BaseAzureServiceBusHook
   airflow.providers.microsoft.azure.hooks.asb.AdminClientHook
   airflow.providers.microsoft.azure.hooks.asb.MessageHook


Module Contents
---------------

.. py:data:: MessageCallback

.. py:class:: BaseAzureServiceBusHook(azure_service_bus_conn_id = default_conn_name)

   Bases: :py:obj:`airflow.hooks.base.BaseHook`


   BaseAzureServiceBusHook class to create session and create connection using connection string.

   :param azure_service_bus_conn_id: Reference to the
       :ref:`Azure Service Bus connection<howto/connection:azure_service_bus>`.


   .. py:attribute:: conn_name_attr
      :value: 'azure_service_bus_conn_id'



   .. py:attribute:: default_conn_name
      :value: 'azure_service_bus_default'



   .. py:attribute:: conn_type
      :value: 'azure_service_bus'



   .. py:attribute:: hook_name
      :value: 'Azure Service Bus'



   .. py:method:: get_connection_form_widgets()
      :classmethod:


      Return connection widgets to add to connection form.



   .. py:method:: get_ui_field_behaviour()
      :classmethod:


      Return custom field behaviour.



   .. py:attribute:: conn_id
      :value: 'azure_service_bus_default'



   .. py:method:: get_conn()
      :abstractmethod:


      Return connection for the hook.



.. py:class:: AdminClientHook(azure_service_bus_conn_id = default_conn_name)

   Bases: :py:obj:`BaseAzureServiceBusHook`


   Interact with the ServiceBusAdministrationClient.

   This can create, update, list, and delete resources of a Service Bus
   namespace. This hook uses the same Azure Service Bus client connection
   inherited from the base class.


   .. py:method:: get_conn()

      Create a ServiceBusAdministrationClient instance.

      This uses the connection string in connection details.



   .. py:method:: create_queue(queue_name, max_delivery_count = 10, dead_lettering_on_message_expiration = True, enable_batched_operations = True)

      Create Queue by connecting to service Bus Admin client return the QueueProperties.

      :param queue_name: The name of the queue or a QueueProperties with name.
      :param max_delivery_count: The maximum delivery count. A message is automatically
          dead lettered after this number of deliveries. Default value is 10..
      :param dead_lettering_on_message_expiration: A value that indicates whether this subscription has
          dead letter support when a message expires.
      :param enable_batched_operations: Value that indicates whether server-side batched
          operations are enabled.



   .. py:method:: delete_queue(queue_name)

      Delete the queue by queue_name in service bus namespace.

      :param queue_name: The name of the queue or a QueueProperties with name.



   .. py:method:: create_topic(topic_name, azure_service_bus_conn_id = 'azure_service_bus_default', default_message_time_to_live = None, max_size_in_megabytes = None, requires_duplicate_detection = None, duplicate_detection_history_time_window = None, enable_batched_operations = None, size_in_bytes = None, filtering_messages_before_publishing = None, authorization_rules = None, support_ordering = None, auto_delete_on_idle = None, enable_partitioning = None, enable_express = None, user_metadata = None, max_message_size_in_kilobytes = None)

      Create a topic by connecting to service Bus Admin client.

      :param topic_name: Name of the topic.
      :param default_message_time_to_live: ISO 8601 default message time span to live value. This is
          the duration after which the message expires, starting from when the message is sent to Service
          Bus. This is the default value used when TimeToLive is not set on a message itself.
          Input value of either type ~datetime.timedelta or string in ISO 8601 duration format
          like "PT300S" is accepted.
      :param max_size_in_megabytes: The maximum size of the topic in megabytes, which is the size of
          memory allocated for the topic.
      :param requires_duplicate_detection: A value indicating if this topic requires duplicate
          detection.
      :param duplicate_detection_history_time_window: ISO 8601 time span structure that defines the
          duration of the duplicate detection history. The default value is 10 minutes.
          Input value of either type ~datetime.timedelta or string in ISO 8601 duration format
          like "PT300S" is accepted.
      :param enable_batched_operations: Value that indicates whether server-side batched operations
          are enabled.
      :param size_in_bytes: The size of the topic, in bytes.
      :param filtering_messages_before_publishing: Filter messages before publishing.
      :param authorization_rules: List of Authorization rules for resource.
      :param support_ordering: A value that indicates whether the topic supports ordering.
      :param auto_delete_on_idle: ISO 8601 time span idle interval after which the topic is
          automatically deleted. The minimum duration is 5 minutes.
          Input value of either type ~datetime.timedelta or string in ISO 8601 duration format
          like "PT300S" is accepted.
      :param enable_partitioning: A value that indicates whether the topic is to be partitioned
          across multiple message brokers.
      :param enable_express: A value that indicates whether Express Entities are enabled. An express
          queue holds a message in memory temporarily before writing it to persistent storage.
      :param user_metadata: Metadata associated with the topic.
      :param max_message_size_in_kilobytes: The maximum size in kilobytes of message payload that
          can be accepted by the queue. This feature is only available when using a Premium namespace
          and Service Bus API version "2021-05" or higher.
          The minimum allowed value is 1024 while the maximum allowed value is 102400. Default value is 1024.



   .. py:method:: create_subscription(topic_name, subscription_name, lock_duration = None, requires_session = None, default_message_time_to_live = None, dead_lettering_on_message_expiration = True, dead_lettering_on_filter_evaluation_exceptions = None, max_delivery_count = 10, enable_batched_operations = True, forward_to = None, user_metadata = None, forward_dead_lettered_messages_to = None, auto_delete_on_idle = None, filter_rule = None, filter_rule_name = None)

      Create a subscription with specified name on a topic and return the SubscriptionProperties for it.

      An optional filter_rule can be provided to filter messages based on their properties. In particular,
      the correlation ID filter can be used to pair up replies to requests.

      :param topic_name: The topic that will own the to-be-created subscription.
      :param subscription_name: Name of the subscription that need to be created
      :param lock_duration: ISO 8601 time span duration of a peek-lock; that is, the amount of time that
          the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the
          default value is 1 minute. Input value of either type ~datetime.timedelta or string in ISO 8601
          duration format like "PT300S" is accepted.
      :param requires_session: A value that indicates whether the queue supports the concept of sessions.
      :param default_message_time_to_live: ISO 8601 default message time span to live value. This is the
          duration after which the message expires, starting from when the message is sent to
          Service Bus. This is the default value used when TimeToLive is not set on a message itself.
          Input value of either type ~datetime.timedelta or string in ISO 8601 duration
          format like "PT300S" is accepted.
      :param dead_lettering_on_message_expiration: A value that indicates whether this subscription has
          dead letter support when a message expires.
      :param dead_lettering_on_filter_evaluation_exceptions: A value that indicates whether this
          subscription has dead letter support when a message expires.
      :param max_delivery_count: The maximum delivery count. A message is automatically dead lettered
          after this number of deliveries. Default value is 10.
      :param enable_batched_operations: Value that indicates whether server-side batched
          operations are enabled.
      :param forward_to: The name of the recipient entity to which all the messages sent to the
          subscription are forwarded to.
      :param user_metadata: Metadata associated with the subscription. Maximum number of characters is 1024.
      :param forward_dead_lettered_messages_to: The name of the recipient entity to which all the
          messages sent to the subscription are forwarded to.
      :param auto_delete_on_idle: ISO 8601 time Span idle interval after which the subscription is
          automatically deleted. The minimum duration is 5 minutes. Input value of either
          type ~datetime.timedelta or string in ISO 8601 duration format like "PT300S" is accepted.
      :param filter_rule: Optional correlation or SQL rule filter to apply on the messages.
      :param filter_rule_name: Optional rule name to use applying the rule filter to the subscription
      :param azure_service_bus_conn_id: Reference to the
          :ref:`Azure Service Bus connection<howto/connection:azure_service_bus>`.



   .. py:method:: update_subscription(topic_name, subscription_name, max_delivery_count = None, dead_lettering_on_message_expiration = None, enable_batched_operations = None)

      Update an Azure ServiceBus Topic Subscription under a ServiceBus Namespace.

      :param topic_name: The topic that will own the to-be-created subscription.
      :param subscription_name: Name of the subscription that need to be created.
      :param max_delivery_count: The maximum delivery count. A message is automatically dead lettered
          after this number of deliveries. Default value is 10.
      :param dead_lettering_on_message_expiration: A value that indicates whether this subscription
          has dead letter support when a message expires.
      :param enable_batched_operations: Value that indicates whether server-side batched
          operations are enabled.



   .. py:method:: delete_subscription(subscription_name, topic_name)

      Delete a topic subscription entities under a ServiceBus Namespace.

      :param subscription_name: The subscription name that will own the rule in topic
      :param topic_name: The topic that will own the subscription rule.



.. py:class:: MessageHook(azure_service_bus_conn_id = default_conn_name)

   Bases: :py:obj:`BaseAzureServiceBusHook`


   Interact with ServiceBusClient.

   This acts as a high level interface for getting ServiceBusSender and ServiceBusReceiver.


   .. py:method:: get_conn()

      Create and returns ServiceBusClient by using the connection string in connection details.



   .. py:method:: send_message(queue_name, messages, batch_message_flag = False)

      Use ServiceBusClient Send to send message(s) to a Service Bus Queue.

      By using ``batch_message_flag``, it enables and send message as batch message.

      :param queue_name: The name of the queue or a QueueProperties with name.
      :param messages: Message which needs to be sent to the queue. It can be string or list of string.
      :param batch_message_flag: bool flag, can be set to True if message needs to be
          sent as batch message.



   .. py:method:: send_list_messages(sender, messages)
      :staticmethod:



   .. py:method:: send_batch_message(sender, messages)
      :staticmethod:



   .. py:method:: receive_message(queue_name, context, max_message_count = 1, max_wait_time = None, message_callback = None)

      Receive a batch of messages at once in a specified Queue name.

      :param queue_name: The name of the queue name or a QueueProperties with name.
      :param max_message_count: Maximum number of messages in the batch.
      :param max_wait_time: Maximum time to wait in seconds for the first message to arrive.
      :param message_callback: Optional callback to process each message. If not provided, then
          the message will be logged and completed. If provided, and throws an exception, the
          message will be abandoned for future redelivery.



   .. py:method:: receive_subscription_message(topic_name, subscription_name, context, max_message_count, max_wait_time, message_callback = None)

      Receive a batch of subscription message at once.

      This approach is optimal if you wish to process multiple messages
      simultaneously, or perform an ad-hoc receive as a single call.

      :param subscription_name: The subscription name that will own the rule in topic
      :param topic_name: The topic that will own the subscription rule.
      :param max_message_count: Maximum number of messages in the batch.
          Actual number returned will depend on prefetch_count and incoming stream rate.
          Setting to None will fully depend on the prefetch config. The default value is 1.
      :param max_wait_time: Maximum time to wait in seconds for the first message to arrive. If no
          messages arrive, and no timeout is specified, this call will not return until the
          connection is closed. If specified, an no messages arrive within the timeout period,
          an empty list will be returned.



