airflow.providers.microsoft.azure.operators.powerbi
===================================================

.. py:module:: airflow.providers.microsoft.azure.operators.powerbi


Classes
-------

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.powerbi.PowerBILink
   airflow.providers.microsoft.azure.operators.powerbi.PowerBIDatasetRefreshOperator


Module Contents
---------------

.. py:class:: PowerBILink

   Bases: :py:obj:`airflow.sdk.BaseOperatorLink`


   Construct a link to monitor a dataset in Power BI.


   .. py:attribute:: name
      :value: 'Monitor PowerBI Dataset'


      Name of the link. This will be the button name on the task UI.



   .. py:method:: get_link(operator, *, ti_key)

      Link to external system.

      :param operator: The Airflow operator object this link is associated to.
      :param ti_key: TaskInstance ID to return link for.
      :return: link to external system



.. py:class:: PowerBIDatasetRefreshOperator(*, dataset_id, group_id, conn_id = PowerBIHook.default_conn_name, timeout = 60 * 60 * 24 * 7, proxies = None, api_version = None, check_interval = 60, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Refreshes a Power BI dataset.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:PowerBIDatasetRefreshOperator`

   :param dataset_id: The dataset id.
   :param group_id: The workspace id.
   :param conn_id: Airflow Connection ID that contains the connection information for the Power BI account used for authentication.
   :param timeout: Time in seconds to wait for a dataset to reach a terminal status for asynchronous waits. Used only if ``wait_for_termination`` is True.
   :param check_interval: Number of seconds to wait before rechecking the
       refresh status.


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('dataset_id', 'group_id')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: operator_extra_links


   .. py:attribute:: hook


   .. py:attribute:: dataset_id


   .. py:attribute:: group_id


   .. py:attribute:: wait_for_termination
      :value: True



   .. py:attribute:: conn_id
      :value: 'powerbi_default'



   .. py:attribute:: timeout
      :value: 604800



   .. py:attribute:: check_interval
      :value: 60



   .. py:property:: proxies
      :type: dict | None



   .. py:property:: api_version
      :type: str | None



   .. py:method:: execute(context)

      Refresh the Power BI Dataset.



   .. py:method:: get_refresh_status(context, event = None)

      Push the refresh Id to XCom then runs the Trigger to wait for refresh completion.



   .. py:method:: execute_complete(context, event)

      Return immediately - callback for when the trigger fires.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



