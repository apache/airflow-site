airflow.providers.microsoft.azure.operators.container_instances
===============================================================

.. py:module:: airflow.providers.microsoft.azure.operators.container_instances


Attributes
----------

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.container_instances.DEFAULT_ENVIRONMENT_VARIABLES
   airflow.providers.microsoft.azure.operators.container_instances.DEFAULT_SECURED_VARIABLES
   airflow.providers.microsoft.azure.operators.container_instances.DEFAULT_VOLUMES
   airflow.providers.microsoft.azure.operators.container_instances.DEFAULT_MEMORY_IN_GB
   airflow.providers.microsoft.azure.operators.container_instances.DEFAULT_CPU


Classes
-------

.. autoapisummary::

   airflow.providers.microsoft.azure.operators.container_instances.Volume
   airflow.providers.microsoft.azure.operators.container_instances.AzureContainerInstancesOperator


Module Contents
---------------

.. py:class:: Volume

   Bases: :py:obj:`tuple`


   .. py:attribute:: conn_id


   .. py:attribute:: account_name


   .. py:attribute:: share_name


   .. py:attribute:: mount_path


   .. py:attribute:: read_only


.. py:data:: DEFAULT_ENVIRONMENT_VARIABLES
   :type:  dict[str, str]

.. py:data:: DEFAULT_SECURED_VARIABLES
   :type:  collections.abc.Sequence[str]
   :value: []


.. py:data:: DEFAULT_VOLUMES
   :type:  collections.abc.Sequence[Volume]
   :value: []


.. py:data:: DEFAULT_MEMORY_IN_GB
   :value: 2.0


.. py:data:: DEFAULT_CPU
   :value: 1.0


.. py:class:: AzureContainerInstancesOperator(*, ci_conn_id, resource_group, name, image, region, registry_conn_id = None, environment_variables = None, secured_variables = None, volumes = None, memory_in_gb = None, cpu = None, gpu = None, command = None, remove_on_error = True, fail_if_exists = True, tags = None, xcom_all = None, os_type = 'Linux', restart_policy = 'Never', ip_address = None, ports = None, subnet_ids = None, dns_config = None, diagnostics = None, priority = 'Regular', **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Start a container on Azure Container Instances.

   :param ci_conn_id: connection id of a service principal which will be used
       to start the container instance
   :param registry_conn_id: connection id of a user which can login to a
       private docker registry. For Azure use :ref:`Azure connection id<howto/connection:azure>`
   :param resource_group: name of the resource group wherein this container
       instance should be started
   :param name: name of this container instance. Please note this name has
       to be unique in order to run containers in parallel.
   :param image: the docker image to be used
   :param region: the region wherein this container instance should be started
   :param environment_variables: key,value pairs containing environment
       variables which will be passed to the running container
   :param secured_variables: names of environmental variables that should not
       be exposed outside the container (typically passwords).
   :param volumes: list of ``Volume`` tuples to be mounted to the container.
       Currently only Azure Fileshares are supported.
   :param memory_in_gb: the amount of memory to allocate to this container
   :param cpu: the number of cpus to allocate to this container
   :param gpu: GPU Resource for the container.
   :param command: the command to run inside the container
   :param container_timeout: max time allowed for the execution of
       the container instance.
   :param tags: azure tags as dict of str:str
   :param xcom_all: Control if logs are pushed to XCOM similarly to how DockerOperator does.
       Possible values include: 'None', 'True', 'False'. Defaults to 'None', meaning no logs
       are pushed to XCOM which is the historical behaviour. 'True' means push all logs to XCOM
       which may run the risk of hitting XCOM size limits. 'False' means push only the last line
       of the logs to XCOM. However, the logs are pushed into XCOM under "logs", not return_value
       to avoid breaking the existing behaviour.
   :param os_type: The operating system type required by the containers
       in the container group. Possible values include: 'Windows', 'Linux'
   :param restart_policy: Restart policy for all containers within the container group.
       Possible values include: 'Always', 'OnFailure', 'Never'
   :param ip_address: The IP address type of the container group.
   :param subnet_ids: The subnet resource IDs for a container group
   :param dns_config: The DNS configuration for a container group.
   :param diagnostics: Container group diagnostic information (Log Analytics).
   :param priority: Container group priority, Possible values include: 'Regular', 'Spot'

   **Example**::

       AzureContainerInstancesOperator(
           ci_conn_id="azure_service_principal",
           registry_conn_id="azure_registry_user",
           resource_group="my-resource-group",
           name="my-container-name-{{ ds }}",
           image="myprivateregistry.azurecr.io/my_container:latest",
           region="westeurope",
           environment_variables={
               "MODEL_PATH": "my_value",
               "POSTGRES_LOGIN": "{{ macros.connection('postgres_default').login }}",
               "POSTGRES_PASSWORD": "{{ macros.connection('postgres_default').password }}",
               "JOB_GUID": "{{ ti.xcom_pull(task_ids='task1', key='guid') }}",
           },
           secured_variables=["POSTGRES_PASSWORD"],
           volumes=[
               (
                   "azure_container_instance_conn_id",
                   "my_storage_container",
                   "my_fileshare",
                   "/input-data",
                   True,
               ),
           ],
           memory_in_gb=14.0,
           cpu=4.0,
           gpu=GpuResource(count=1, sku="K80"),
           subnet_ids=[
               {
                   "id": "/subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/my_rg/providers/Microsoft.Network/virtualNetworks/my_vnet/subnets/my_subnet"
               }
           ],
           dns_config={"name_servers": ["10.0.0.10", "10.0.0.11"]},
           diagnostics={
               "log_analytics": {
                   "workspaceId": "workspaceid",
                   "workspaceKey": "workspaceKey",
               }
           },
           priority="Regular",
           command=["/bin/echo", "world"],
           task_id="start_container",
       )


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('name', 'image', 'command', 'environment_variables', 'volumes')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: ci_conn_id


   .. py:attribute:: resource_group


   .. py:attribute:: name


   .. py:attribute:: image


   .. py:attribute:: region


   .. py:attribute:: registry_conn_id
      :value: None



   .. py:attribute:: environment_variables


   .. py:attribute:: secured_variables
      :value: []



   .. py:attribute:: volumes
      :value: []



   .. py:attribute:: memory_in_gb
      :value: 2.0



   .. py:attribute:: cpu
      :value: 1.0



   .. py:attribute:: gpu
      :value: None



   .. py:attribute:: command
      :value: None



   .. py:attribute:: remove_on_error
      :value: True



   .. py:attribute:: fail_if_exists
      :value: True



   .. py:attribute:: tags
      :value: None



   .. py:attribute:: xcom_all
      :value: None



   .. py:attribute:: os_type
      :value: 'Linux'



   .. py:attribute:: restart_policy
      :value: 'Never'



   .. py:attribute:: ip_address
      :value: None



   .. py:attribute:: ports
      :value: None



   .. py:attribute:: subnet_ids
      :value: None



   .. py:attribute:: dns_config
      :value: None



   .. py:attribute:: diagnostics
      :value: None



   .. py:attribute:: priority
      :value: 'Regular'



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:method:: on_kill()

      Override this method to clean up subprocesses when a task instance gets killed.

      Any use of the threading, subprocess or multiprocessing module within an
      operator needs to be cleaned up, or it will leave ghost processes behind.



