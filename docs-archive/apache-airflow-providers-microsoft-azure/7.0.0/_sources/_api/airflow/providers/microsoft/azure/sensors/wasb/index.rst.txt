:py:mod:`airflow.providers.microsoft.azure.sensors.wasb`
========================================================

.. py:module:: airflow.providers.microsoft.azure.sensors.wasb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor
   airflow.providers.microsoft.azure.sensors.wasb.WasbBlobAsyncSensor
   airflow.providers.microsoft.azure.sensors.wasb.WasbPrefixSensor




.. py:class:: WasbBlobSensor(*, container_name, blob_name, wasb_conn_id = 'wasb_default', check_options = None, public_read = False, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a blob to arrive on Azure Blob Storage.

   :param container_name: Name of the container.
   :param blob_name: Name of the blob.
   :param wasb_conn_id: Reference to the :ref:`wasb connection <howto/connection:wasb>`.
   :param check_options: Optional keyword arguments that
       `WasbHook.check_for_blob()` takes.
   :param deferrable: Run sensor in the deferrable mode.
   :param public_read: whether an anonymous public read access should be used. Default is False

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('container_name', 'blob_name')

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Poll for state of the job run.

      In deferrable mode, the polling is deferred to the triggerer. Otherwise
      the sensor waits synchronously.


   .. py:method:: execute_complete(context, event)

      Callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



.. py:class:: WasbBlobAsyncSensor(**kwargs)


   Bases: :py:obj:`WasbBlobSensor`

   Polls asynchronously for the existence of a blob in a WASB container.

   This class is deprecated and will be removed in a future release.

   Please use :class:`airflow.providers.microsoft.azure.sensors.wasb.WasbBlobSensor`
   and set *deferrable* attribute to *True* instead.

   :param container_name: name of the container in which the blob should be searched for
   :param blob_name: name of the blob to check existence for
   :param wasb_conn_id: the connection identifier for connecting to Azure WASB
   :param poke_interval:  polling period in seconds to check for the status
   :param public_read: whether an anonymous public read access should be used. Default is False
   :param timeout: Time, in seconds before the task times out and fails.


.. py:class:: WasbPrefixSensor(*, container_name, prefix, wasb_conn_id = 'wasb_default', check_options = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for blobs matching a prefix to arrive on Azure Blob Storage.

   :param container_name: Name of the container.
   :param prefix: Prefix of the blob.
   :param wasb_conn_id: Reference to the wasb connection.
   :param check_options: Optional keyword arguments that
       `WasbHook.check_for_prefix()` takes.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('container_name', 'prefix')

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Poll for state of the job run.

      In deferrable mode, the polling is deferred to the triggerer. Otherwise
      the sensor waits synchronously.


   .. py:method:: execute_complete(context, event)

      Callback for when the trigger fires - returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was successful.



