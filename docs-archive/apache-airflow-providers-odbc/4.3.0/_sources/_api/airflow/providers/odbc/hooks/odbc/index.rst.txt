:py:mod:`airflow.providers.odbc.hooks.odbc`
===========================================

.. py:module:: airflow.providers.odbc.hooks.odbc

.. autoapi-nested-parse::

   This module contains ODBC hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.odbc.hooks.odbc.OdbcHook




.. py:class:: OdbcHook(*args, database = None, driver = None, dsn = None, connect_kwargs = None, sqlalchemy_scheme = None, **kwargs)


   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   Interact with odbc data sources using pyodbc.

   To configure driver, in addition to supplying as constructor arg, the following are also supported:
       * set ``driver`` parameter in ``hook_params`` dictionary when instantiating hook by SQL operators.
       * set ``driver`` extra in the connection and set ``allow_driver_in_extra`` to True in
         section ``providers.odbc`` section of airflow config.
       * patch ``OdbcHook.default_driver`` in ``local_settings.py`` file.

   See :doc:`/connections/odbc` for full documentation.

   :param args: passed to DbApiHook
   :param database: database to use -- overrides connection ``schema``
   :param driver: name of driver or path to driver. see above for more info
   :param dsn: name of DSN to use.  overrides DSN supplied in connection ``extra``
   :param connect_kwargs: keyword arguments passed to ``pyodbc.connect``
   :param sqlalchemy_scheme: Scheme sqlalchemy connection.  Default is ``mssql+pyodbc`` Only used for
       ``get_sqlalchemy_engine`` and ``get_sqlalchemy_connection`` methods.
   :param kwargs: passed to DbApiHook

   .. py:property:: connection

      The Connection object with ID ``odbc_conn_id``.


   .. py:property:: database
      :type: str | None

      Database provided in init if exists; otherwise, ``schema`` from ``Connection`` object.


   .. py:property:: sqlalchemy_scheme
      :type: str

      SQLAlchemy scheme either from constructor, connection extras or default.


   .. py:property:: connection_extra_lower
      :type: dict

      ``connection.extra_dejson`` but where keys are converted to lower case.

      This is used internally for case-insensitive access of odbc params.


   .. py:property:: driver
      :type: str | None

      Driver from init param if given; else try to find one in connection extra.


   .. py:property:: dsn
      :type: str | None

      DSN from init param if given; else try to find one in connection extra.


   .. py:property:: odbc_connection_string

      ODBC connection string.

      We build connection string instead of using ``pyodbc.connect`` params
      because, for example, there is no param representing
      ``ApplicationIntent=ReadOnly``.  Any key-value pairs provided in
      ``Connection.extra`` will be added to the connection string.


   .. py:property:: connect_kwargs
      :type: dict

      Effective kwargs to be passed to ``pyodbc.connect``.

      The kwargs are merged from connection extra, ``connect_kwargs``, and
      the hook's init arguments. Values received to the hook precede those
      from the connection.

      If ``attrs_before`` is provided, keys and values are converted to int,
      as required by pyodbc.


   .. py:attribute:: DEFAULT_SQLALCHEMY_SCHEME
      :value: 'mssql+pyodbc'

      

   .. py:attribute:: conn_name_attr
      :value: 'odbc_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'odbc_default'

      

   .. py:attribute:: conn_type
      :value: 'odbc'

      

   .. py:attribute:: hook_name
      :value: 'ODBC'

      

   .. py:attribute:: supports_autocommit
      :value: True

      

   .. py:attribute:: default_driver
      :type: str | None

      

   .. py:method:: get_conn()

      Returns a pyodbc connection object.


   .. py:method:: get_uri()

      URI invoked in :meth:`~airflow.providers.common.sql.hooks.sql.DbApiHook.get_sqlalchemy_engine`.


   .. py:method:: get_sqlalchemy_connection(connect_kwargs = None, engine_kwargs = None)

      SQLAlchemy connection object.



