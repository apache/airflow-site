:py:mod:`airflow.providers.openai.hooks.openai`
===============================================

.. py:module:: airflow.providers.openai.hooks.openai


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openai.hooks.openai.OpenAIHook




.. py:class:: OpenAIHook(conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Use OpenAI SDK to interact with OpenAI APIs.

   .. seealso:: https://platform.openai.com/docs/introduction/overview

   :param conn_id: :ref:`OpenAI connection id <howto/connection:openai>`

   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'openai_default'

      

   .. py:attribute:: conn_type
      :value: 'openai'

      

   .. py:attribute:: hook_name
      :value: 'OpenAI'

      

   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Return custom field behaviour.


   .. py:method:: test_connection()


   .. py:method:: conn()

      Return an OpenAI connection object.


   .. py:method:: get_conn()

      Return an OpenAI connection object.


   .. py:method:: create_chat_completion(messages, model = 'gpt-3.5-turbo', **kwargs)

      Create a model response for the given chat conversation and returns a list of chat completions.

      :param messages: A list of messages comprising the conversation so far
      :param model: ID of the model to use


   .. py:method:: create_assistant(model = 'gpt-3.5-turbo', **kwargs)

      Create an OpenAI assistant using the given model.

      :param model: The OpenAI model for the assistant to use.


   .. py:method:: get_assistant(assistant_id)

      Get an OpenAI assistant.

      :param assistant_id: The ID of the assistant to retrieve.


   .. py:method:: get_assistants(**kwargs)

      Get a list of Assistant objects.


   .. py:method:: modify_assistant(assistant_id, **kwargs)

      Modify an existing Assistant object.

      :param assistant_id: The ID of the assistant to be modified.


   .. py:method:: delete_assistant(assistant_id)

      Delete an OpenAI Assistant for a given ID.

      :param assistant_id: The ID of the assistant to delete.


   .. py:method:: create_thread(**kwargs)

      Create an OpenAI thread.


   .. py:method:: modify_thread(thread_id, metadata)

      Modify an existing Thread object.

      :param thread_id: The ID of the thread to modify. Only the metadata can be modified.
      :param metadata: Set of 16 key-value pairs that can be attached to an object.


   .. py:method:: delete_thread(thread_id)

      Delete an OpenAI thread for a given thread_id.

      :param thread_id: The ID of the thread to delete.


   .. py:method:: create_message(thread_id, role, content, **kwargs)

      Create a message for a given Thread.

      :param thread_id: The ID of the thread to create a message for.
      :param role: The role of the entity that is creating the message. Allowed values include: 'user', 'assistant'.
      :param content: The content of the message.


   .. py:method:: get_messages(thread_id, **kwargs)

      Return a list of messages for a given Thread.

      :param thread_id: The ID of the thread the messages belong to.


   .. py:method:: modify_message(thread_id, message_id, **kwargs)

      Modify an existing message for a given Thread.

      :param thread_id: The ID of the thread to which this message belongs.
      :param message_id: The ID of the message to modify.


   .. py:method:: create_run(thread_id, assistant_id, **kwargs)

      Create a run for a given thread and assistant.

      :param thread_id: The ID of the thread to run.
      :param assistant_id: The ID of the assistant to use to execute this run.


   .. py:method:: create_run_and_poll(thread_id, assistant_id, **kwargs)

      Create a run for a given thread and assistant and then polls until completion.

      :param thread_id: The ID of the thread to run.
      :param assistant_id: The ID of the assistant to use to execute this run.
      :return: An OpenAI Run object


   .. py:method:: get_run(thread_id, run_id)

      Retrieve a run for a given thread and run.

      :param thread_id: The ID of the thread that was run.
      :param run_id: The ID of the run to retrieve.


   .. py:method:: get_runs(thread_id, **kwargs)

      Return a list of runs belonging to a thread.

      :param thread_id: The ID of the thread the run belongs to.


   .. py:method:: modify_run(thread_id, run_id, **kwargs)

      Modify a run on a given thread.

      :param thread_id: The ID of the thread that was run.
      :param run_id: The ID of the run to modify.


   .. py:method:: create_embeddings(text, model = 'text-embedding-ada-002', **kwargs)

      Generate embeddings for the given text using the given model.

      :param text: The text to generate embeddings for.
      :param model: The model to use for generating embeddings.


   .. py:method:: upload_file(file, purpose)

      Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.

      :param file: The File object (not file name) to be uploaded.
      :param purpose: The intended purpose of the uploaded file. Use "fine-tune" for
          Fine-tuning and "assistants" for Assistants and Messages.


   .. py:method:: get_file(file_id)

      Return information about a specific file.

      :param file_id: The ID of the file to use for this request.


   .. py:method:: get_files()

      Return a list of files that belong to the user's organization.


   .. py:method:: delete_file(file_id)

      Delete a file.

      :param file_id: The ID of the file to be deleted.


   .. py:method:: create_vector_store(**kwargs)

      Create a vector store.


   .. py:method:: get_vector_stores(**kwargs)

      Return a list of vector stores.


   .. py:method:: get_vector_store(vector_store_id)

      Retrieve a vector store.

      :param vector_store_id: The ID of the vector store to retrieve.


   .. py:method:: modify_vector_store(vector_store_id, **kwargs)

      Modify a vector store.

      :param vector_store_id: The ID of the vector store to modify.


   .. py:method:: delete_vector_store(vector_store_id)

      Delete a vector store.

      :param vector_store_id: The ID of the vector store to delete.


   .. py:method:: upload_files_to_vector_store(vector_store_id, files)

      Upload files to a vector store and poll until completion.

      :param vector_store_id: The ID of the vector store the files are to be uploaded
          to.
      :param files: A list of binary files to upload.


   .. py:method:: get_vector_store_files(vector_store_id)

      Return a list of vector store files.

      :param vector_store_id:


   .. py:method:: delete_vector_store_file(vector_store_id, file_id)

      Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use delete_file.

      :param vector_store_id: The ID of the vector store that the file belongs to.
      :param file_id: The ID of the file to delete.



