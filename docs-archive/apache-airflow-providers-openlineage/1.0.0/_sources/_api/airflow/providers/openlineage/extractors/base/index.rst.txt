:py:mod:`airflow.providers.openlineage.extractors.base`
=======================================================

.. py:module:: airflow.providers.openlineage.extractors.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.extractors.base.OperatorLineage
   airflow.providers.openlineage.extractors.base.BaseExtractor
   airflow.providers.openlineage.extractors.base.DefaultExtractor




.. py:class:: OperatorLineage

   Structure returned from lineage extraction.

   .. py:attribute:: inputs
      :type: list[openlineage.client.run.Dataset]

      

   .. py:attribute:: outputs
      :type: list[openlineage.client.run.Dataset]

      

   .. py:attribute:: run_facets
      :type: dict[str, openlineage.client.facet.BaseFacet]

      

   .. py:attribute:: job_facets
      :type: dict[str, openlineage.client.facet.BaseFacet]

      


.. py:class:: BaseExtractor(operator)

   Bases: :py:obj:`abc.ABC`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Abstract base extractor class.

   This is used mostly to maintain support for custom extractors.

   .. py:method:: get_operator_classnames()
      :classmethod:
      :abstractmethod:

      Implement this method returning list of operators that extractor works for.
      There are operators which work very similarly and one extractor can cover both.


   .. py:method:: validate()


   .. py:method:: extract()
      :abstractmethod:


   .. py:method:: extract_on_complete(task_instance)



.. py:class:: DefaultExtractor(operator)

   Bases: :py:obj:`BaseExtractor`

   Extractor that uses `get_openlineage_facets_on_start/complete/failure` methods.

   .. py:method:: get_operator_classnames()
      :classmethod:

      Default extractor is chosen not on the classname basis, but
      by existence of get_openlineage_facets method on operator


   .. py:method:: extract()


   .. py:method:: extract_on_complete(task_instance)



