:py:mod:`airflow.providers.openlineage.utils.utils`
===================================================

.. py:module:: airflow.providers.openlineage.utils.utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.utils.InfoJsonEncodable
   airflow.providers.openlineage.utils.utils.DagInfo
   airflow.providers.openlineage.utils.utils.DagRunInfo
   airflow.providers.openlineage.utils.utils.TaskInstanceInfo
   airflow.providers.openlineage.utils.utils.TaskInfo
   airflow.providers.openlineage.utils.utils.TaskGroupInfo
   airflow.providers.openlineage.utils.utils.OpenLineageRedactor



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.utils.openlineage_job_name
   airflow.providers.openlineage.utils.utils.get_operator_class
   airflow.providers.openlineage.utils.utils.to_json_encodable
   airflow.providers.openlineage.utils.utils.url_to_https
   airflow.providers.openlineage.utils.utils.redacted_connection_uri
   airflow.providers.openlineage.utils.utils.get_connection
   airflow.providers.openlineage.utils.utils.get_job_name
   airflow.providers.openlineage.utils.utils.get_custom_facets
   airflow.providers.openlineage.utils.utils.get_airflow_run_facet
   airflow.providers.openlineage.utils.utils.is_json_serializable
   airflow.providers.openlineage.utils.utils.print_warning
   airflow.providers.openlineage.utils.utils.is_source_enabled
   airflow.providers.openlineage.utils.utils.get_filtered_unknown_operator_keys
   airflow.providers.openlineage.utils.utils.normalize_sql



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.utils.log


.. py:data:: log

   

.. py:function:: openlineage_job_name(dag_id, task_id)


.. py:function:: get_operator_class(task)


.. py:function:: to_json_encodable(task)


.. py:function:: url_to_https(url)


.. py:function:: redacted_connection_uri(conn, filtered_params=None, filtered_prefixes=None)

   Return the connection URI for the given Connection.

   This method additionally filters URI by removing query parameters that are known to carry sensitive data
   like username, password, access key.


.. py:function:: get_connection(conn_id)


.. py:function:: get_job_name(task)


.. py:function:: get_custom_facets(task_instance = None)


.. py:class:: InfoJsonEncodable(obj)


   Bases: :py:obj:`dict`

   Airflow objects might not be json-encodable overall.

   The class provides additional attributes to control
   what and how is encoded:

   * renames: a dictionary of attribute name changes
   * | casts: a dictionary consisting of attribute names
     | and corresponding methods that should change
     | object value
   * includes: list of attributes to be included in encoding
   * excludes: list of attributes to be excluded from encoding

   Don't use both includes and excludes.

   .. py:attribute:: renames
      :type: dict[str, str]

      

   .. py:attribute:: casts
      :type: dict[str, Any]

      

   .. py:attribute:: includes
      :type: list[str]
      :value: []

      

   .. py:attribute:: excludes
      :type: list[str]
      :value: []

      


.. py:class:: DagInfo(obj)


   Bases: :py:obj:`InfoJsonEncodable`

   Defines encoding DAG object to JSON.

   .. py:attribute:: includes
      :value: ['dag_id', 'schedule_interval', 'tags', 'start_date']

      

   .. py:attribute:: casts

      

   .. py:attribute:: renames

      


.. py:class:: DagRunInfo(obj)


   Bases: :py:obj:`InfoJsonEncodable`

   Defines encoding DagRun object to JSON.

   .. py:attribute:: includes
      :value: ['conf', 'dag_id', 'data_interval_start', 'data_interval_end', 'external_trigger', 'run_id',...

      


.. py:class:: TaskInstanceInfo(obj)


   Bases: :py:obj:`InfoJsonEncodable`

   Defines encoding TaskInstance object to JSON.

   .. py:attribute:: includes
      :value: ['duration', 'try_number', 'pool']

      

   .. py:attribute:: casts

      


.. py:class:: TaskInfo(obj)


   Bases: :py:obj:`InfoJsonEncodable`

   Defines encoding BaseOperator/AbstractOperator object to JSON.

   .. py:attribute:: renames

      

   .. py:attribute:: excludes
      :value: ['_BaseOperator__instantiated', '_dag', '_hook', '_log', '_outlets', '_inlets',...

      

   .. py:attribute:: casts

      


.. py:class:: TaskGroupInfo(obj)


   Bases: :py:obj:`InfoJsonEncodable`

   Defines encoding TaskGroup object to JSON.

   .. py:attribute:: renames

      

   .. py:attribute:: includes
      :value: ['downstream_group_ids', 'downstream_task_ids', 'prefix_group_id', 'tooltip',...

      


.. py:function:: get_airflow_run_facet(dag_run, dag, task_instance, task, task_uuid)


.. py:class:: OpenLineageRedactor


   Bases: :py:obj:`airflow.utils.log.secrets_masker.SecretsMasker`

   This class redacts sensitive data similar to SecretsMasker in Airflow logs.

   The difference is that our default max recursion depth is way higher - due to
   the structure of OL events we need more depth.
   Additionally, we allow data structures to specify data that needs not to be
   redacted by specifying _skip_redact list by deriving RedactMixin.

   .. py:method:: from_masker(other)
      :classmethod:



.. py:function:: is_json_serializable(item)


.. py:function:: print_warning(log)


.. py:function:: is_source_enabled()


.. py:function:: get_filtered_unknown_operator_keys(operator)


.. py:function:: normalize_sql(sql)


