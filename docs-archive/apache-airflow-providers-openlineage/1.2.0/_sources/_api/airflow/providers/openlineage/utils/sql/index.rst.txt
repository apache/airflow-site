:py:mod:`airflow.providers.openlineage.utils.sql`
=================================================

.. py:module:: airflow.providers.openlineage.utils.sql


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.sql.ColumnIndex
   airflow.providers.openlineage.utils.sql.TableSchema



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.sql.get_table_schemas
   airflow.providers.openlineage.utils.sql.parse_query_result
   airflow.providers.openlineage.utils.sql.create_information_schema_query
   airflow.providers.openlineage.utils.sql.create_filter_clauses



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.utils.sql.TablesHierarchy


.. py:class:: ColumnIndex


   Bases: :py:obj:`enum.IntEnum`

   Enumerates the indices of columns in information schema view.

   .. py:attribute:: SCHEMA
      :value: 0

      

   .. py:attribute:: TABLE_NAME
      :value: 1

      

   .. py:attribute:: COLUMN_NAME
      :value: 2

      

   .. py:attribute:: ORDINAL_POSITION
      :value: 3

      

   .. py:attribute:: UDT_NAME
      :value: 4

      

   .. py:attribute:: DATABASE
      :value: 5

      


.. py:data:: TablesHierarchy

   

.. py:class:: TableSchema


   Temporary object used to construct OpenLineage Dataset.

   .. py:attribute:: table
      :type: str

      

   .. py:attribute:: schema
      :type: str | None

      

   .. py:attribute:: database
      :type: str | None

      

   .. py:attribute:: fields
      :type: list[openlineage.client.facet.SchemaField]

      

   .. py:method:: to_dataset(namespace, database = None, schema = None)



.. py:function:: get_table_schemas(hook, namespace, schema, database, in_query, out_query)

   Query database for table schemas.

   Uses provided hook. Responsibility to provide queries for this function is on particular extractors.
   If query for input or output table isn't provided, the query is skipped.


.. py:function:: parse_query_result(cursor)

   Fetch results from DB-API 2.0 cursor and creates list of table schemas.

   For each row it creates :class:`TableSchema`.


.. py:function:: create_information_schema_query(columns, information_schema_table_name, tables_hierarchy, uppercase_names = False, sqlalchemy_engine = None)

   Creates query for getting table schemas from information schema.


.. py:function:: create_filter_clauses(schema_mapping, information_schema_table, uppercase_names = False)

   Creates comprehensive filter clauses for all tables in one database.

   :param schema_mapping: a dictionary of schema names and list of tables in each
   :param information_schema_table: `sqlalchemy.Table` instance used to construct clauses
       For most SQL dbs it contains `table_name` and `table_schema` columns,
       therefore it is expected the table has them defined.
   :param uppercase_names: if True use schema and table names uppercase


