:py:mod:`tests.system.openlineage.operator`
===========================================

.. py:module:: tests.system.openlineage.operator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   tests.system.openlineage.operator.OpenLineageTestOperator



Functions
~~~~~~~~~

.. autoapisummary::

   tests.system.openlineage.operator.any
   tests.system.openlineage.operator.is_datetime
   tests.system.openlineage.operator.is_uuid
   tests.system.openlineage.operator.env_var
   tests.system.openlineage.operator.not_match
   tests.system.openlineage.operator.url_scheme_authority
   tests.system.openlineage.operator.url_path
   tests.system.openlineage.operator.setup_jinja
   tests.system.openlineage.operator.match



Attributes
~~~~~~~~~~

.. autoapisummary::

   tests.system.openlineage.operator.log


.. py:data:: log

   

.. py:function:: any(result)


.. py:function:: is_datetime(result)


.. py:function:: is_uuid(result)


.. py:function:: env_var(var, default = None)

   Use this jinja method to access the environment variable named 'var'.

   If there is no such environment variable set, return the default.
   If the default is None, raise an exception for an undefined variable.


.. py:function:: not_match(result, pattern)


.. py:function:: url_scheme_authority(url)


.. py:function:: url_path(url)


.. py:function:: setup_jinja()


.. py:function:: match(expected, result, env)

   Check if result is "equal" to expected value.

   Omits keys not specified in expected value and resolves any jinja templates found.


.. py:class:: OpenLineageTestOperator(event_templates = None, file_path = None, env = setup_jinja(), allow_duplicate_events = False, clear_variables = True, **kwargs)


   Bases: :py:obj:`airflow.models.operator.BaseOperator`

   This operator is added for system testing purposes.

   It compares expected event templates set on initialization with ones emitted by OpenLineage integration
   and stored in Variables by VariableTransport.
   :param event_templates: dictionary where key is the key used by VariableTransport in format of <DAG_ID>.<TASK_ID>.event.<EVENT_TYPE>, and value is event template (fragment) that need to be in received events.
   :param file_path: alternatively, file_path pointing to file with event templates will be used
   :param env: jinja environment used to render event templates
   :param allow_duplicate_events: if set to True, allows multiple events for the same key
   :param clear_variables: if set to True, clears all variables after checking events
   :raises: ValueError if the received events do not match with expected ones.

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



