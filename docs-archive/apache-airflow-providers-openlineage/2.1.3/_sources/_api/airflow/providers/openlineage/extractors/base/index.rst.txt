airflow.providers.openlineage.extractors.base
=============================================

.. py:module:: airflow.providers.openlineage.extractors.base


Attributes
----------

.. autoapisummary::

   airflow.providers.openlineage.extractors.base.DatasetSubclass
   airflow.providers.openlineage.extractors.base.BaseFacetSubclass
   airflow.providers.openlineage.extractors.base.OL_METHOD_NAME_START
   airflow.providers.openlineage.extractors.base.OL_METHOD_NAME_COMPLETE
   airflow.providers.openlineage.extractors.base.OL_METHOD_NAME_FAIL


Classes
-------

.. autoapisummary::

   airflow.providers.openlineage.extractors.base.OperatorLineage
   airflow.providers.openlineage.extractors.base.BaseExtractor
   airflow.providers.openlineage.extractors.base.DefaultExtractor


Module Contents
---------------

.. py:data:: DatasetSubclass

.. py:data:: BaseFacetSubclass

.. py:data:: OL_METHOD_NAME_START
   :value: 'get_openlineage_facets_on_start'


.. py:data:: OL_METHOD_NAME_COMPLETE
   :value: 'get_openlineage_facets_on_complete'


.. py:data:: OL_METHOD_NAME_FAIL
   :value: 'get_openlineage_facets_on_failure'


.. py:class:: OperatorLineage

   Bases: :py:obj:`Generic`\ [\ :py:obj:`DatasetSubclass`\ , :py:obj:`BaseFacetSubclass`\ ]


   Structure returned from lineage extraction.


   .. py:attribute:: inputs
      :type:  list[DatasetSubclass]


   .. py:attribute:: outputs
      :type:  list[DatasetSubclass]


   .. py:attribute:: run_facets
      :type:  dict[str, BaseFacetSubclass]


   .. py:attribute:: job_facets
      :type:  dict[str, BaseFacetSubclass]


.. py:class:: BaseExtractor(operator)

   Bases: :py:obj:`abc.ABC`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Abstract base extractor class.

   This is used mostly to maintain support for custom extractors.


   .. py:attribute:: operator


   .. py:method:: get_operator_classnames()
      :classmethod:

      :abstractmethod:


      Get a list of operators that extractor works for.

      This is an abstract method that subclasses should implement. There are
      operators that work very similarly and one extractor can cover.



   .. py:method:: extract()


   .. py:method:: extract_on_complete(task_instance)


   .. py:method:: extract_on_failure(task_instance)


.. py:class:: DefaultExtractor(operator)

   Bases: :py:obj:`BaseExtractor`


   Extractor that uses `get_openlineage_facets_on_start/complete/failure` methods.


   .. py:method:: get_operator_classnames()
      :classmethod:


      Assign this extractor to *no* operators.

      Default extractor is chosen not on the classname basis, but
      by existence of get_openlineage_facets method on operator.



   .. py:method:: extract_on_complete(task_instance)


   .. py:method:: extract_on_failure(task_instance)


