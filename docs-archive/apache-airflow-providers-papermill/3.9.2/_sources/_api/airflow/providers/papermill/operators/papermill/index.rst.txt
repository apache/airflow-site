airflow.providers.papermill.operators.papermill
===============================================

.. py:module:: airflow.providers.papermill.operators.papermill


Classes
-------

.. autoapisummary::

   airflow.providers.papermill.operators.papermill.NoteBook
   airflow.providers.papermill.operators.papermill.PapermillOperator


Module Contents
---------------

.. py:class:: NoteBook

   Bases: :py:obj:`airflow.providers.common.compat.lineage.entities.File`


   Jupyter notebook.


   .. py:attribute:: template_fields
      :type:  ClassVar[collections.abc.Collection[str]]


   .. py:attribute:: type_hint
      :type:  str | None
      :value: 'jupyter_notebook'



   .. py:attribute:: parameters
      :type:  dict | None


   .. py:attribute:: meta_schema
      :type:  str
      :value: 'airflow.providers.papermill.operators.papermill.NoteBook'



.. py:class:: PapermillOperator(*, input_nb = None, output_nb = None, parameters = None, kernel_name = None, language_name = None, kernel_conn_id = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Executes a jupyter notebook through papermill that is annotated with parameters.

   :param input_nb: input notebook, either path or NoteBook inlet.
   :param output_nb: output notebook, either path or NoteBook outlet.
   :param parameters: the notebook parameters to set
   :param kernel_name: (optional) name of kernel to execute the notebook against
       (ignores kernel name in the notebook document metadata)


   .. py:attribute:: supports_lineage
      :value: True



   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('input_nb', 'output_nb', 'parameters', 'kernel_name', 'language_name', 'kernel_conn_id')



   .. py:attribute:: parameters
      :value: None



   .. py:attribute:: input_nb
      :value: None



   .. py:attribute:: output_nb
      :value: None



   .. py:attribute:: kernel_name
      :value: None



   .. py:attribute:: language_name
      :value: None



   .. py:attribute:: kernel_conn_id
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



   .. py:property:: hook
      :type: airflow.providers.papermill.hooks.kernel.KernelHook | None


      Get valid hook.



