:py:mod:`airflow.providers.pinecone.hooks.pinecone`
===================================================

.. py:module:: airflow.providers.pinecone.hooks.pinecone

.. autoapi-nested-parse::

   Hook for Pinecone.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.pinecone.hooks.pinecone.PineconeHook




.. py:class:: PineconeHook(conn_id = default_conn_name, environment = None, region = None)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Pinecone. This hook uses the Pinecone conn_id.

   :param conn_id: Optional, default connection id is `pinecone_default`. The connection id to use when
       connecting to Pinecone.

   .. py:property:: api_key
      :type: str


   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'pinecone_default'

      

   .. py:attribute:: conn_type
      :value: 'pinecone'

      

   .. py:attribute:: hook_name
      :value: 'Pinecone'

      

   .. py:method:: get_connection_form_widgets()
      :classmethod:

      Return connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Return custom field behaviour.


   .. py:method:: environment()


   .. py:method:: region()


   .. py:method:: pinecone_client()

      Pinecone object to interact with Pinecone.


   .. py:method:: conn()


   .. py:method:: test_connection()


   .. py:method:: list_indexes()

      Retrieve a list of all indexes in your project.


   .. py:method:: upsert(index_name, vectors, namespace = '', batch_size = None, show_progress = True, **kwargs)

      Write vectors into a namespace.

      If a new value is upserted for an existing vector id, it will overwrite the previous value.

       .. seealso:: https://docs.pinecone.io/reference/upsert

      To upsert in parallel follow

      .. seealso:: https://docs.pinecone.io/docs/insert-data#sending-upserts-in-parallel

      :param index_name: The name of the index to describe.
      :param vectors: A list of vectors to upsert.
      :param namespace: The namespace to write to. If not specified, the default namespace - "" is used.
      :param batch_size: The number of vectors to upsert in each batch.
      :param show_progress: Whether to show a progress bar using tqdm. Applied only
          if batch_size is provided.


   .. py:method:: get_pod_spec_obj(*, replicas = None, shards = None, pods = None, pod_type = 'p1.x1', metadata_config = None, source_collection = None, environment = None)

      Get a PodSpec object.

      :param replicas: The number of replicas.
      :param shards: The number of shards.
      :param pods: The number of pods.
      :param pod_type: The type of pod.
      :param metadata_config: The metadata configuration.
      :param source_collection: The source collection.
      :param environment: The environment to use when creating the index.


   .. py:method:: get_serverless_spec_obj(*, cloud, region = None)

      Get a ServerlessSpec object.

      :param cloud: The cloud provider.
      :param region: The region to use when creating the index.


   .. py:method:: create_index(index_name, dimension, spec, metric = 'cosine', timeout = None)

      Create a new index.

      :param index_name: The name of the index.
      :param dimension: The dimension of the vectors to be indexed.
      :param spec: Pass a `ServerlessSpec` object to create a serverless index or a `PodSpec` object to create a pod index.
          ``get_serverless_spec_obj`` and ``get_pod_spec_obj`` can be used to create the Spec objects.
      :param metric: The metric to use. Defaults to cosine.
      :param timeout: The timeout to use.


   .. py:method:: describe_index(index_name)

      Retrieve information about a specific index.

      :param index_name: The name of the index to describe.


   .. py:method:: delete_index(index_name, timeout = None)

      Delete a specific index.

      :param index_name: the name of the index.
      :param timeout: Timeout for wait until index gets ready.


   .. py:method:: configure_index(index_name, replicas = None, pod_type = '')

      Change the current configuration of the index.

      :param index_name: The name of the index to configure.
      :param replicas: The new number of replicas.
      :param pod_type: the new pod_type for the index.


   .. py:method:: create_collection(collection_name, index_name)

      Create a new collection from a specified index.

      :param collection_name: The name of the collection to create.
      :param index_name: The name of the source index.


   .. py:method:: delete_collection(collection_name)

      Delete a specific collection.

      :param collection_name: The name of the collection to delete.


   .. py:method:: describe_collection(collection_name)

      Retrieve information about a specific collection.

      :param collection_name: The name of the collection to describe.


   .. py:method:: list_collections()

      Retrieve a list of all collections in the current project.


   .. py:method:: query_vector(index_name, vector, query_id = None, top_k = 10, namespace = None, query_filter = None, include_values = None, include_metadata = None, sparse_vector = None)

      Search a namespace using query vector.

      It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
      API reference: https://docs.pinecone.io/reference/query

      :param index_name: The name of the index to query.
      :param vector: The query vector.
      :param query_id: The unique ID of the vector to be used as a query vector.
      :param top_k: The number of results to return.
      :param namespace: The namespace to fetch vectors from. If not specified, the default namespace is used.
      :param query_filter: The filter to apply. See https://www.pinecone.io/docs/metadata-filtering/
      :param include_values: Whether to include the vector values in the result.
      :param include_metadata: Indicates whether metadata is included in the response as well as the ids.
      :param sparse_vector: sparse values of the query vector. Expected to be either a SparseValues object or a dict
       of the form: {'indices': List[int], 'values': List[float]}, where the lists each have the same length.


   .. py:method:: upsert_data_async(index_name, data, async_req = False, pool_threads = None)

      Upserts (insert/update) data into the Pinecone index.

      :param index_name: Name of the index.
      :param data: List of tuples to be upserted. Each tuple is of form (id, vector, metadata).
                   Metadata is optional.
      :param async_req: If True, upsert operations will be asynchronous.
      :param pool_threads: Number of threads for parallel upserting. If async_req is True, this must be provided.


   .. py:method:: describe_index_stats(index_name, stats_filter = None, **kwargs)

      Describe the index statistics.

      Returns statistics about the index's contents. For example: The vector count per
      namespace and the number of dimensions.
      API reference: https://docs.pinecone.io/reference/describe_index_stats_post

      :param index_name: Name of the index.
      :param stats_filter: If this parameter is present, the operation only returns statistics for vectors that
       satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/



