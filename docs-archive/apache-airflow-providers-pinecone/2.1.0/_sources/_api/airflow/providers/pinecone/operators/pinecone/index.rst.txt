:py:mod:`airflow.providers.pinecone.operators.pinecone`
=======================================================

.. py:module:: airflow.providers.pinecone.operators.pinecone


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.pinecone.operators.pinecone.PineconeIngestOperator
   airflow.providers.pinecone.operators.pinecone.CreatePodIndexOperator
   airflow.providers.pinecone.operators.pinecone.CreateServerlessIndexOperator




.. py:class:: PineconeIngestOperator(*, conn_id = PineconeHook.default_conn_name, index_name, input_vectors, namespace = '', batch_size = None, upsert_kwargs = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Ingest vector embeddings into Pinecone.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:PineconeIngestOperator`

   :param conn_id: The connection id to use when connecting to Pinecone.
   :param index_name: Name of the Pinecone index.
   :param input_vectors: Data to be ingested, in the form of a list of vectors, list of tuples,
       or list of dictionaries.
   :param namespace: The namespace to write to. If not specified, the default namespace is used.
   :param batch_size: The number of vectors to upsert in each batch.
   :param upsert_kwargs: .. seealso:: https://docs.pinecone.io/reference/upsert

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('index_name', 'input_vectors', 'namespace')

      

   .. py:method:: hook()

      Return an instance of the PineconeHook.


   .. py:method:: execute(context)

      Ingest data into Pinecone using the PineconeHook.



.. py:class:: CreatePodIndexOperator(*, conn_id = PineconeHook.default_conn_name, index_name, dimension, environment = None, replicas = None, shards = None, pods = None, pod_type = 'p1.x1', metadata_config = None, source_collection = None, metric = 'cosine', timeout = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Create a pod based index in Pinecone.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CreatePodIndexOperator`

   :param conn_id: The connection id to use when connecting to Pinecone.
   :param index_name: Name of the Pinecone index.
   :param dimension: The dimension of the vectors to be indexed.
   :param environment: The environment to use when creating the index.
   :param replicas: The number of replicas to use.
   :param shards: The number of shards to use.
   :param pods: The number of pods to use.
   :param pod_type: The type of pod to use. Defaults to p1.x1
   :param metadata_config: The metadata configuration to use.
   :param source_collection: The source collection to use.
   :param metric: The metric to use. Defaults to cosine.
   :param timeout: The timeout to use.

   .. py:method:: hook()


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CreateServerlessIndexOperator(*, conn_id = PineconeHook.default_conn_name, index_name, dimension, cloud, region = None, metric = None, timeout = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Create a serverless index in Pinecone.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CreateServerlessIndexOperator`

   :param conn_id: The connection id to use when connecting to Pinecone.
   :param index_name: Name of the Pinecone index.
   :param dimension: The dimension of the vectors to be indexed.
   :param cloud: The cloud to use when creating the index.
   :param region: The region to use when creating the index.
   :param metric: The metric to use.
   :param timeout: The timeout to use.

   .. py:method:: hook()


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



