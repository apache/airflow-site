airflow.providers.salesforce.operators.bulk
===========================================

.. py:module:: airflow.providers.salesforce.operators.bulk


Classes
-------

.. autoapisummary::

   airflow.providers.salesforce.operators.bulk.SalesforceBulkOperator


Module Contents
---------------

.. py:class:: SalesforceBulkOperator(*, operation, object_name, payload, external_id_field = 'Id', batch_size = 10000, use_serial = False, salesforce_conn_id = 'salesforce_default', **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Execute a Salesforce Bulk API and pushes results to xcom.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SalesforceBulkOperator`

   :param operation: Bulk operation to be performed
       Available operations are in ['insert', 'update', 'upsert', 'delete', 'hard_delete']
   :param object_name: The name of the Salesforce object
   :param payload: list of dict to be passed as a batch
   :param external_id_field: unique identifier field for upsert operations
   :param batch_size: number of records to assign for each batch in the job
   :param use_serial: Process batches in serial mode
   :param salesforce_conn_id: The :ref:`Salesforce Connection id <howto/connection:SalesforceHook>`.


   .. py:attribute:: available_operations
      :value: ('insert', 'update', 'upsert', 'delete', 'hard_delete')



   .. py:attribute:: operation


   .. py:attribute:: object_name


   .. py:attribute:: payload


   .. py:attribute:: external_id_field
      :value: 'Id'



   .. py:attribute:: batch_size
      :value: 10000



   .. py:attribute:: use_serial
      :value: False



   .. py:attribute:: salesforce_conn_id
      :value: 'salesforce_default'



   .. py:method:: execute(context)

      Make an HTTP request to Salesforce Bulk API.

      :param context: The task context during execution.
      :return: API response if do_xcom_push is True



