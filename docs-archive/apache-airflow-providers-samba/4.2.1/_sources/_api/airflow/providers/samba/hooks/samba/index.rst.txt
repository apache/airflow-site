:py:mod:`airflow.providers.samba.hooks.samba`
=============================================

.. py:module:: airflow.providers.samba.hooks.samba


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.samba.hooks.samba.SambaHook




.. py:class:: SambaHook(samba_conn_id = default_conn_name, share = None)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Allows for interaction with a Samba server.

   The hook should be used as a context manager in order to correctly
   set up a session and disconnect open connections upon exit.

   :param samba_conn_id: The connection id reference.
   :param share:
       An optional share name. If this is unset then the "schema" field of
       the connection is used in its place.

   .. py:attribute:: conn_name_attr
      :value: 'samba_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'samba_default'

      

   .. py:attribute:: conn_type
      :value: 'samba'

      

   .. py:attribute:: hook_name
      :value: 'Samba'

      

   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_value, traceback)


   .. py:method:: link(src, dst, follow_symlinks=True)


   .. py:method:: listdir(path)


   .. py:method:: lstat(path)


   .. py:method:: makedirs(path, exist_ok=False)


   .. py:method:: mkdir(path)


   .. py:method:: open_file(path, mode='r', buffering=-1, encoding=None, errors=None, newline=None, share_access=None, desired_access=None, file_attributes=None, file_type='file')


   .. py:method:: readlink(path)


   .. py:method:: remove(path)


   .. py:method:: removedirs(path)


   .. py:method:: rename(src, dst)


   .. py:method:: replace(src, dst)


   .. py:method:: rmdir(path)


   .. py:method:: scandir(path, search_pattern='*')


   .. py:method:: stat(path, follow_symlinks=True)


   .. py:method:: stat_volume(path)


   .. py:method:: symlink(src, dst, target_is_directory=False)


   .. py:method:: truncate(path, length)


   .. py:method:: unlink(path)


   .. py:method:: utime(path, times=None, ns=None, follow_symlinks=True)


   .. py:method:: walk(path, topdown=True, onerror=None, follow_symlinks=False)


   .. py:method:: getxattr(path, attribute, follow_symlinks=True)


   .. py:method:: listxattr(path, follow_symlinks=True)


   .. py:method:: removexattr(path, attribute, follow_symlinks=True)


   .. py:method:: setxattr(path, attribute, value, flags=0, follow_symlinks=True)


   .. py:method:: push_from_local(destination_filepath, local_filepath)

      Push local file to samba server.



