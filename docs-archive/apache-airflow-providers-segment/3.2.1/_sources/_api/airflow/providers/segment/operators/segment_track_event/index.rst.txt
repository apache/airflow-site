:py:mod:`airflow.providers.segment.operators.segment_track_event`
=================================================================

.. py:module:: airflow.providers.segment.operators.segment_track_event


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.segment.operators.segment_track_event.SegmentTrackEventOperator




.. py:class:: SegmentTrackEventOperator(*, user_id, event, properties = None, segment_conn_id = 'segment_default', segment_debug_mode = False, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Send Track Event to Segment for a specified user_id and event.

   :param user_id: The ID for this user in your database. (templated)
   :param event: The name of the event you're tracking. (templated)
   :param properties: A dictionary of properties for the event. (templated)
   :param segment_conn_id: The connection ID to use when connecting to Segment.
   :param segment_debug_mode: Determines whether Segment should run in debug mode.
       Defaults to False

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('user_id', 'event', 'properties')

      

   .. py:attribute:: ui_color
      :value: '#ffd700'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



