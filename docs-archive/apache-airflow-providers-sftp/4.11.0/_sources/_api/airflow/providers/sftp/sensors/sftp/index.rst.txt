:py:mod:`airflow.providers.sftp.sensors.sftp`
=============================================

.. py:module:: airflow.providers.sftp.sensors.sftp

.. autoapi-nested-parse::

   This module contains SFTP sensor.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.sftp.sensors.sftp.SFTPSensor




.. py:class:: SFTPSensor(*, path, file_pattern = '', newer_than = None, sftp_conn_id = 'sftp_default', python_callable = None, op_args = None, op_kwargs = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a file or directory to be present on SFTP.

   :param path: Remote file or directory path
   :param file_pattern: The pattern that will be used to match the file (fnmatch format)
   :param sftp_conn_id: The connection to run the sensor against
   :param newer_than: DateTime for which the file or file path should be newer than, comparison is inclusive
   :param deferrable: If waiting for completion, whether to defer the task until done, default is ``False``.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('path', 'newer_than')

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)

      Execute callback when the trigger fires; returns immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.



