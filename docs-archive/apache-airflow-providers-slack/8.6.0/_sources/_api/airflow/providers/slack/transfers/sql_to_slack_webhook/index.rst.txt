:py:mod:`airflow.providers.slack.transfers.sql_to_slack_webhook`
================================================================

.. py:module:: airflow.providers.slack.transfers.sql_to_slack_webhook


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.slack.transfers.sql_to_slack_webhook.SqlToSlackWebhookOperator




.. py:class:: SqlToSlackWebhookOperator(*, sql, sql_conn_id, slack_webhook_conn_id = None, sql_hook_params = None, slack_channel = None, slack_message, results_df_name = 'results_df', parameters = None, **kwargs)


   Bases: :py:obj:`airflow.providers.slack.transfers.base_sql_to_slack.BaseSqlToSlackOperator`

   Executes an SQL statement in a given SQL connection and sends the results to Slack Incoming Webhook.

   The results of the query are rendered into the 'slack_message' parameter as a Pandas
   dataframe using a JINJA variable called '{{ results_df }}'. The 'results_df' variable
   name can be changed by specifying a different 'results_df_name' parameter. The Tabulate
   library is added to the JINJA environment as a filter to allow the dataframe to be
   rendered nicely. For example, set 'slack_message' to {{ results_df |
   tabulate(tablefmt="pretty", headers="keys") }} to send the results to Slack as an ascii
   rendered table.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SqlToSlackWebhookOperator`

   .. note::
       You cannot override the default channel (chosen by the user who installed your app),
       Instead, these values will always inherit from the associated Slack App configuration
       (`link <https://api.slack.com/messaging/webhooks#advanced_message_formatting>`_).
       It is possible to change this values only in `Legacy Slack Integration Incoming Webhook
       <https://api.slack.com/legacy/custom-integrations/messaging/webhooks#legacy-customizations>`_.

   .. warning::
       This hook intend to use `Slack Incoming Webhook` connection
       and might not work correctly with `Slack API` connection.

   :param sql: The SQL query to be executed (templated)
   :param slack_message: The templated Slack message to send with the data returned from the SQL connection.
       You can use the default JINJA variable {{ results_df }} to access the pandas dataframe containing the
       SQL results
   :param sql_conn_id: reference to a specific database.
   :param sql_hook_params: Extra config params to be passed to the underlying hook.
          Should match the desired hook constructor params.
   :param slack_webhook_conn_id: :ref:`Slack Incoming Webhook <howto/connection:slack>`
       connection id that has Incoming Webhook token in the password field.
   :param slack_channel: The channel to send message.
   :param results_df_name: The name of the JINJA template's dataframe variable, default is 'results_df'
   :param parameters: The parameters to pass to the SQL query

   .. py:property:: slack_conn_id


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('sql', 'slack_message')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.sql', '.jinja', '.j2')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: times_rendered
      :value: 0

      

   .. py:method:: render_template_fields(context, jinja_env=None)

      Template all attributes listed in *self.template_fields*.

      This mutates the attributes in-place and is irreversible.

      :param context: Context dict with values to apply on content.
      :param jinja_env: Jinja's environment to use for rendering.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



