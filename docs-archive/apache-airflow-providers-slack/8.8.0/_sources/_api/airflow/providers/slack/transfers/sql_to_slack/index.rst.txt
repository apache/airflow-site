:py:mod:`airflow.providers.slack.transfers.sql_to_slack`
========================================================

.. py:module:: airflow.providers.slack.transfers.sql_to_slack


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.slack.transfers.sql_to_slack.SqlToSlackApiFileOperator
   airflow.providers.slack.transfers.sql_to_slack.SqlToSlackOperator




.. py:class:: SqlToSlackApiFileOperator(*, sql, sql_conn_id, sql_hook_params = None, parameters = None, slack_conn_id = SlackHook.default_conn_name, slack_filename, slack_channels = None, slack_initial_comment = None, slack_title = None, slack_base_url = None, slack_method_version = 'v2', df_kwargs = None, action_on_empty_df = 'send', **kwargs)


   Bases: :py:obj:`airflow.providers.slack.transfers.base_sql_to_slack.BaseSqlToSlackOperator`

   Executes an SQL statement in a given SQL connection and sends the results to Slack API as file.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SqlToSlackApiFileOperator`

   :param sql: The SQL query to be executed
   :param sql_conn_id: reference to a specific DB-API Connection.
   :param slack_conn_id: :ref:`Slack API Connection <howto/connection:slack>`.
   :param slack_filename: Filename for display in slack.
       Should contain supported extension which referenced to ``SUPPORTED_FILE_FORMATS``.
       It is also possible to set compression in extension:
       ``filename.csv.gzip``, ``filename.json.zip``, etc.
   :param sql_hook_params: Extra config params to be passed to the underlying hook.
       Should match the desired hook constructor params.
   :param parameters: The parameters to pass to the SQL query.
   :param slack_channels: Comma-separated list of channel names or IDs where the file will be shared.
        If omitting this parameter, then file will send to workspace.
   :param slack_initial_comment: The message text introducing the file in specified ``slack_channels``.
   :param slack_title: Title of file.
   :param slack_base_url: A string representing the Slack API base URL. Optional
   :param slack_method_version: The version of the Slack SDK Client method to be used, either "v1" or "v2".
   :param df_kwargs: Keyword arguments forwarded to ``pandas.DataFrame.to_{format}()`` method.
   :param action_on_empty_df: Specifying how to handle an empty sql output df. Possible values:

       - ``send``: (default) send the slack with an empty file.
       - ``skip``: skip sending the slack message. Task state set to "skipped".
       - ``error``: raise an error to fail the task. Task state set to "failed".

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('sql', 'slack_channels', 'slack_filename', 'slack_initial_comment', 'slack_title')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.sql', '.jinja', '.j2')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: SUPPORTED_FILE_FORMATS
      :type: Sequence[str]
      :value: ('csv', 'json', 'html')

      

   .. py:method:: slack_hook()

      Slack API Hook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SqlToSlackOperator(*args, **kwargs)


   Bases: :py:obj:`airflow.providers.slack.transfers.sql_to_slack_webhook.SqlToSlackWebhookOperator`

   Executes an SQL statement in a given SQL connection and sends the results to Slack Incoming Webhook.

   Deprecated, use :class:`airflow.providers.slack.transfers.sql_to_slack_webhook.SqlToSlackWebhookOperator`


