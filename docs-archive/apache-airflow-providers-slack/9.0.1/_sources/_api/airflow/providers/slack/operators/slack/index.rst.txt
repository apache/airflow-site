airflow.providers.slack.operators.slack
=======================================

.. py:module:: airflow.providers.slack.operators.slack


Classes
-------

.. autoapisummary::

   airflow.providers.slack.operators.slack.SlackAPIOperator
   airflow.providers.slack.operators.slack.SlackAPIPostOperator
   airflow.providers.slack.operators.slack.SlackAPIFileOperator


Module Contents
---------------

.. py:class:: SlackAPIOperator(*, slack_conn_id = SlackHook.default_conn_name, method, api_params = None, base_url = None, proxy = None, timeout = None, retry_handlers = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Base Slack Operator class.

   :param slack_conn_id: :ref:`Slack API Connection <howto/connection:slack>`
       which its password is Slack API token.
   :param method: The Slack API Method to Call (https://api.slack.com/methods).
   :param api_params: API Method call parameters (https://api.slack.com/methods). Optional
   :param timeout: The maximum number of seconds the client will wait to connect
       and receive a response from Slack. Optional
   :param base_url: A string representing the Slack API base URL. Optional
   :param proxy: Proxy to make the Slack API call. Optional
   :param retry_handlers: List of handlers to customize retry logic in ``slack_sdk.WebClient``. Optional


   .. py:attribute:: slack_conn_id
      :value: 'slack_api_default'



   .. py:attribute:: method


   .. py:attribute:: api_params
      :value: None



   .. py:attribute:: base_url
      :value: None



   .. py:attribute:: timeout
      :value: None



   .. py:attribute:: proxy
      :value: None



   .. py:attribute:: retry_handlers
      :value: None



   .. py:property:: hook
      :type: airflow.providers.slack.hooks.slack.SlackHook


      Slack Hook.



   .. py:method:: construct_api_call_params()
      :abstractmethod:


      Construct API call parameters used by the execute function.

      Allow templating on the source fields of the ``api_call_params`` dict
      before construction.

      Child classes should override this. Each SlackAPIOperator child class is
      responsible for having function set ``self.api_call_params`` with a dict
      of API call parameters (https://api.slack.com/methods)



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SlackAPIPostOperator(channel = '#general', username = 'Airflow', text = 'No message has been set.\nHere is a cat video instead\nhttps://www.youtube.com/watch?v=J---aiyznGQ', icon_url = 'https://raw.githubusercontent.com/apache/airflow/main/airflow/www/static/pin_100.png', blocks = None, attachments = None, **kwargs)

   Bases: :py:obj:`SlackAPIOperator`


   Post messages to a Slack channel.

   .. code-block:: python

       slack = SlackAPIPostOperator(
           task_id="post_hello",
           dag=dag,
           text="hello there!",
           channel="#random",
       )

   :param channel: channel in which to post message on slack name (#general) or
       ID (C12318391). (templated)
   :param username: Username that airflow will be posting to Slack as. (templated)
   :param text: message to send to slack. (templated)
   :param icon_url: URL to icon used for this message
   :param blocks: A list of blocks to send with the message. (templated)
       See https://api.slack.com/reference/block-kit/blocks
   :param attachments: (legacy) A list of attachments to send with the message. (templated)
       See https://api.slack.com/docs/attachments


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('username', 'text', 'attachments', 'blocks', 'channel')



   .. py:attribute:: ui_color
      :value: '#FFBA40'



   .. py:attribute:: channel
      :value: '#general'



   .. py:attribute:: username
      :value: 'Airflow'



   .. py:attribute:: text
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """No message has been set.
         Here is a cat video instead
         https://www.youtube.com/watch?v=J---aiyznGQ"""

      .. raw:: html

         </details>




   .. py:attribute:: icon_url
      :value: 'https://raw.githubusercontent.com/apache/airflow/main/airflow/www/static/pin_100.png'



   .. py:attribute:: attachments
      :value: []



   .. py:attribute:: blocks
      :value: []



   .. py:method:: construct_api_call_params()

      Construct API call parameters used by the execute function.

      Allow templating on the source fields of the ``api_call_params`` dict
      before construction.

      Child classes should override this. Each SlackAPIOperator child class is
      responsible for having function set ``self.api_call_params`` with a dict
      of API call parameters (https://api.slack.com/methods)



.. py:class:: SlackAPIFileOperator(channels = None, initial_comment = None, filename = None, filetype = None, content = None, title = None, method_version = 'v2', snippet_type = None, **kwargs)

   Bases: :py:obj:`SlackAPIOperator`


   Send a file to a Slack channel.

   .. code-block:: python

       # Send file with filename and filetype
       slack_operator_file = SlackAPIFileOperator(
           task_id="slack_file_upload_1",
           dag=dag,
           slack_conn_id="slack",
           channels="#general,#random",
           initial_comment="Hello World!",
           filename="/files/dags/test.txt",
           filetype="txt",
       )

       # Send file content
       slack_operator_file_content = SlackAPIFileOperator(
           task_id="slack_file_upload_2",
           dag=dag,
           slack_conn_id="slack",
           channels="#general",
           initial_comment="Hello World!",
           content="file content in txt",
       )

   :param channels: Comma-separated list of channel names or IDs where the file will be shared.
       If set this argument to None, then file will send to associated workspace. (templated)
   :param initial_comment: message to send to slack. (templated)
   :param filename: name of the file (templated)
   :param filetype: slack filetype. (templated) See: https://api.slack.com/types/file#file_types
   :param content: file content. (templated)
   :param title: title of file. (templated)
   :param snippet_type: Syntax type for the snippet being uploaded.(templated)
   :param method_version: The version of the method of Slack SDK Client to be used, either "v1" or "v2".


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('channels', 'initial_comment', 'filename', 'filetype', 'content', 'title', 'snippet_type')



   .. py:attribute:: ui_color
      :value: '#44BEDF'



   .. py:attribute:: channels
      :value: None



   .. py:attribute:: initial_comment
      :value: None



   .. py:attribute:: filename
      :value: None



   .. py:attribute:: filetype
      :value: None



   .. py:attribute:: content
      :value: None



   .. py:attribute:: title
      :value: None



   .. py:attribute:: method_version
      :value: 'v2'



   .. py:attribute:: snippet_type
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



