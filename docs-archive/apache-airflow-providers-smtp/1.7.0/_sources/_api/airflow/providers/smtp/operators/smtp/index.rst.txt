:py:mod:`airflow.providers.smtp.operators.smtp`
===============================================

.. py:module:: airflow.providers.smtp.operators.smtp


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.smtp.operators.smtp.EmailOperator




.. py:class:: EmailOperator(*, to, subject, html_content, from_email = None, files = None, cc = None, bcc = None, mime_subtype = 'mixed', mime_charset = 'utf-8', conn_id = 'smtp_default', custom_headers = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Sends an email.

   :param to: list of emails to send the email to. (templated)
   :param from_email: email to send from. (templated)
   :param subject: subject line for the email. (templated)
   :param html_content: content of the email, html markup
       is allowed. (templated)
   :param files: file names to attach in email (templated)
   :param cc: list of recipients to be added in CC field (templated)
   :param bcc: list of recipients to be added in BCC field (templated)
   :param mime_subtype: MIME sub content type
   :param mime_charset: character set parameter added to the Content-Type
       header.
   :param custom_headers: additional headers to add to the MIME message.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('to', 'from_email', 'subject', 'html_content', 'files', 'cc', 'bcc')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.html',)

      

   .. py:attribute:: ui_color
      :value: '#e6faf9'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



