airflow.providers.smtp.operators.smtp
=====================================

.. py:module:: airflow.providers.smtp.operators.smtp


Classes
-------

.. autoapisummary::

   airflow.providers.smtp.operators.smtp.EmailOperator


Module Contents
---------------

.. py:class:: EmailOperator(*, to, subject = None, html_content = None, from_email = None, files = None, cc = None, bcc = None, mime_subtype = 'mixed', mime_charset = 'utf-8', conn_id = 'smtp_default', custom_headers = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`


   Sends an email.

   :param to: list of emails to send the email to. (templated)
   :param from_email: email to send from. (templated)
   :param subject: subject line for the email. (templated)
   :param html_content: content of the email, html markup
       is allowed. (templated)
   :param files: file names to attach in email (templated)
   :param cc: list of recipients to be added in CC field (templated)
   :param bcc: list of recipients to be added in BCC field (templated)
   :param mime_subtype: MIME sub content type
   :param mime_charset: character set parameter added to the Content-Type
       header.
   :param custom_headers: additional headers to add to the MIME message.


   .. py:attribute:: template_fields
      :type:  collections.abc.Sequence[str]
      :value: ('to', 'from_email', 'subject', 'html_content', 'files', 'cc', 'bcc')



   .. py:attribute:: template_fields_renderers


   .. py:attribute:: template_ext
      :type:  collections.abc.Sequence[str]
      :value: ('.html',)



   .. py:attribute:: ui_color
      :value: '#e6faf9'



   .. py:attribute:: to


   .. py:attribute:: subject
      :value: None



   .. py:attribute:: html_content
      :value: None



   .. py:attribute:: from_email
      :value: None



   .. py:attribute:: files
      :value: []



   .. py:attribute:: cc
      :value: None



   .. py:attribute:: bcc
      :value: None



   .. py:attribute:: mime_subtype
      :value: 'mixed'



   .. py:attribute:: mime_charset
      :value: 'utf-8'



   .. py:attribute:: conn_id
      :value: 'smtp_default'



   .. py:attribute:: custom_headers
      :value: None



   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



