airflow.providers.standard.utils.skipmixin
==========================================

.. py:module:: airflow.providers.standard.utils.skipmixin


Attributes
----------

.. autoapisummary::

   airflow.providers.standard.utils.skipmixin.XCOM_SKIPMIXIN_KEY
   airflow.providers.standard.utils.skipmixin.XCOM_SKIPMIXIN_SKIPPED
   airflow.providers.standard.utils.skipmixin.XCOM_SKIPMIXIN_FOLLOWED


Classes
-------

.. autoapisummary::

   airflow.providers.standard.utils.skipmixin.SkipMixin


Module Contents
---------------

.. py:data:: XCOM_SKIPMIXIN_KEY
   :value: 'skipmixin_key'


.. py:data:: XCOM_SKIPMIXIN_SKIPPED
   :value: 'skipped'


.. py:data:: XCOM_SKIPMIXIN_FOLLOWED
   :value: 'followed'


.. py:class:: SkipMixin(context=None)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   A Mixin to skip Tasks Instances.


   .. py:method:: skip(ti, tasks)

      Set tasks instances to skipped from the same dag run.

      If this instance has a `task_id` attribute, store the list of skipped task IDs to XCom
      so that NotPreviouslySkippedDep knows these tasks should be skipped when they
      are cleared.

      :param ti: the task instance for which to set the tasks to skipped
      :param tasks: tasks to skip (not task_ids)



   .. py:method:: skip_all_except(ti, branch_task_ids)

      Implement the logic for a branching operator.

      Given a single task ID or list of task IDs to follow, this skips all other tasks
      immediately downstream of this operator.

      branch_task_ids is stored to XCom so that NotPreviouslySkippedDep knows skipped tasks or
      newly added tasks should be skipped when they are cleared.



