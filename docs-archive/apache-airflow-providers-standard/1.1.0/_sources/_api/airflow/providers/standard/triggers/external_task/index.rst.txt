airflow.providers.standard.triggers.external_task
=================================================

.. py:module:: airflow.providers.standard.triggers.external_task


Classes
-------

.. autoapisummary::

   airflow.providers.standard.triggers.external_task.WorkflowTrigger
   airflow.providers.standard.triggers.external_task.DagStateTrigger


Module Contents
---------------

.. py:class:: WorkflowTrigger(external_dag_id, run_ids = None, execution_dates = None, logical_dates = None, external_task_ids = None, external_task_group_id = None, failed_states = None, skipped_states = None, allowed_states = None, poke_interval = 2.0, soft_fail = False, **kwargs)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   A trigger to monitor tasks, task group and dag execution in Apache Airflow.

   :param external_dag_id: The ID of the external dag.
   :param run_ids: A list of run ids for the external dag.
   :param external_task_ids: A collection of external task IDs to wait for.
   :param external_task_group_id: The ID of the external task group to wait for.
   :param failed_states: States considered as failed for external tasks.
   :param skipped_states: States considered as skipped for external tasks.
   :param allowed_states: States considered as successful for external tasks.
   :param poke_interval: The interval (in seconds) for poking the external tasks.
   :param soft_fail: If True, the trigger will not fail the entire dag on external task failure.
   :param logical_dates: A list of logical dates for the external dag.


   .. py:attribute:: external_dag_id


   .. py:attribute:: external_task_ids
      :value: None



   .. py:attribute:: external_task_group_id
      :value: None



   .. py:attribute:: failed_states
      :value: None



   .. py:attribute:: skipped_states
      :value: None



   .. py:attribute:: allowed_states
      :value: None



   .. py:attribute:: run_ids
      :value: None



   .. py:attribute:: poke_interval
      :value: 2.0



   .. py:attribute:: soft_fail
      :value: False



   .. py:attribute:: execution_dates
      :value: None



   .. py:attribute:: logical_dates
      :value: None



   .. py:method:: serialize()

      Serialize the trigger param and module path.



   .. py:method:: run()
      :async:


      Check periodically tasks, task group or dag status.



.. py:class:: DagStateTrigger(dag_id, states, run_ids = None, execution_dates = None, poll_interval = 5.0)

   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`


   Waits asynchronously for a dag to complete for a specific run_id.

   :param dag_id: The dag_id that contains the task you want to wait for
   :param states: allowed states, default is ``['success']``
   :param run_ids: The run_id of dag run.
   :param poll_interval: The time interval in seconds to check the state.
       The default value is 5.0 sec.


   .. py:attribute:: dag_id


   .. py:attribute:: states


   .. py:attribute:: run_ids
      :value: None



   .. py:attribute:: execution_dates
      :value: None



   .. py:attribute:: poll_interval
      :value: 5.0



   .. py:method:: serialize()

      Serialize DagStateTrigger arguments and classpath.



   .. py:method:: run()
      :async:


      Check periodically if the dag run exists, and has hit one of the states yet, or not.



   .. py:method:: validate_count_dags_af_3(runs_ids_or_dates_len = 0)
      :async:



   .. py:method:: count_dags(*, session = NEW_SESSION)

      Count how many dag runs in the database match our criteria.



