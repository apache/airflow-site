:py:mod:`airflow.providers.teradata.transfers.s3_to_teradata`
=============================================================

.. py:module:: airflow.providers.teradata.transfers.s3_to_teradata


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.teradata.transfers.s3_to_teradata.S3ToTeradataOperator




.. py:class:: S3ToTeradataOperator(*, s3_source_key, public_bucket = False, teradata_table, aws_conn_id = 'aws_default', teradata_conn_id = 'teradata_default', teradata_authorization_name = '', **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Loads CSV, JSON and Parquet format data from Amazon S3 to Teradata.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:S3ToTeradataOperator`

   :param s3_source_key: The URI format specifying the location of the S3 bucket.(templated)
       The URI format is /s3/YOUR-BUCKET.s3.amazonaws.com/YOUR-BUCKET-NAME.
       Refer to
       https://docs.teradata.com/search/documents?query=native+object+store&sort=last_update&virtual-field=title_only&content-lang=en-US
   :param public_bucket: Specifies whether the provided S3 bucket is public. If the bucket is public,
       it means that anyone can access the objects within it via a URL without requiring authentication.
       If the bucket is private and authentication is not provided, the operator will throw an exception.
   :param teradata_table: The name of the teradata table to which the data is transferred.(templated)
   :param aws_conn_id: The Airflow AWS connection used for AWS credentials.
   :param teradata_conn_id: The connection ID used to connect to Teradata
       :ref:`Teradata connection <howto/connection:Teradata>`.
   :param teradata_authorization_name: The name of Teradata Authorization Database Object,
       is used to control who can access an S3 object store.
       Refer to
       https://docs.teradata.com/r/Enterprise_IntelliFlex_VMware/Teradata-VantageTM-Native-Object-Store-Getting-Started-Guide-17.20/Setting-Up-Access/Controlling-Foreign-Table-Access-with-an-AUTHORIZATION-Object

   Note that ``s3_source_key`` and ``teradata_table`` are
   templated, so you can use variables in them if you wish.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('s3_source_key', 'teradata_table')

      

   .. py:attribute:: ui_color
      :value: '#e07c24'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



