:py:mod:`airflow.providers.trino.operators.trino`
=================================================

.. py:module:: airflow.providers.trino.operators.trino

.. autoapi-nested-parse::

   This module contains the Trino operator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.trino.operators.trino.TrinoOperator




.. py:class:: TrinoOperator(*, sql, trino_conn_id = 'trino_default', autocommit = False, parameters = None, handler = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes sql code using a specific Trino query Engine.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:TrinoOperator`

   :param sql: the SQL code to be executed as a single string, or
       a list of str (sql statements), or a reference to a template file.
   :param trino_conn_id: id of the connection config for the target Trino
       environment
   :param autocommit: What to set the connection's autocommit setting to
       before executing the query
   :param handler: The result handler which is called with the result of each statement.
   :param parameters: (optional) the parameters to render the SQL query with.

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sql']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = ['.sql']

      

   .. py:attribute:: ui_color
      :annotation: = #ededed

      

   .. py:method:: get_hook(self)

      Get Trino hook


   .. py:method:: execute(self, context)

      Execute Trino SQL


   .. py:method:: on_kill(self)

      Override this method to cleanup subprocesses when a task instance
      gets killed. Any use of the threading, subprocess or multiprocessing
      module within an operator needs to be cleaned up or it will leave
      ghost processes behind.



