:py:mod:`airflow.providers.trino.hooks.trino`
=============================================

.. py:module:: airflow.providers.trino.hooks.trino


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.trino.hooks.trino.TrinoHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.trino.hooks.trino.generate_trino_client_info



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.trino.hooks.trino.T


.. py:data:: T

   

.. py:function:: generate_trino_client_info()

   Return json string with dag_id, task_id, execution_date and try_number.


.. py:exception:: TrinoException


   Bases: :py:obj:`Exception`

   Trino exception.


.. py:class:: TrinoHook(*args, schema = None, log_sql = True, **kwargs)


   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   Interact with Trino through trino package.

   >>> ph = TrinoHook()
   >>> sql = "SELECT count(1) AS num FROM airflow.static_babynames"
   >>> ph.get_records(sql)
   [[340698]]

   .. py:attribute:: conn_name_attr
      :value: 'trino_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'trino_default'

      

   .. py:attribute:: conn_type
      :value: 'trino'

      

   .. py:attribute:: hook_name
      :value: 'Trino'

      

   .. py:attribute:: query_id
      :value: ''

      

   .. py:attribute:: placeholder
      :value: '?'

      

   .. py:method:: get_conn()

      Returns a connection object.


   .. py:method:: get_isolation_level()

      Returns an isolation level.


   .. py:method:: get_records(sql = '', parameters = None)

      Execute the sql and return a set of records.

      :param sql: the sql statement to be executed (str) or a list of sql statements to execute
      :param parameters: The parameters to render the SQL query with.


   .. py:method:: get_first(sql = '', parameters = None)

      Execute the sql and return the first resulting row.

      :param sql: the sql statement to be executed (str) or a list of sql statements to execute
      :param parameters: The parameters to render the SQL query with.


   .. py:method:: get_pandas_df(sql = '', parameters = None, **kwargs)

      Execute the sql and returns a pandas dataframe.

      :param sql: the sql statement to be executed (str) or a list of sql statements to execute
      :param parameters: The parameters to render the SQL query with.
      :param kwargs: (optional) passed into pandas.io.sql.read_sql method


   .. py:method:: insert_rows(table, rows, target_fields = None, commit_every = 0, replace = False, **kwargs)

      A generic way to insert a set of tuples into a table.

      :param table: Name of the target table
      :param rows: The rows to insert into the table
      :param target_fields: The names of the columns to fill in the table
      :param commit_every: The maximum number of rows to insert in one
          transaction. Set to 0 to insert all rows in one transaction.
      :param replace: Whether to replace instead of insert


   .. py:method:: get_openlineage_database_info(connection)

      Returns Trino specific information for OpenLineage.


   .. py:method:: get_openlineage_database_dialect(_)

      Returns Trino dialect.


   .. py:method:: get_openlineage_default_schema()

      Returns Trino default schema.



