:py:mod:`airflow.providers.weaviate.hooks.weaviate`
===================================================

.. py:module:: airflow.providers.weaviate.hooks.weaviate


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.WeaviateHook




.. py:class:: WeaviateHook(conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Weaviate database to store vectors. This hook uses the `conn_id`.

   :param conn_id: The connection id to use when connecting to Weaviate. <howto/connection:weaviate>

   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'weaviate_default'

      

   .. py:attribute:: conn_type
      :value: 'weaviate'

      

   .. py:attribute:: hook_name
      :value: 'Weaviate'

      

   .. py:method:: get_connection_form_widgets()
      :classmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Returns custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: conn()

      Returns a Weaviate client.


   .. py:method:: get_client()

      Returns a Weaviate client.


   .. py:method:: test_connection()


   .. py:method:: create_class(class_json)

      Create a new class.


   .. py:method:: create_schema(schema_json)

      Create a new Schema.

      Instead of adding classes one by one , you can upload a full schema in JSON format at once.

      :param schema_json: The schema to create


   .. py:method:: batch_data(class_name, data, batch_config_params = None)


   .. py:method:: delete_class(class_name)

      Delete an existing class.


   .. py:method:: query_with_vector(embeddings, class_name, *properties, certainty = 0.7, limit = 1)

      Query weaviate database with near vectors.

      This method uses a vector search using a Get query. we are using a with_near_vector to provide
      weaviate with a query with vector itself. This is needed for query a  Weaviate class with a custom,
      external vectorizer. Weaviate then converts this into a vector through the inference API
      (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: query_without_vector(search_text, class_name, *properties, limit = 1)

      Query using near text.

      This method uses a vector search using a Get query. we are using a nearText operator to provide
      weaviate with a query search_text. Weaviate then converts this into a vector through the inference
      API (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: create_object(data_object, class_name, **kwargs)

      Create a new object.

      :param data_object: Object to be added. If type is str it should be either a URL or a file.
      :param class_name: Class name associated with the object given.
      :param kwargs: Additional parameters to be passed to weaviate_client.data_object.create()


   .. py:method:: get_or_create_object(data_object = None, class_name = None, vector = None, consistency_level = None, tenant = None, **kwargs)

      Get or Create a new object.

      Returns the object if already exists

      :param data_object: Object to be added. If type is str it should be either a URL or a file. This is required
          to create a new object.
      :param class_name: Class name associated with the object given. This is required to create a new object.
      :param vector: Vector associated with the object given. This argument is only used when creating object.
      :param consistency_level: Consistency level to be used. Applies to both create and get operations.
      :tenant: Tenant to be used. Applies to both create and get operations.
      :param kwargs: Additional parameters to be passed to weaviate_client.data_object.create() and
          weaviate_client.data_object.get()


   .. py:method:: get_object(**kwargs)

      Get objects or an object from weaviate.

      :param kwargs: parameters to be passed to weaviate_client.data_object.get() or
          weaviate_client.data_object.get_by_id()


   .. py:method:: get_all_objects(after = None, as_dataframe = False, **kwargs)

      Get all objects from weaviate.

      if after is provided, it will be used as the starting point for the listing.

      :param after: uuid of the object to start listing from
      :param as_dataframe: if True, returns a pandas dataframe
      :param kwargs: parameters to be passed to weaviate_client.data_object.get()


   .. py:method:: delete_object(uuid, **kwargs)

      Delete an object from weaviate.

      :param uuid: uuid of the object to be deleted
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.delete()


   .. py:method:: update_object(data_object, class_name, uuid, **kwargs)

      Update an object in weaviate.

      :param data_object: The object states the fields that should be updated. Fields not specified in the
          'data_object' remain unchanged. Fields that are None will not be changed.
          If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param uuid: uuid of the object to be updated
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.update()


   .. py:method:: replace_object(data_object, class_name, uuid, **kwargs)

      Replace an object in weaviate.

      :param data_object: The object states the fields that should be updated. Fields not specified in the
          'data_object' will be set to None. If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param uuid: uuid of the object to be replaced
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.replace()


   .. py:method:: validate_object(data_object, class_name, **kwargs)

      Validate an object in weaviate.

      :param data_object: The object to be validated. If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.validate()


   .. py:method:: object_exists(uuid, **kwargs)

      Check if an object exists in weaviate.

      :param uuid: The UUID of the object that may or may not exist within Weaviate.
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.exists()



