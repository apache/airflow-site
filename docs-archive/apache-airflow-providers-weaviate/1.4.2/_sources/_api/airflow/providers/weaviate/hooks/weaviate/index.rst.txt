:py:mod:`airflow.providers.weaviate.hooks.weaviate`
===================================================

.. py:module:: airflow.providers.weaviate.hooks.weaviate


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.WeaviateHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.check_http_error_is_retryable



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.ExitingSchemaOptions
   airflow.providers.weaviate.hooks.weaviate.HTTP_RETRY_STATUS_CODE
   airflow.providers.weaviate.hooks.weaviate.REQUESTS_EXCEPTIONS_TYPES


.. py:data:: ExitingSchemaOptions

   

.. py:data:: HTTP_RETRY_STATUS_CODE
   :value: [429, 500, 503, 504]

   

.. py:data:: REQUESTS_EXCEPTIONS_TYPES
   :value: ()

   

.. py:function:: check_http_error_is_retryable(exc)


.. py:class:: WeaviateHook(conn_id = default_conn_name, retry_status_codes = None, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Weaviate database to store vectors. This hook uses the 'conn_id'.

   :param conn_id: The connection id to use when connecting to Weaviate. <howto/connection:weaviate>

   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'weaviate_default'

      

   .. py:attribute:: conn_type
      :value: 'weaviate'

      

   .. py:attribute:: hook_name
      :value: 'Weaviate'

      

   .. py:method:: get_connection_form_widgets()
      :classmethod:

      Return connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Return custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: conn()

      Returns a Weaviate client.


   .. py:method:: get_client()

      Return a Weaviate client.


   .. py:method:: test_connection()


   .. py:method:: create_class(class_json)

      Create a new class.


   .. py:method:: create_schema(schema_json)

      Create a new Schema.

      Instead of adding classes one by one , you can upload a full schema in JSON format at once.

      :param schema_json: Schema as a Python dict or the path to a JSON file, or the URL of a JSON file.


   .. py:method:: get_schema(class_name = None)

      Get the schema from Weaviate.

      :param class_name: The class for which to return the schema. If NOT provided the whole schema is
          returned, otherwise only the schema of this class is returned. By default None.


   .. py:method:: delete_classes(class_names, if_error = 'stop')

      Delete all or specific classes if class_names are provided.

      :param class_names: list of class names to be deleted.
      :param if_error: define the actions to be taken if there is an error while deleting a class, possible
       options are `stop` and `continue`
      :return: if `if_error=continue` return list of classes which we failed to delete.
          if `if_error=stop` returns None.


   .. py:method:: delete_all_schema()

      Remove the entire schema from the Weaviate instance and all data associated with it.


   .. py:method:: update_config(class_name, config)

      Update a schema configuration for a specific class.


   .. py:method:: create_or_replace_classes(schema_json, existing = 'ignore')

      Create or replace the classes in schema of Weaviate database.

      :param schema_json: Json containing the schema. Format {"class_name": "class_dict"}
          .. seealso:: `example of class_dict <https://weaviate-python-client.readthedocs.io/en/v3.25.2/weaviate.schema.html#weaviate.schema.Schema.create>`_.
      :param existing: Options to handle the case when the classes exist, possible options
          'replace', 'fail', 'ignore'.


   .. py:method:: check_subset_of_schema(classes_objects)

      Check if the class_objects is a subset of existing schema.

      Note - weaviate client's `contains()` don't handle the class properties mismatch, if you want to
       compare `Class A` with `Class B` they must have exactly same properties. If `Class A` has fewer
        numbers of properties than Class B, `contains()` will result in False.

      .. seealso:: `contains <https://weaviate-python-client.readthedocs.io/en/v3.25.3/weaviate.schema.html#weaviate.schema.Schema.contains>`_.


   .. py:method:: batch_data(class_name, data, batch_config_params = None, vector_col = 'Vector', uuid_col = 'id', retry_attempts_per_object = 5, tenant = None)

      Add multiple objects or object references at once into weaviate.

      :param class_name: The name of the class that objects belongs to.
      :param data: list or dataframe of objects we want to add.
      :param batch_config_params: dict of batch configuration option.
          .. seealso:: `batch_config_params options <https://weaviate-python-client.readthedocs.io/en/v3.25.3/weaviate.batch.html#weaviate.batch.Batch.configure>`__
      :param vector_col: name of the column containing the vector.
      :param uuid_col: Name of the column containing the UUID.
      :param retry_attempts_per_object: number of time to try in case of failure before giving up.
      :param tenant: The tenant to which the object will be added.


   .. py:method:: query_with_vector(embeddings, class_name, *properties, certainty = 0.7, limit = 1)

      Query weaviate database with near vectors.

      This method uses a vector search using a Get query. we are using a with_near_vector to provide
      weaviate with a query with vector itself. This is needed for query a  Weaviate class with a custom,
      external vectorizer. Weaviate then converts this into a vector through the inference API
      (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: query_without_vector(search_text, class_name, *properties, limit = 1)

      Query using near text.

      This method uses a vector search using a Get query. we are using a nearText operator to provide
      weaviate with a query search_text. Weaviate then converts this into a vector through the inference
      API (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: create_object(data_object, class_name, **kwargs)

      Create a new object.

      :param data_object: Object to be added. If type is str it should be either a URL or a file.
      :param class_name: Class name associated with the object given.
      :param kwargs: Additional parameters to be passed to weaviate_client.data_object.create()


   .. py:method:: get_or_create_object(data_object = None, class_name = None, vector = None, consistency_level = None, tenant = None, **kwargs)

      Get or Create a new object.

      Returns the object if already exists

      :param data_object: Object to be added. If type is str it should be either a URL or a file. This is required
          to create a new object.
      :param class_name: Class name associated with the object given. This is required to create a new object.
      :param vector: Vector associated with the object given. This argument is only used when creating object.
      :param consistency_level: Consistency level to be used. Applies to both create and get operations.
      :param tenant: Tenant to be used. Applies to both create and get operations.
      :param kwargs: Additional parameters to be passed to weaviate_client.data_object.create() and
          weaviate_client.data_object.get()


   .. py:method:: get_object(**kwargs)

      Get objects or an object from weaviate.

      :param kwargs: parameters to be passed to weaviate_client.data_object.get() or
          weaviate_client.data_object.get_by_id()


   .. py:method:: get_all_objects(after = None, as_dataframe = False, **kwargs)

      Get all objects from weaviate.

      if after is provided, it will be used as the starting point for the listing.

      :param after: uuid of the object to start listing from
      :param as_dataframe: if True, returns a pandas dataframe
      :param kwargs: parameters to be passed to weaviate_client.data_object.get()


   .. py:method:: delete_object(uuid, **kwargs)

      Delete an object from weaviate.

      :param uuid: uuid of the object to be deleted
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.delete()


   .. py:method:: update_object(data_object, class_name, uuid, **kwargs)

      Update an object in weaviate.

      :param data_object: The object states the fields that should be updated. Fields not specified in the
          'data_object' remain unchanged. Fields that are None will not be changed.
          If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param uuid: uuid of the object to be updated
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.update()


   .. py:method:: replace_object(data_object, class_name, uuid, **kwargs)

      Replace an object in weaviate.

      :param data_object: The object states the fields that should be updated. Fields not specified in the
          'data_object' will be set to None. If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param uuid: uuid of the object to be replaced
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.replace()


   .. py:method:: validate_object(data_object, class_name, **kwargs)

      Validate an object in weaviate.

      :param data_object: The object to be validated. If type is str it should be either an URL or a file.
      :param class_name: Class name associated with the object given.
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.validate()


   .. py:method:: object_exists(uuid, **kwargs)

      Check if an object exists in weaviate.

      :param uuid: The UUID of the object that may or may not exist within Weaviate.
      :param kwargs: Optional parameters to be passed to weaviate_client.data_object.exists()


   .. py:method:: create_or_replace_document_objects(data, class_name, document_column, existing = 'skip', uuid_column = None, vector_column = 'Vector', batch_config_params = None, tenant = None, verbose = False)

      create or replace objects belonging to documents.

      In real-world scenarios, information sources like Airflow docs, Stack Overflow, or other issues
      are considered 'documents' here. It's crucial to keep the database objects in sync with these sources.
      If any changes occur in these documents, this function aims to reflect those changes in the database.

      .. note::

          This function assumes responsibility for identifying changes in documents, dropping relevant
          database objects, and recreating them based on updated information. It's crucial to handle this
          process with care, ensuring backups and validation are in place to prevent data loss or
          inconsistencies.

      Provides users with multiple ways of dealing with existing values.
      replace: replace the existing objects with new objects. This option requires to identify the
      objects belonging to a document. which by default is done by using document_column field.
      skip: skip the existing objects and only add the missing objects of a document.
      error: raise an error if an object belonging to a existing document is tried to be created.

      :param data: A single pandas DataFrame or a list of dicts to be ingested.
      :param class_name: Name of the class in Weaviate schema where data is to be ingested.
      :param existing: Strategy for handling existing data: 'skip', or 'replace'. Default is 'skip'.
      :param document_column: Column in DataFrame that identifying source document.
      :param uuid_column: Column with pre-generated UUIDs. If not provided, UUIDs will be generated.
      :param vector_column: Column with embedding vectors for pre-embedded data.
      :param batch_config_params: Additional parameters for Weaviate batch configuration.
      :param tenant: The tenant to which the object will be added.
      :param verbose: Flag to enable verbose output during the ingestion process.
      :return: list of UUID which failed to create



