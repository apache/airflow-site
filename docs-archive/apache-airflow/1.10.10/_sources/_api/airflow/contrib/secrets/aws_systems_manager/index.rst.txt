:mod:`airflow.contrib.secrets.aws_systems_manager`
==================================================

.. py:module:: airflow.contrib.secrets.aws_systems_manager

.. autoapi-nested-parse::

   Objects relating to sourcing connections from AWS SSM Parameter Store



Module Contents
---------------

.. py:class:: SystemsManagerParameterStoreBackend(connections_prefix='/airflow/connections', variables_prefix='/airflow/variables', profile_name=None, **kwargs)

   Bases: :class:`airflow.secrets.BaseSecretsBackend`, :class:`airflow.utils.log.logging_mixin.LoggingMixin`

   Retrieves Connection or Variables from AWS SSM Parameter Store

   Configurable via ``airflow.cfg`` like so:

   .. code-block:: ini

       [secrets]
       backend = airflow.contrib.secrets.aws_systems_manager.SystemsManagerParameterStoreBackend
       backend_kwargs = {"connections_prefix": "/airflow/connections", "profile_name": null}

   For example, if ssm path is ``/airflow/connections/smtp_default``, this would be accessible
   if you provide ``{"connections_prefix": "/airflow/connections"}`` and request conn_id ``smtp_default``.
   And if ssm path is ``/airflow/variables/hello``, this would be accessible
   if you provide ``{"variables_prefix": "/airflow/variables"}`` and request conn_id ``hello``.

   
   .. method:: client(self)

      Create a SSM client



   
   .. method:: get_conn_uri(self, conn_id)

      Get param value

      :param conn_id: connection id
      :type conn_id: str
      :rtype: str



   
   .. method:: get_variable(self, key)

      Get Airflow Variable from Environment Variable

      :param key: Variable Key
      :return: Variable Value



   
   .. method:: _get_secret(self, path_prefix, secret_id)

      Get secret value from Parameter Store.

      :param path_prefix: Prefix for the Path to get Secret
      :type path_prefix: str
      :param secret_id: Secret Key
      :type secret_id: str




