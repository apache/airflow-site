

:mod:`airflow.operators.check_operator`
=======================================

.. py:module:: airflow.operators.check_operator







Module Contents
---------------






.. py:class:: CheckOperator(sql, conn_id=None, *args, **kwargs)

   Bases::class:`airflow.models.BaseOperator`

   

   Performs checks against a db. The ``CheckOperator`` expects
   a sql query that will return a single row. Each value on that
   first row is evaluated using python ``bool`` casting. If any of the
   values return ``False`` the check is failed and errors out.

   Note that Python bool casting evals the following as ``False``:

   * ``False``
   * ``0``
   * Empty string (``""``)
   * Empty list (``[]``)
   * Empty dictionary or set (``{}``)

   Given a query like ``SELECT COUNT(*) FROM foo``, it will fail only if
   the count ``== 0``. You can craft much more complex query that could,
   for instance, check that the table has the same number of rows as
   the source table upstream, or that the count of today's partition is
   greater than yesterday's partition, or that a set of metrics are less
   than 3 standard deviation for the 7 day average.

   This operator can be used as a data quality check in your pipeline, and
   depending on where you put it in your DAG, you have the choice to
   stop the critical path, preventing from
   publishing dubious data, or on the side and receive email alerts
   without stopping the progress of the DAG.

   Note that this is an abstract class and get_db_hook
   needs to be defined. Whereas a get_db_hook is hook that gets a
   single record from an external source.

   :param sql: the sql to be executed. (templated)
   :type sql: str


   

   

   .. attribute:: template_fields
      :annotation: = ['sql'] 

      



   

   

   .. attribute:: template_ext
      :annotation: = ['.hql', '.sql'] 

      



   

   

   .. attribute:: ui_color
      :annotation: = #fff7e6 

      



   

   

   

   .. method:: execute(self, context=None)

      



   

   .. method:: get_db_hook(self)

      











.. function:: _convert_to_float_if_possible(s)

   
   A small helper function to convert a string to a numeric value
   if appropriate

   :param s: the string to be converted
   :type s: str

   









.. py:class:: ValueCheckOperator(sql, pass_value, tolerance=None, conn_id=None, *args, **kwargs)

   Bases::class:`airflow.models.BaseOperator`

   

   Performs a simple value check using sql code.

   Note that this is an abstract class and get_db_hook
   needs to be defined. Whereas a get_db_hook is hook that gets a
   single record from an external source.

   :param sql: the sql to be executed. (templated)
   :type sql: str


   

   

   .. attribute:: __mapper_args__
      

      



   

   

   .. attribute:: template_fields
      :annotation: = ['sql', 'pass_value'] 

      



   

   

   .. attribute:: template_ext
      :annotation: = ['.hql', '.sql'] 

      



   

   

   .. attribute:: ui_color
      :annotation: = #fff7e6 

      



   

   

   

   .. method:: execute(self, context=None)

      



   

   .. method:: get_db_hook(self)

      











.. py:class:: IntervalCheckOperator(table, metrics_thresholds, date_filter_column='ds', days_back=-7, conn_id=None, *args, **kwargs)

   Bases::class:`airflow.models.BaseOperator`

   

   Checks that the values of metrics given as SQL expressions are within
   a certain tolerance of the ones from days_back before.

   Note that this is an abstract class and get_db_hook
   needs to be defined. Whereas a get_db_hook is hook that gets a
   single record from an external source.

   :param table: the table name
   :type table: str
   :param days_back: number of days between ds and the ds we want to check
       against. Defaults to 7 days
   :type days_back: int
   :param metrics_threshold: a dictionary of ratios indexed by metrics
   :type metrics_threshold: dict


   

   

   .. attribute:: __mapper_args__
      

      



   

   

   .. attribute:: template_fields
      :annotation: = ['sql1', 'sql2'] 

      



   

   

   .. attribute:: template_ext
      :annotation: = ['.hql', '.sql'] 

      



   

   

   .. attribute:: ui_color
      :annotation: = #fff7e6 

      



   

   

   

   .. method:: execute(self, context=None)

      



   

   .. method:: get_db_hook(self)

      









