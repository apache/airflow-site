

:mod:`airflow.operators.dagrun_operator`
========================================

.. py:module:: airflow.operators.dagrun_operator







Module Contents
---------------






.. py:class:: DagRunOrder(run_id=None, payload=None)

   Bases::class:`object`

   

   









.. py:class:: TriggerDagRunOperator(trigger_dag_id, python_callable=None, execution_date=None, *args, **kwargs)

   Bases::class:`airflow.models.BaseOperator`

   

   Triggers a DAG run for a specified ``dag_id``

   :param trigger_dag_id: the dag_id to trigger (templated)
   :type trigger_dag_id: str
   :param python_callable: a reference to a python function that will be
       called while passing it the ``context`` object and a placeholder
       object ``obj`` for your callable to fill and return if you want
       a DagRun created. This ``obj`` object contains a ``run_id`` and
       ``payload`` attribute that you can modify in your function.
       The ``run_id`` should be a unique identifier for that DAG run, and
       the payload has to be a picklable object that will be made available
       to your tasks while executing that DAG run. Your function header
       should look like ``def foo(context, dag_run_obj):``
   :type python_callable: python callable
   :param execution_date: Execution date for the dag (templated)
   :type execution_date: str or datetime.datetime


   

   

   .. attribute:: template_fields
      :annotation: = ['trigger_dag_id', 'execution_date'] 

      



   

   

   .. attribute:: ui_color
      :annotation: = #ffefeb 

      



   

   

   

   .. method:: execute(self, context)

      









