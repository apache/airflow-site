:py:mod:`airflow.triggers.temporal`
===================================

.. py:module:: airflow.triggers.temporal


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.triggers.temporal.DateTimeTrigger
   airflow.triggers.temporal.TimeDeltaTrigger




.. py:class:: DateTimeTrigger(moment, *, end_from_trigger = False)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Trigger based on a datetime.

   A trigger that fires exactly once, at the given datetime, give or take
   a few seconds.

   The provided datetime MUST be in UTC.

   :param moment: when to yield event
   :param end_from_trigger: whether the trigger should mark the task successful after time condition
       reached or resume the task after time condition reached.

   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Loop until the relevant time is met.

      We do have a two-phase delay to save some cycles, but sleeping is so
      cheap anyway that it's pretty loose. We also don't just sleep for
      "the number of seconds until the time" in case the system clock changes
      unexpectedly, or handles a DST change poorly.



.. py:class:: TimeDeltaTrigger(delta, *, end_from_trigger = False)


   Bases: :py:obj:`DateTimeTrigger`

   Create DateTimeTriggers based on delays.

   Subclass to create DateTimeTriggers based on time delays rather
   than exact moments.

   While this is its own distinct class here, it will serialise to a
   DateTimeTrigger class, since they're operationally the same.

   :param delta: how long to wait
   :param end_from_trigger: whether the trigger should mark the task successful after time condition
       reached or resume the task after time condition reached.


