airflow.decorators
==================

.. py:module:: airflow.decorators


Submodules
----------

.. toctree::
   :maxdepth: 1

   /_api/airflow/decorators/base/index
   /_api/airflow/decorators/bash/index
   /_api/airflow/decorators/branch_external_python/index
   /_api/airflow/decorators/branch_python/index
   /_api/airflow/decorators/branch_virtualenv/index
   /_api/airflow/decorators/condition/index
   /_api/airflow/decorators/external_python/index
   /_api/airflow/decorators/python/index
   /_api/airflow/decorators/python_virtualenv/index
   /_api/airflow/decorators/sensor/index
   /_api/airflow/decorators/setup_teardown/index
   /_api/airflow/decorators/short_circuit/index
   /_api/airflow/decorators/task_group/index


Attributes
----------

.. autoapisummary::

   airflow.decorators.task
   airflow.decorators.setup
   airflow.decorators.teardown


Classes
-------

.. autoapisummary::

   airflow.decorators.TaskDecoratorCollection


Package Contents
----------------

.. py:class:: TaskDecoratorCollection

   Implementation to provide the ``@task`` syntax.


   .. py:attribute:: python


   .. py:attribute:: virtualenv


   .. py:attribute:: external_python


   .. py:attribute:: branch


   .. py:attribute:: branch_virtualenv


   .. py:attribute:: branch_external_python


   .. py:attribute:: short_circuit


   .. py:attribute:: sensor


   .. py:attribute:: bash


   .. py:attribute:: run_if


   .. py:attribute:: skip_if


   .. py:attribute:: __call__
      :type:  Any


   .. py:method:: __getattr__(name)

      Dynamically get provider-registered task decorators, e.g. ``@task.docker``.



.. py:data:: task

.. py:data:: setup
   :type:  Callable

.. py:data:: teardown
   :type:  Callable

