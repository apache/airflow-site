airflow.timetables.simple
=========================

.. py:module:: airflow.timetables.simple


Classes
-------

.. autoapisummary::

   airflow.timetables.simple.NullTimetable
   airflow.timetables.simple.OnceTimetable
   airflow.timetables.simple.ContinuousTimetable


Module Contents
---------------

.. py:class:: NullTimetable

   Bases: :py:obj:`_TrivialTimetable`


   Timetable that never schedules anything.

   This corresponds to ``schedule=None``.


   .. py:attribute:: can_be_scheduled
      :value: False


      Whether this timetable can actually schedule runs in an automated manner.

      This defaults to and should generally be *True* (including non periodic
      execution types like *@once* and data triggered tables), but
      ``NullTimetable`` sets this to *False*.



   .. py:attribute:: description
      :type:  str
      :value: 'Never, external triggers only'


      Human-readable description of the timetable.

      For example, this can produce something like ``'At 21:30, only on Friday'``
      from the cron expression ``'30 21 * * 5'``. This is used in the webserver UI.



   .. py:property:: summary
      :type: str


      A short summary for the timetable.

      This is used to display the timetable in the web UI. A cron expression
      timetable, for example, can use this to display the expression. The
      default implementation returns the timetable's type name.



   .. py:method:: next_dagrun_info(*, last_automated_data_interval, restriction)

      Provide information to schedule the next DagRun.

      The default implementation raises ``NotImplementedError``.

      :param last_automated_data_interval: The data interval of the associated
          DAG's last scheduled or backfilled run (manual runs not considered).
      :param restriction: Restriction to apply when scheduling the DAG run.
          See documentation of :class:`TimeRestriction` for details.

      :return: Information on when the next DagRun can be scheduled. None
          means a DagRun will not happen. This does not mean no more runs
          will be scheduled even again for this DAG; the timetable can return
          a DagRunInfo object when asked at another time.



.. py:class:: OnceTimetable

   Bases: :py:obj:`_TrivialTimetable`


   Timetable that schedules the execution once as soon as possible.

   This corresponds to ``schedule="@once"``.


   .. py:attribute:: description
      :type:  str
      :value: 'Once, as soon as possible'


      Human-readable description of the timetable.

      For example, this can produce something like ``'At 21:30, only on Friday'``
      from the cron expression ``'30 21 * * 5'``. This is used in the webserver UI.



   .. py:property:: summary
      :type: str


      A short summary for the timetable.

      This is used to display the timetable in the web UI. A cron expression
      timetable, for example, can use this to display the expression. The
      default implementation returns the timetable's type name.



   .. py:method:: next_dagrun_info(*, last_automated_data_interval, restriction)

      Provide information to schedule the next DagRun.

      The default implementation raises ``NotImplementedError``.

      :param last_automated_data_interval: The data interval of the associated
          DAG's last scheduled or backfilled run (manual runs not considered).
      :param restriction: Restriction to apply when scheduling the DAG run.
          See documentation of :class:`TimeRestriction` for details.

      :return: Information on when the next DagRun can be scheduled. None
          means a DagRun will not happen. This does not mean no more runs
          will be scheduled even again for this DAG; the timetable can return
          a DagRunInfo object when asked at another time.



.. py:class:: ContinuousTimetable

   Bases: :py:obj:`_TrivialTimetable`


   Timetable that schedules continually, while still respecting start_date and end_date.

   This corresponds to ``schedule="@continuous"``.


   .. py:attribute:: description
      :type:  str
      :value: 'As frequently as possible, but only one run at a time.'


      Human-readable description of the timetable.

      For example, this can produce something like ``'At 21:30, only on Friday'``
      from the cron expression ``'30 21 * * 5'``. This is used in the webserver UI.



   .. py:attribute:: active_runs_limit
      :value: 1


      Maximum active runs that can be active at one time for a DAG.

      This is called during DAG initialization, and the return value is used as
      the DAG's default ``max_active_runs``. This should generally return *None*,
      but there are good reasons to limit DAG run parallelism in some cases, such
      as for :class:`~airflow.timetable.simple.ContinuousTimetable`.



   .. py:property:: summary
      :type: str


      A short summary for the timetable.

      This is used to display the timetable in the web UI. A cron expression
      timetable, for example, can use this to display the expression. The
      default implementation returns the timetable's type name.



   .. py:method:: next_dagrun_info(*, last_automated_data_interval, restriction)

      Provide information to schedule the next DagRun.

      The default implementation raises ``NotImplementedError``.

      :param last_automated_data_interval: The data interval of the associated
          DAG's last scheduled or backfilled run (manual runs not considered).
      :param restriction: Restriction to apply when scheduling the DAG run.
          See documentation of :class:`TimeRestriction` for details.

      :return: Information on when the next DagRun can be scheduled. None
          means a DagRun will not happen. This does not mean no more runs
          will be scheduled even again for this DAG; the timetable can return
          a DagRunInfo object when asked at another time.



