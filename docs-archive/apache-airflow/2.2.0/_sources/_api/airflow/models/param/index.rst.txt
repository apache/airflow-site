:mod:`airflow.models.param`
===========================

.. py:module:: airflow.models.param


Module Contents
---------------

.. py:class:: Param(default: Any = None, description: str = None, **kwargs)

   Class to hold the default value of a Param and rule set to do the validations. Without the rule set
   it always validates and returns the default value.

   :param default: The value this Param object holds
   :type default: Any
   :param description: Optional help text for the Param
   :type description: str
   :param schema: The validation schema of the Param, if not given then all kwargs except
       default & description will form the schema
   :type schema: dict

   
   .. method:: resolve(self, value: Optional[Any] = None, suppress_exception: bool = False)

      Runs the validations and returns the Param's final value.
      May raise ValueError on failed validations.

      :param value: The value to be updated for the Param
      :type value: Optional[Any]
      :param suppress_exception: To raise an exception or not when the validations fails.
          If true and validations fails, the return value would be None.
      :type suppress_exception: bool



   
   .. method:: dump(self)

      Dump the Param as a dictionary




.. py:class:: ParamsDict(dict_obj: Optional[Dict] = None, suppress_exception: bool = False)

   Bases: :class:`dict`

   Class to hold all params for dags or tasks. All the keys are strictly string and values
   are converted into Param's object if they are not already. This class is to replace param's
   dictionary implicitly and ideally not needed to be used directly.

   
   .. method:: __setitem__(self, key: str, value: Any)

      Override for dictionary's ``setitem`` method. This method make sure that all values are of
      Param's type only.

      :param key: A key which needs to be inserted or updated in the dict
      :type key: str
      :param value: A value which needs to be set against the key. It could be of any
          type but will be converted and stored as a Param object eventually.
      :type value: Any



   
   .. method:: __getitem__(self, key: str)

      Override for dictionary's ``getitem`` method. After fetching the key, it would call the
      resolve method as well on the Param object.

      :param key: The key to fetch
      :type key: str



   
   .. method:: dump(self)

      Dumps the ParamsDict object as a dictionary, while suppressing exceptions



   
   .. method:: update(self, other_dict: dict)

      Override for dictionary's update method.
      :param other_dict: A dict type object which needs to be merged in the ParamsDict object
      :type other_dict: dict



   
   .. method:: validate(self)

      Validates & returns all the Params object stored in the dictionary




.. py:class:: DagParam(current_dag, name: str, default: Optional[Any] = None)

   Class that represents a DAG run parameter & binds a simple Param object to a name within a DAG instance,
   so that it can be resolved during the run time via ``{{ context }}`` dictionary. The ideal use case of
   this class is to implicitly convert args passed to a method which is being decorated by ``@dag`` keyword.

   It can be used to parameterize your dags. You can overwrite its value by setting it on conf
   when you trigger your DagRun.

   This can also be used in templates by accessing ``{{context.params}}`` dictionary.

   **Example**:

       with DAG(...) as dag:
         EmailOperator(subject=dag.param('subject', 'Hi from Airflow!'))

   :param current_dag: Dag being used for parameter.
   :type current_dag: airflow.models.DAG
   :param name: key value which is used to set the parameter
   :type name: str
   :param default: Default value used if no parameter was set.
   :type default: Any

   
   .. method:: resolve(self, context: Dict)

      Pull DagParam value from DagRun context. This method is run during ``op.execute()``.




