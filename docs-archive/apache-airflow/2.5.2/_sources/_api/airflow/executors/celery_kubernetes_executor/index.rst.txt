:py:mod:`airflow.executors.celery_kubernetes_executor`
======================================================

.. py:module:: airflow.executors.celery_kubernetes_executor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.executors.celery_kubernetes_executor.CeleryKubernetesExecutor




.. py:class:: CeleryKubernetesExecutor(celery_executor, kubernetes_executor)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   CeleryKubernetesExecutor consists of CeleryExecutor and KubernetesExecutor.
   It chooses an executor to use based on the queue defined on the task.
   When the queue is the value of ``kubernetes_queue`` in section ``[celery_kubernetes_executor]``
   of the configuration (default value: `kubernetes`), KubernetesExecutor is selected to run the task,
   otherwise, CeleryExecutor is used.

   .. py:property:: queued_tasks
      :type: dict[airflow.models.taskinstance.TaskInstanceKey, airflow.executors.base_executor.QueuedTaskInstanceType]

      Return queued tasks from celery and kubernetes executor


   .. py:property:: running
      :type: set[airflow.models.taskinstance.TaskInstanceKey]

      Return running tasks from celery and kubernetes executor


   .. py:property:: job_id
      :type: int | None

      This is a class attribute in BaseExecutor but since this is not really an executor, but a wrapper
      of executors we implement as property so we can have custom setter.


   .. py:property:: slots_available
      :type: int

      Number of new tasks this executor instance can accept


   .. py:attribute:: supports_ad_hoc_ti_run
      :type: bool
      :value: True

      

   .. py:attribute:: callback_sink
      :type: BaseCallbackSink | None

      

   .. py:attribute:: KUBERNETES_QUEUE

      

   .. py:method:: start()

      Start celery and kubernetes executor


   .. py:method:: queue_command(task_instance, command, priority = 1, queue = None)

      Queues command via celery or kubernetes executor


   .. py:method:: queue_task_instance(task_instance, mark_success = False, pickle_id = None, ignore_all_deps = False, ignore_depends_on_past = False, ignore_task_deps = False, ignore_ti_state = False, pool = None, cfg_path = None)

      Queues task instance via celery or kubernetes executor


   .. py:method:: has_task(task_instance)

      Checks if a task is either queued or running in either celery or kubernetes executor.

      :param task_instance: TaskInstance
      :return: True if the task is known to this executor


   .. py:method:: heartbeat()

      Heartbeat sent to trigger new jobs in celery and kubernetes executor


   .. py:method:: get_event_buffer(dag_ids = None)

      Returns and flush the event buffer from celery and kubernetes executor

      :param dag_ids: dag_ids to return events for, if None returns all
      :return: a dict of events


   .. py:method:: try_adopt_task_instances(tis)

      Try to adopt running task instances that have been abandoned by a SchedulerJob dying.

      Anything that is not adopted will be cleared by the scheduler (and then become eligible for
      re-scheduling)

      :return: any TaskInstances that were unable to be adopted


   .. py:method:: end()

      End celery and kubernetes executor


   .. py:method:: terminate()

      Terminate celery and kubernetes executor


   .. py:method:: debug_dump()

      Called in response to SIGUSR2 by the scheduler


   .. py:method:: send_callback(request)

      Sends callback for execution.

      :param request: Callback request to be executed.



