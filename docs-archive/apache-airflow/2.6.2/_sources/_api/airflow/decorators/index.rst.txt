:py:mod:`airflow.decorators`
============================

.. py:module:: airflow.decorators


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   branch_python/index.rst
   external_python/index.rst
   python/index.rst
   python_virtualenv/index.rst
   sensor/index.rst
   setup_teardown/index.rst
   short_circuit/index.rst
   task_group/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.decorators.TaskDecorator
   airflow.decorators.TaskDecoratorCollection



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.decorators.branch_task
   airflow.decorators.external_python_task
   airflow.decorators.python_task
   airflow.decorators.virtualenv_task
   airflow.decorators.sensor_task
   airflow.decorators.short_circuit_task
   airflow.decorators.task_group
   airflow.decorators.dag



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.decorators.task
   airflow.decorators.setup
   airflow.decorators.teardown











.. py:class:: TaskDecoratorCollection


   Implementation to provide the ``@task`` syntax.

   .. py:attribute:: python

      

   .. py:attribute:: virtualenv

      

   .. py:attribute:: external_python

      

   .. py:attribute:: branch

      

   .. py:attribute:: short_circuit

      

   .. py:attribute:: sensor

      

   .. py:attribute:: __call__
      :type: Any

      

   .. py:method:: __getattr__(name)

      Dynamically get provider-registered task decorators, e.g. ``@task.docker``.



.. py:data:: task

   

.. py:data:: setup
   :type: Callable

   

.. py:data:: teardown
   :type: Callable

   

