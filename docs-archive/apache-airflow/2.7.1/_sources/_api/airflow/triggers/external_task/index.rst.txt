:py:mod:`airflow.triggers.external_task`
========================================

.. py:module:: airflow.triggers.external_task


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.triggers.external_task.TaskStateTrigger
   airflow.triggers.external_task.DagStateTrigger




.. py:class:: TaskStateTrigger(dag_id, execution_dates, trigger_start_time, states = None, task_id = None, poll_interval = 2.0)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Waits asynchronously for a task in a different DAG to complete for a specific logical date.

   :param dag_id: The dag_id that contains the task you want to wait for
   :param task_id: The task_id that contains the task you want to
       wait for.
   :param states: allowed states, default is ``['success']``
   :param execution_dates: task execution time interval
   :param poll_interval: The time interval in seconds to check the state.
       The default value is 5 sec.
   :param trigger_start_time: time in Datetime format when the trigger was started. Is used
       to control the execution of trigger to prevent infinite loop in case if specified name
       of the dag does not exist in database. It will wait period of time equals _timeout_sec parameter
       from the time, when the trigger was started and if the execution lasts more time than expected,
       the trigger will terminate with 'timeout' status.

   .. py:method:: serialize()

      Serialize TaskStateTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Check periodically in the database to see if the dag exists and is in the running state.

      If found, wait until the task specified will reach one of the expected states.
      If dag with specified name was not in the running state after _timeout_sec seconds
      after starting execution process of the trigger, terminate with status 'timeout'.


   .. py:method:: count_running_dags(session)

      Count how many dag instances in running state in the database.


   .. py:method:: count_tasks(*, session = NEW_SESSION)

      Count how many task instances in the database match our criteria.



.. py:class:: DagStateTrigger(dag_id, states, execution_dates, poll_interval = 5.0)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Waits asynchronously for a DAG to complete for a specific logical date.

   :param dag_id: The dag_id that contains the task you want to wait for
   :param states: allowed states, default is ``['success']``
   :param execution_dates: The logical date at which DAG run.
   :param poll_interval: The time interval in seconds to check the state.
       The default value is 5.0 sec.

   .. py:method:: serialize()

      Serialize DagStateTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Check periodically if the dag run exists, and has hit one of the states yet, or not.


   .. py:method:: count_dags(*, session = NEW_SESSION)

      Count how many dag runs in the database match our criteria.



