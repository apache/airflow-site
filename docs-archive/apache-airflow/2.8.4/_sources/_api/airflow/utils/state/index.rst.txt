:py:mod:`airflow.utils.state`
=============================

.. py:module:: airflow.utils.state


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.utils.state.JobState
   airflow.utils.state.TaskInstanceState
   airflow.utils.state.DagRunState
   airflow.utils.state.State




.. py:class:: JobState


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   All possible states that a Job can be in.

   .. py:attribute:: RUNNING
      :value: 'running'

      

   .. py:attribute:: SUCCESS
      :value: 'success'

      

   .. py:attribute:: RESTARTING
      :value: 'restarting'

      

   .. py:attribute:: FAILED
      :value: 'failed'

      

   .. py:method:: __str__()

      Return str(self).



.. py:class:: TaskInstanceState


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   All possible states that a Task Instance can be in.

   Note that None is also allowed, so always use this in a type hint with Optional.

   .. py:attribute:: REMOVED
      :value: 'removed'

      

   .. py:attribute:: SCHEDULED
      :value: 'scheduled'

      

   .. py:attribute:: QUEUED
      :value: 'queued'

      

   .. py:attribute:: RUNNING
      :value: 'running'

      

   .. py:attribute:: SUCCESS
      :value: 'success'

      

   .. py:attribute:: RESTARTING
      :value: 'restarting'

      

   .. py:attribute:: FAILED
      :value: 'failed'

      

   .. py:attribute:: UP_FOR_RETRY
      :value: 'up_for_retry'

      

   .. py:attribute:: UP_FOR_RESCHEDULE
      :value: 'up_for_reschedule'

      

   .. py:attribute:: UPSTREAM_FAILED
      :value: 'upstream_failed'

      

   .. py:attribute:: SKIPPED
      :value: 'skipped'

      

   .. py:attribute:: DEFERRED
      :value: 'deferred'

      

   .. py:method:: __str__()

      Return str(self).



.. py:class:: DagRunState


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   All possible states that a DagRun can be in.

   These are "shared" with TaskInstanceState in some parts of the code,
   so please ensure that their values always match the ones with the
   same name in TaskInstanceState.

   .. py:attribute:: QUEUED
      :value: 'queued'

      

   .. py:attribute:: RUNNING
      :value: 'running'

      

   .. py:attribute:: SUCCESS
      :value: 'success'

      

   .. py:attribute:: FAILED
      :value: 'failed'

      

   .. py:method:: __str__()

      Return str(self).



.. py:class:: State


   Static class with task instance state constants and color methods to avoid hard-coding.

   .. py:attribute:: SUCCESS

      

   .. py:attribute:: RUNNING

      

   .. py:attribute:: FAILED

      

   .. py:attribute:: NONE

      

   .. py:attribute:: REMOVED

      

   .. py:attribute:: SCHEDULED

      

   .. py:attribute:: QUEUED

      

   .. py:attribute:: RESTARTING

      

   .. py:attribute:: UP_FOR_RETRY

      

   .. py:attribute:: UP_FOR_RESCHEDULE

      

   .. py:attribute:: UPSTREAM_FAILED

      

   .. py:attribute:: SKIPPED

      

   .. py:attribute:: DEFERRED

      

   .. py:attribute:: finished_dr_states
      :type: frozenset[DagRunState]

      

   .. py:attribute:: unfinished_dr_states
      :type: frozenset[DagRunState]

      

   .. py:attribute:: task_states
      :type: tuple[TaskInstanceState | None, Ellipsis]
      :value: (None,)

      

   .. py:attribute:: dag_states
      :type: tuple[DagRunState, Ellipsis]
      :value: ()

      

   .. py:attribute:: state_color
      :type: dict[TaskInstanceState | None, str]

      

   .. py:attribute:: finished
      :type: frozenset[TaskInstanceState]

      A list of states indicating a task has reached a terminal state (i.e. it has "finished") and needs no
      further action.

      Note that the attempt could have resulted in failure or have been
      interrupted; or perhaps never run at all (skip, or upstream_failed) in any
      case, it is no longer running.


   .. py:attribute:: unfinished
      :type: frozenset[TaskInstanceState | None]

      A list of states indicating that a task either has not completed
      a run or has not even started.


   .. py:attribute:: failed_states
      :type: frozenset[TaskInstanceState]

      A list of states indicating that a task or dag is a failed state.


   .. py:attribute:: success_states
      :type: frozenset[TaskInstanceState]

      A list of states indicating that a task or dag is a success state.


   .. py:attribute:: adoptable_states

      A list of states indicating that a task can be adopted or reset by a scheduler job
      if it was queued by another scheduler job that is not running anymore.


   .. py:method:: color(state)
      :classmethod:

      Return color for a state.


   .. py:method:: color_fg(state)
      :classmethod:

      Black&white colors for a state.



