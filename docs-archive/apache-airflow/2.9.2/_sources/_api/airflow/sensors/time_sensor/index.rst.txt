:py:mod:`airflow.sensors.time_sensor`
=====================================

.. py:module:: airflow.sensors.time_sensor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.sensors.time_sensor.TimeSensor
   airflow.sensors.time_sensor.TimeSensorAsync




.. py:class:: TimeSensor(*, target_time, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits until the specified time of the day.

   :param target_time: time after which the job succeeds

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:TimeSensor`


   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: TimeSensorAsync(*, target_time, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits until the specified time of the day.

   This frees up a worker slot while it is waiting.

   :param target_time: time after which the job succeeds

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:TimeSensorAsync`

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event=None)

      Execute when the trigger fires - returns immediately.



