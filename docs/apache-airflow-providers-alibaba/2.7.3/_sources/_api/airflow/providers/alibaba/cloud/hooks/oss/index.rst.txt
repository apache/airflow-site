:py:mod:`airflow.providers.alibaba.cloud.hooks.oss`
===================================================

.. py:module:: airflow.providers.alibaba.cloud.hooks.oss


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.alibaba.cloud.hooks.oss.OSSHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.alibaba.cloud.hooks.oss.provide_bucket_name
   airflow.providers.alibaba.cloud.hooks.oss.unify_bucket_name_and_key



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.alibaba.cloud.hooks.oss.T


.. py:data:: T

   

.. py:function:: provide_bucket_name(func)

   Unify bucket name and key if a key is provided but not a bucket name.


.. py:function:: unify_bucket_name_and_key(func)

   Unify bucket name and key if a key is provided but not a bucket name.


.. py:class:: OSSHook(region = None, oss_conn_id='oss_default', *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Alibaba Cloud OSS, using the oss2 library.

   .. py:attribute:: conn_name_attr
      :value: 'alibabacloud_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'oss_default'

      

   .. py:attribute:: conn_type
      :value: 'oss'

      

   .. py:attribute:: hook_name
      :value: 'OSS'

      

   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: parse_oss_url(ossurl)
      :staticmethod:

      Parse the OSS Url into a bucket name and key.

      :param ossurl: The OSS Url to parse.
      :return: the parsed bucket name and key


   .. py:method:: object_exists(key, bucket_name = None)

      Check if object exists.

      :param key: the path of the object
      :param bucket_name: the name of the bucket
      :return: True if it exists and False if not.


   .. py:method:: get_bucket(bucket_name = None)

      Return a oss2.Bucket object.

      :param bucket_name: the name of the bucket
      :return: the bucket object to the bucket name.


   .. py:method:: load_string(key, content, bucket_name = None)

      Load a string to OSS.

      :param key: the path of the object
      :param content: str to set as content for the key.
      :param bucket_name: the name of the bucket


   .. py:method:: upload_local_file(key, file, bucket_name = None)

      Upload a local file to OSS.

      :param key: the OSS path of the object
      :param file: local file to upload.
      :param bucket_name: the name of the bucket


   .. py:method:: download_file(key, local_file, bucket_name = None)

      Download file from OSS.

      :param key: key of the file-like object to download.
      :param local_file: local path + file name to save.
      :param bucket_name: the name of the bucket
      :return: the file name.


   .. py:method:: delete_object(key, bucket_name = None)

      Delete object from OSS.

      :param key: key of the object to delete.
      :param bucket_name: the name of the bucket


   .. py:method:: delete_objects(key, bucket_name = None)

      Delete objects from OSS.

      :param key: keys list of the objects to delete.
      :param bucket_name: the name of the bucket


   .. py:method:: delete_bucket(bucket_name = None)

      Delete bucket from OSS.

      :param bucket_name: the name of the bucket


   .. py:method:: create_bucket(bucket_name = None)

      Create bucket.

      :param bucket_name: the name of the bucket


   .. py:method:: append_string(bucket_name, content, key, pos)

      Append string to a remote existing file.

      :param bucket_name: the name of the bucket
      :param content: content to be appended
      :param key: oss bucket key
      :param pos: position of the existing file where the content will be appended


   .. py:method:: read_key(bucket_name, key)

      Read oss remote object content with the specified key.

      :param bucket_name: the name of the bucket
      :param key: oss bucket key


   .. py:method:: head_key(bucket_name, key)

      Get meta info of the specified remote object.

      :param bucket_name: the name of the bucket
      :param key: oss bucket key


   .. py:method:: key_exist(bucket_name, key)

      Find out whether the specified key exists in the oss remote storage.

      :param bucket_name: the name of the bucket
      :param key: oss bucket key


   .. py:method:: get_credential()


   .. py:method:: get_default_region()



