:py:mod:`airflow.providers.alibaba.cloud.sensors.oss_key`
=========================================================

.. py:module:: airflow.providers.alibaba.cloud.sensors.oss_key


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.alibaba.cloud.sensors.oss_key.OSSKeySensor




.. py:class:: OSSKeySensor(bucket_key, region, bucket_name = None, oss_conn_id = 'oss_default', **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a key (a file-like instance on OSS) to be present in an OSS bucket.

   OSS being a key/value, it does not support folders. The path is just a key resource.

   :param bucket_key: The key being waited on. Supports full oss:// style url
       or relative path from root level. When it's specified as a full oss://
       url, please leave bucket_name as `None`.
   :param region: OSS region
   :param bucket_name: OSS bucket name
   :param oss_conn_id: The Airflow connection used for OSS credentials.

   .. py:property:: get_hook
      :type: airflow.providers.alibaba.cloud.hooks.oss.OSSHook

      Create and return an OSSHook.


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('bucket_key', 'bucket_name')

      

   .. py:method:: poke(context)

      Check if the object exists in the bucket to pull key.

      :param self: the object itself
      :param context: the context of the object
      :returns: True if the object exists, False otherwise


   .. py:method:: hook()

      Create and return an OSSHook.



