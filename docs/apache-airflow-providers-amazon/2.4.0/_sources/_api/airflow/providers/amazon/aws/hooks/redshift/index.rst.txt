:mod:`airflow.providers.amazon.aws.hooks.redshift`
==================================================

.. py:module:: airflow.providers.amazon.aws.hooks.redshift

.. autoapi-nested-parse::

   Interact with AWS Redshift clusters.



Module Contents
---------------

.. py:class:: RedshiftHook(*args, **kwargs)

   Bases: :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   Interact with AWS Redshift, using the boto3 library

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :type aws_conn_id: str

   
   .. method:: cluster_status(self, cluster_identifier: str)

      Return status of a cluster

      :param cluster_identifier: unique identifier of a cluster
      :type cluster_identifier: str
      :param skip_final_cluster_snapshot: determines cluster snapshot creation
      :type skip_final_cluster_snapshot: bool
      :param final_cluster_snapshot_identifier: Optional[str]
      :type final_cluster_snapshot_identifier: Optional[str]



   
   .. method:: delete_cluster(self, cluster_identifier: str, skip_final_cluster_snapshot: bool = True, final_cluster_snapshot_identifier: Optional[str] = None)

      Delete a cluster and optionally create a snapshot

      :param cluster_identifier: unique identifier of a cluster
      :type cluster_identifier: str
      :param skip_final_cluster_snapshot: determines cluster snapshot creation
      :type skip_final_cluster_snapshot: bool
      :param final_cluster_snapshot_identifier: name of final cluster snapshot
      :type final_cluster_snapshot_identifier: str



   
   .. method:: describe_cluster_snapshots(self, cluster_identifier: str)

      Gets a list of snapshots for a cluster

      :param cluster_identifier: unique identifier of a cluster
      :type cluster_identifier: str



   
   .. method:: restore_from_cluster_snapshot(self, cluster_identifier: str, snapshot_identifier: str)

      Restores a cluster from its snapshot

      :param cluster_identifier: unique identifier of a cluster
      :type cluster_identifier: str
      :param snapshot_identifier: unique identifier for a snapshot of a cluster
      :type snapshot_identifier: str



   
   .. method:: create_cluster_snapshot(self, snapshot_identifier: str, cluster_identifier: str)

      Creates a snapshot of a cluster

      :param snapshot_identifier: unique identifier for a snapshot of a cluster
      :type snapshot_identifier: str
      :param cluster_identifier: unique identifier of a cluster
      :type cluster_identifier: str




.. py:class:: RedshiftSQLHook

   Bases: :class:`airflow.hooks.dbapi.DbApiHook`

   Execute statements against Amazon Redshift, using redshift_connector

   This hook requires the redshift_conn_id connection.

   :param redshift_conn_id: reference to
       :ref:`Amazon Redshift connection id<howto/connection:redshift>`
   :type redshift_conn_id: str

   .. note::
       get_sqlalchemy_engine() and get_uri() depend on sqlalchemy-amazon-redshift

   .. attribute:: conn_name_attr
      :annotation: = redshift_conn_id

      

   .. attribute:: default_conn_name
      :annotation: = redshift_default

      

   .. attribute:: conn_type
      :annotation: = redshift

      

   .. attribute:: hook_name
      :annotation: = Amazon Redshift

      

   .. attribute:: supports_autocommit
      :annotation: = True

      

   
   .. staticmethod:: get_ui_field_behavior()

      Returns custom field behavior



   
   .. method:: conn(self)



   
   .. method:: get_uri(self)

      Overrides DbApiHook get_uri to use redshift_connector sqlalchemy dialect as driver name



   
   .. method:: get_sqlalchemy_engine(self, engine_kwargs=None)

      Overrides DbApiHook get_sqlalchemy_engine to pass redshift_connector specific kwargs



   
   .. method:: get_table_primary_key(self, table: str, schema: Optional[str] = 'public')

      Helper method that returns the table primary key
      :param table: Name of the target table
      :type table: str
      :param table: Name of the target schema, public by default
      :type table: str
      :return: Primary key columns list
      :rtype: List[str]



   
   .. method:: get_conn(self)

      Returns a redshift_connector.Connection object




