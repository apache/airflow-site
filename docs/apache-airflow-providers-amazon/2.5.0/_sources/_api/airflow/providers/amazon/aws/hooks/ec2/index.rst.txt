:mod:`airflow.providers.amazon.aws.hooks.ec2`
=============================================

.. py:module:: airflow.providers.amazon.aws.hooks.ec2


Module Contents
---------------

.. function:: only_client_type(func)

.. py:class:: EC2Hook(api_type='resource_type', *args, **kwargs)

   Bases: :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   Interact with AWS EC2 Service.

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   .. attribute:: API_TYPES
      

      

   
   .. method:: get_instance(self, instance_id: str, filters: list = None)

      Get EC2 instance by id and return it.

      :param instance_id: id of the AWS EC2 instance
      :type instance_id: str
      :param filters: List of filters to specify instances to get
      :type filters: list
      :return: Instance object
      :rtype: ec2.Instance



   
   .. method:: stop_instances(self, instance_ids: list)

      Stop instances with given ids

      :param instance_ids: List of instance ids to stop
      :return: Dict with key `StoppingInstances` and value as list of instances being stopped



   
   .. method:: start_instances(self, instance_ids: list)

      Start instances with given ids

      :param instance_ids: List of instance ids to start
      :return: Dict with key `StartingInstances` and value as list of instances being started



   
   .. method:: terminate_instances(self, instance_ids: list)

      Terminate instances with given ids

      :param instance_ids: List of instance ids to terminate
      :return: Dict with key `TerminatingInstances` and value as list of instances being terminated



   
   .. method:: describe_instances(self, filters: list = None, instance_ids: list = None)

      Describe EC2 instances, optionally applying filters and selective instance ids

      :param filters: List of filters to specify instances to describe
      :param instance_ids: List of instance IDs to describe
      :return: Response from EC2 describe_instances API



   
   .. method:: get_instances(self, filters: list = None, instance_ids: list = None)

      Get list of instance details, optionally applying filters and selective instance ids

      :param instance_ids: List of ids to get instances for
      :param filters: List of filters to specify instances to get
      :return: List of instances



   
   .. method:: get_instance_ids(self, filters: list = None)

      Get list of instance ids, optionally applying filters to fetch selective instances

      :param filters: List of filters to specify instances to get
      :return: List of instance ids



   
   .. method:: get_instance_state(self, instance_id: str)

      Get EC2 instance state by id and return it.

      :param instance_id: id of the AWS EC2 instance
      :type instance_id: str
      :return: current state of the instance
      :rtype: str



   
   .. method:: wait_for_state(self, instance_id: str, target_state: str, check_interval: float)

      Wait EC2 instance until its state is equal to the target_state.

      :param instance_id: id of the AWS EC2 instance
      :type instance_id: str
      :param target_state: target state of instance
      :type target_state: str
      :param check_interval: time in seconds that the job should wait in
          between each instance state checks until operation is completed
      :type check_interval: float
      :return: None
      :rtype: None




