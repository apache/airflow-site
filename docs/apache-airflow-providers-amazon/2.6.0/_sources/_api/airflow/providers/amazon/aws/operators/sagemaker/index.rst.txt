:py:mod:`airflow.providers.amazon.aws.operators.sagemaker`
==========================================================

.. py:module:: airflow.providers.amazon.aws.operators.sagemaker


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.sagemaker.SageMakerBaseOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerProcessingOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerEndpointConfigOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerEndpointOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerTransformOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerTuningOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerModelOperator
   airflow.providers.amazon.aws.operators.sagemaker.SageMakerTrainingOperator




.. py:class:: SageMakerBaseOperator(*, config: dict, aws_conn_id: str = 'aws_default', **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   This is the base operator for all SageMaker operators.

   :param config: The configuration necessary to start a training job (templated)
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['config']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:attribute:: ui_color
      :annotation: = #ededed

      

   .. py:attribute:: integer_fields
      :annotation: = []

      

   .. py:method:: parse_integer(self, config, field)

      Recursive method for parsing string fields holding integer values to integers.


   .. py:method:: parse_config_integers(self)

      Parse the integer fields of training config to integers in case the config is rendered by Jinja and
      all fields are str


   .. py:method:: expand_role(self)

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: preprocess_config(self)

      Process the config into a usable form.


   .. py:method:: execute(self, context: airflow.utils.context.Context)
      :abstractmethod:

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: hook(self)

      Return SageMakerHook



.. py:class:: SageMakerProcessingOperator(*, config: dict, aws_conn_id: str, wait_for_completion: bool = True, print_log: bool = True, check_interval: int = 30, max_ingestion_time: Optional[int] = None, action_if_job_exists: str = 'increment', **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Initiate a SageMaker processing job.

   This operator returns The ARN of the processing job created in Amazon SageMaker.

   :param config: The configuration necessary to start a processing job (templated).

       For details of the configuration parameter see :py:meth:`SageMaker.Client.create_processing_job`
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str
   :param wait_for_completion: If wait is set to True, the time interval, in seconds,
       that the operation waits to check the status of the processing job.
   :type wait_for_completion: bool
   :param print_log: if the operator should print the cloudwatch log during processing
   :type print_log: bool
   :param check_interval: if wait is set to be true, this is the time interval
       in seconds which the operator will check the status of the processing job
   :type check_interval: int
   :param max_ingestion_time: If wait is set to True, the operation fails if the processing job
       doesn't finish within max_ingestion_time seconds. If you set this parameter to None,
       the operation does not timeout.
   :type max_ingestion_time: int
   :param action_if_job_exists: Behaviour if the job name already exists. Possible options are "increment"
       (default) and "fail".
   :type action_if_job_exists: str

   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerEndpointConfigOperator(*, config: dict, **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Create a SageMaker endpoint config.

   This operator returns The ARN of the endpoint config created in Amazon SageMaker

   :param config: The configuration necessary to create an endpoint config.

       For details of the configuration parameter see :py:meth:`SageMaker.Client.create_endpoint_config`
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str

   .. py:attribute:: integer_fields
      :annotation: = [['ProductionVariants', 'InitialInstanceCount']]

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerEndpointOperator(*, config: dict, wait_for_completion: bool = True, check_interval: int = 30, max_ingestion_time: Optional[int] = None, operation: str = 'create', **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Create a SageMaker endpoint.

   This operator returns The ARN of the endpoint created in Amazon SageMaker

   :param config:
       The configuration necessary to create an endpoint.

       If you need to create a SageMaker endpoint based on an existed
       SageMaker model and an existed SageMaker endpoint config::

           config = endpoint_configuration;

       If you need to create all of SageMaker model, SageMaker endpoint-config and SageMaker endpoint::

           config = {
               'Model': model_configuration,
               'EndpointConfig': endpoint_config_configuration,
               'Endpoint': endpoint_configuration
           }

       For details of the configuration parameter of model_configuration see
       :py:meth:`SageMaker.Client.create_model`

       For details of the configuration parameter of endpoint_config_configuration see
       :py:meth:`SageMaker.Client.create_endpoint_config`

       For details of the configuration parameter of endpoint_configuration see
       :py:meth:`SageMaker.Client.create_endpoint`

   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str
   :param wait_for_completion: Whether the operator should wait until the endpoint creation finishes.
   :type wait_for_completion: bool
   :param check_interval: If wait is set to True, this is the time interval, in seconds, that this operation
       waits before polling the status of the endpoint creation.
   :type check_interval: int
   :param max_ingestion_time: If wait is set to True, this operation fails if the endpoint creation doesn't
       finish within max_ingestion_time seconds. If you set this parameter to None it never times out.
   :type max_ingestion_time: int
   :param operation: Whether to create an endpoint or update an endpoint. Must be either 'create or 'update'.
   :type operation: str

   .. py:method:: create_integer_fields(self) -> None

      Set fields which should be casted to integers.


   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerTransformOperator(*, config: dict, wait_for_completion: bool = True, check_interval: int = 30, max_ingestion_time: Optional[int] = None, **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Initiate a SageMaker transform job.

   This operator returns The ARN of the model created in Amazon SageMaker.

   :param config: The configuration necessary to start a transform job (templated).

       If you need to create a SageMaker transform job based on an existed SageMaker model::

           config = transform_config

       If you need to create both SageMaker model and SageMaker Transform job::

           config = {
               'Model': model_config,
               'Transform': transform_config
           }

       For details of the configuration parameter of transform_config see
       :py:meth:`SageMaker.Client.create_transform_job`

       For details of the configuration parameter of model_config, See:
       :py:meth:`SageMaker.Client.create_model`

   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str
   :param wait_for_completion: Set to True to wait until the transform job finishes.
   :type wait_for_completion: bool
   :param check_interval: If wait is set to True, the time interval, in seconds,
       that this operation waits to check the status of the transform job.
   :type check_interval: int
   :param max_ingestion_time: If wait is set to True, the operation fails
       if the transform job doesn't finish within max_ingestion_time seconds. If you
       set this parameter to None, the operation does not timeout.
   :type max_ingestion_time: int

   .. py:method:: create_integer_fields(self) -> None

      Set fields which should be casted to integers.


   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerTuningOperator(*, config: dict, wait_for_completion: bool = True, check_interval: int = 30, max_ingestion_time: Optional[int] = None, **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Initiate a SageMaker hyperparameter tuning job.

   This operator returns The ARN of the tuning job created in Amazon SageMaker.

   :param config: The configuration necessary to start a tuning job (templated).

       For details of the configuration parameter see
       :py:meth:`SageMaker.Client.create_hyper_parameter_tuning_job`
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str
   :param wait_for_completion: Set to True to wait until the tuning job finishes.
   :type wait_for_completion: bool
   :param check_interval: If wait is set to True, the time interval, in seconds,
       that this operation waits to check the status of the tuning job.
   :type check_interval: int
   :param max_ingestion_time: If wait is set to True, the operation fails
       if the tuning job doesn't finish within max_ingestion_time seconds. If you
       set this parameter to None, the operation does not timeout.
   :type max_ingestion_time: int

   .. py:attribute:: integer_fields
      :annotation: = [['HyperParameterTuningJobConfig', 'ResourceLimits', 'MaxNumberOfTrainingJobs'],...

      

   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerModelOperator(*, config, **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Create a SageMaker model.

   This operator returns The ARN of the model created in Amazon SageMaker

   :param config: The configuration necessary to create a model.

       For details of the configuration parameter see :py:meth:`SageMaker.Client.create_model`
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str

   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SageMakerTrainingOperator(*, config: dict, wait_for_completion: bool = True, print_log: bool = True, check_interval: int = 30, max_ingestion_time: Optional[int] = None, check_if_job_exists: bool = True, action_if_job_exists: str = 'increment', **kwargs)

   Bases: :py:obj:`SageMakerBaseOperator`

   Initiate a SageMaker training job.

   This operator returns The ARN of the training job created in Amazon SageMaker.

   :param config: The configuration necessary to start a training job (templated).

       For details of the configuration parameter see :py:meth:`SageMaker.Client.create_training_job`
   :type config: dict
   :param aws_conn_id: The AWS connection ID to use.
   :type aws_conn_id: str
   :param wait_for_completion: If wait is set to True, the time interval, in seconds,
       that the operation waits to check the status of the training job.
   :type wait_for_completion: bool
   :param print_log: if the operator should print the cloudwatch log during training
   :type print_log: bool
   :param check_interval: if wait is set to be true, this is the time interval
       in seconds which the operator will check the status of the training job
   :type check_interval: int
   :param max_ingestion_time: If wait is set to True, the operation fails if the training job
       doesn't finish within max_ingestion_time seconds. If you set this parameter to None,
       the operation does not timeout.
   :type max_ingestion_time: int
   :param check_if_job_exists: If set to true, then the operator will check whether a training job
       already exists for the name in the config.
   :type check_if_job_exists: bool
   :param action_if_job_exists: Behaviour if the job name already exists. Possible options are "increment"
       (default) and "fail".
       This is only relevant if check_if

   .. py:attribute:: integer_fields
      :annotation: = [['ResourceConfig', 'InstanceCount'], ['ResourceConfig', 'VolumeSizeInGB'],...

      

   .. py:method:: expand_role(self) -> None

      Placeholder for calling boto3's `expand_role`, which expands an IAM role name into an ARN.


   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



