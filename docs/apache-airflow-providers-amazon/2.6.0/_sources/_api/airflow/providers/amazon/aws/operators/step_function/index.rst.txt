:py:mod:`airflow.providers.amazon.aws.operators.step_function`
==============================================================

.. py:module:: airflow.providers.amazon.aws.operators.step_function


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.step_function.StepFunctionStartExecutionOperator
   airflow.providers.amazon.aws.operators.step_function.StepFunctionGetExecutionOutputOperator




.. py:class:: StepFunctionStartExecutionOperator(*, state_machine_arn: str, name: Optional[str] = None, state_machine_input: Union[dict, str, None] = None, aws_conn_id: str = 'aws_default', region_name: Optional[str] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   An Operator that begins execution of an Step Function State Machine

   Additional arguments may be specified and are passed down to the underlying BaseOperator.

   .. seealso::
       :class:`~airflow.models.BaseOperator`

   :param state_machine_arn: ARN of the Step Function State Machine
   :type state_machine_arn: str
   :param name: The name of the execution.
   :type name: Optional[str]
   :param state_machine_input: JSON data input to pass to the State Machine
   :type state_machine_input: Union[Dict[str, any], str, None]
   :param aws_conn_id: aws connection to uses
   :type aws_conn_id: str
   :param do_xcom_push: if True, execution_arn is pushed to XCom with key execution_arn.
   :type do_xcom_push: bool

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['state_machine_arn', 'name', 'input']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:attribute:: ui_color
      :annotation: = #f9c915

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: StepFunctionGetExecutionOutputOperator(*, execution_arn: str, aws_conn_id: str = 'aws_default', region_name: Optional[str] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   An Operator that begins execution of an Step Function State Machine

   Additional arguments may be specified and are passed down to the underlying BaseOperator.

   .. seealso::
       :class:`~airflow.models.BaseOperator`

   :param execution_arn: ARN of the Step Function State Machine Execution
   :type execution_arn: str
   :param aws_conn_id: aws connection to use, defaults to 'aws_default'
   :type aws_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['execution_arn']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:attribute:: ui_color
      :annotation: = #f9c915

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



