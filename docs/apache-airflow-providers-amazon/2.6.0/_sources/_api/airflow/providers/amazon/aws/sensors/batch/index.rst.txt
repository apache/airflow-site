:py:mod:`airflow.providers.amazon.aws.sensors.batch`
====================================================

.. py:module:: airflow.providers.amazon.aws.sensors.batch


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.batch.BatchSensor




.. py:class:: BatchSensor(*, job_id: str, aws_conn_id: str = 'aws_default', region_name: Optional[str] = None, **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Asks for the state of the Batch Job execution until it reaches a failure state or success state.
   If the job fails, the task will fail.

   :param job_id: Batch job_id to check the state for
   :type job_id: str
   :param aws_conn_id: aws connection to use, defaults to 'aws_default'
   :type aws_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_id']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:attribute:: ui_color
      :annotation: = #66c3ff

      

   .. py:method:: poke(self, context: airflow.utils.context.Context) -> bool

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: get_hook(self) -> airflow.providers.amazon.aws.hooks.batch_client.AwsBatchClientHook

      Create and return a AwsBatchClientHook



