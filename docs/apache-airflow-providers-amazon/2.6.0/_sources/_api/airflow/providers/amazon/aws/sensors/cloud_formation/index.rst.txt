:py:mod:`airflow.providers.amazon.aws.sensors.cloud_formation`
==============================================================

.. py:module:: airflow.providers.amazon.aws.sensors.cloud_formation

.. autoapi-nested-parse::

   This module contains sensors for AWS CloudFormation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.cloud_formation.CloudFormationCreateStackSensor
   airflow.providers.amazon.aws.sensors.cloud_formation.CloudFormationDeleteStackSensor




.. py:class:: CloudFormationCreateStackSensor(*, stack_name, aws_conn_id='aws_default', region_name=None, **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a stack to be created successfully on AWS CloudFormation.

   :param stack_name: The name of the stack to wait for (templated)
   :type stack_name: str
   :param aws_conn_id: ID of the Airflow connection where credentials and extra configuration are
       stored
   :type aws_conn_id: str
   :param poke_interval: Time in seconds that the job should wait between each try
   :type poke_interval: int

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['stack_name']

      

   .. py:attribute:: ui_color
      :annotation: = #C5CAE9

      

   .. py:method:: poke(self, context: airflow.utils.context.Context)

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: hook(self) -> airflow.providers.amazon.aws.hooks.cloud_formation.CloudFormationHook

      Create and return an CloudFormationHook



.. py:class:: CloudFormationDeleteStackSensor(*, stack_name: str, aws_conn_id: str = 'aws_default', region_name: Optional[str] = None, **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a stack to be deleted successfully on AWS CloudFormation.

   :param stack_name: The name of the stack to wait for (templated)
   :type stack_name: str
   :param aws_conn_id: ID of the Airflow connection where credentials and extra configuration are
       stored
   :type aws_conn_id: str
   :param poke_interval: Time in seconds that the job should wait between each try
   :type poke_interval: int

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['stack_name']

      

   .. py:attribute:: ui_color
      :annotation: = #C5CAE9

      

   .. py:method:: poke(self, context: airflow.utils.context.Context)

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: hook(self) -> airflow.providers.amazon.aws.hooks.cloud_formation.CloudFormationHook

      Create and return an CloudFormationHook



