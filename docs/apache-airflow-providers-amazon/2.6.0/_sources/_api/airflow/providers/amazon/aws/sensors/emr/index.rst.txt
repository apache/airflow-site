:py:mod:`airflow.providers.amazon.aws.sensors.emr`
==================================================

.. py:module:: airflow.providers.amazon.aws.sensors.emr


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.emr.EmrBaseSensor
   airflow.providers.amazon.aws.sensors.emr.EmrContainerSensor
   airflow.providers.amazon.aws.sensors.emr.EmrJobFlowSensor
   airflow.providers.amazon.aws.sensors.emr.EmrStepSensor




.. py:class:: EmrBaseSensor(*, aws_conn_id: str = 'aws_default', **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Contains general sensor behavior for EMR.

   Subclasses should implement following methods:
       - ``get_emr_response()``
       - ``state_from_response()``
       - ``failure_message_from_response()``

   Subclasses should set ``target_states`` and ``failed_states`` fields.

   :param aws_conn_id: aws connection to uses
   :type aws_conn_id: str

   .. py:attribute:: ui_color
      :annotation: = #66c3ff

      

   .. py:method:: get_hook(self) -> airflow.providers.amazon.aws.hooks.emr.EmrHook

      Get EmrHook


   .. py:method:: poke(self, context: airflow.utils.context.Context)

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: get_emr_response(self) -> Dict[str, Any]
      :abstractmethod:

      Make an API call with boto3 and get response.

      :return: response
      :rtype: dict[str, Any]


   .. py:method:: state_from_response(response: Dict[str, Any]) -> str
      :staticmethod:
      :abstractmethod:

      Get state from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: state
      :rtype: str


   .. py:method:: failure_message_from_response(response: Dict[str, Any]) -> Optional[str]
      :staticmethod:
      :abstractmethod:

      Get failure message from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: failure message
      :rtype: Optional[str]



.. py:class:: EmrContainerSensor(*, virtual_cluster_id: str, job_id: str, max_retries: Optional[int] = None, aws_conn_id: str = 'aws_default', poll_interval: int = 10, **kwargs: Any)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Asks for the state of the job run until it reaches a failure state or success state.
   If the job run fails, the task will fail.

   :param job_id: job_id to check the state of
   :type job_id: str
   :param max_retries: Number of times to poll for query state before
       returning the current state, defaults to None
   :type max_retries: int
   :param aws_conn_id: aws connection to use, defaults to 'aws_default'
   :type aws_conn_id: str
   :param poll_interval: Time in seconds to wait between two consecutive call to
       check query status on athena, defaults to 10
   :type poll_interval: int

   .. py:attribute:: INTERMEDIATE_STATES
      :annotation: = ['PENDING', 'SUBMITTED', 'RUNNING']

      

   .. py:attribute:: FAILURE_STATES
      :annotation: = ['FAILED', 'CANCELLED', 'CANCEL_PENDING']

      

   .. py:attribute:: SUCCESS_STATES
      :annotation: = ['COMPLETED']

      

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['virtual_cluster_id', 'job_id']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:attribute:: ui_color
      :annotation: = #66c3ff

      

   .. py:method:: poke(self, context: airflow.utils.context.Context) -> bool

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: hook(self) -> airflow.providers.amazon.aws.hooks.emr.EmrContainerHook

      Create and return an EmrContainerHook



.. py:class:: EmrJobFlowSensor(*, job_flow_id: str, target_states: Optional[Iterable[str]] = None, failed_states: Optional[Iterable[str]] = None, **kwargs)

   Bases: :py:obj:`EmrBaseSensor`

   Asks for the state of the EMR JobFlow (Cluster) until it reaches
   any of the target states.
   If it fails the sensor errors, failing the task.

   With the default target states, sensor waits cluster to be terminated.
   When target_states is set to ['RUNNING', 'WAITING'] sensor waits
   until job flow to be ready (after 'STARTING' and 'BOOTSTRAPPING' states)

   :param job_flow_id: job_flow_id to check the state of
   :type job_flow_id: str
   :param target_states: the target states, sensor waits until
       job flow reaches any of these states
   :type target_states: list[str]
   :param failed_states: the failure states, sensor fails when
       job flow reaches any of these states
   :type failed_states: list[str]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_flow_id', 'target_states', 'failed_states']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: get_emr_response(self) -> Dict[str, Any]

      Make an API call with boto3 and get cluster-level details.

      .. seealso::
          https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr.html#EMR.Client.describe_cluster

      :return: response
      :rtype: dict[str, Any]


   .. py:method:: state_from_response(response: Dict[str, Any]) -> str
      :staticmethod:

      Get state from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: current state of the cluster
      :rtype: str


   .. py:method:: failure_message_from_response(response: Dict[str, Any]) -> Optional[str]
      :staticmethod:

      Get failure message from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: failure message
      :rtype: Optional[str]



.. py:class:: EmrStepSensor(*, job_flow_id: str, step_id: str, target_states: Optional[Iterable[str]] = None, failed_states: Optional[Iterable[str]] = None, **kwargs)

   Bases: :py:obj:`EmrBaseSensor`

   Asks for the state of the step until it reaches any of the target states.
   If it fails the sensor errors, failing the task.

   With the default target states, sensor waits step to be completed.

   :param job_flow_id: job_flow_id which contains the step check the state of
   :type job_flow_id: str
   :param step_id: step to check the state of
   :type step_id: str
   :param target_states: the target states, sensor waits until
       step reaches any of these states
   :type target_states: list[str]
   :param failed_states: the failure states, sensor fails when
       step reaches any of these states
   :type failed_states: list[str]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_flow_id', 'step_id', 'target_states', 'failed_states']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: get_emr_response(self) -> Dict[str, Any]

      Make an API call with boto3 and get details about the cluster step.

      .. seealso::
          https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/emr.html#EMR.Client.describe_step

      :return: response
      :rtype: dict[str, Any]


   .. py:method:: state_from_response(response: Dict[str, Any]) -> str
      :staticmethod:

      Get state from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: execution state of the cluster step
      :rtype: str


   .. py:method:: failure_message_from_response(response: Dict[str, Any]) -> Optional[str]
      :staticmethod:

      Get failure message from response dictionary.

      :param response: response from AWS API
      :type response: dict[str, Any]
      :return: failure message
      :rtype: Optional[str]



