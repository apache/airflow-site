:py:mod:`airflow.providers.amazon.aws.sensors.sqs`
==================================================

.. py:module:: airflow.providers.amazon.aws.sensors.sqs

.. autoapi-nested-parse::

   Reads and then deletes the message from SQS queue



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.sqs.SQSSensor




.. py:class:: SQSSensor(*, sqs_queue, aws_conn_id: str = 'aws_default', max_messages: int = 5, wait_time_seconds: int = 1, visibility_timeout: Optional[int] = None, message_filtering: Optional[typing_extensions.Literal[literal, jsonpath]] = None, message_filtering_match_values: Any = None, message_filtering_config: Any = None, **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Get messages from an SQS queue and then deletes  the message from the SQS queue.
   If deletion of messages fails an AirflowException is thrown otherwise, the message
   is pushed through XCom with the key ``messages``.

   :param aws_conn_id: AWS connection id
   :type aws_conn_id: str
   :param sqs_queue: The SQS queue url (templated)
   :type sqs_queue: str
   :param max_messages: The maximum number of messages to retrieve for each poke (templated)
   :type max_messages: int
   :param wait_time_seconds: The time in seconds to wait for receiving messages (default: 1 second)
   :type wait_time_seconds: int
   :param visibility_timeout: Visibility timeout, a period of time during which
       Amazon SQS prevents other consumers from receiving and processing the message.
   :type visibility_timeout: Optional[Int]
   :param message_filtering: Specified how received messages should be filtered. Supported options are:
       `None` (no filtering, default), `'literal'` (message Body literal match) or `'jsonpath'`
       (message Body filtered using a JSONPath expression).
       You may add further methods by overriding the relevant class methods.
   :type message_filtering: Optional[Literal["literal", "jsonpath"]]
   :param message_filtering_match_values: Optional value/s for the message filter to match on.
       For example, with literal matching, if a message body matches any of the specified values
       then it is included. For JSONPath matching, the result of the JSONPath expression is used
       and may match any of the specified values.
   :type message_filtering_match_values: Any
   :param message_filtering_config: Additional configuration to pass to the message filter.
       For example with JSONPath filtering you can pass a JSONPath expression string here,
       such as `'foo[*].baz'`. Messages with a Body which does not match are ignored.
   :type message_filtering_config: Any

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sqs_queue', 'max_messages', 'message_filtering_config']

      

   .. py:method:: poke(self, context: airflow.utils.context.Context)

      Check for message on subscribed queue and write to xcom the message with key ``messages``

      :param context: the context object
      :type context: dict
      :return: ``True`` if message is available or ``False``


   .. py:method:: get_hook(self) -> airflow.providers.amazon.aws.hooks.sqs.SQSHook

      Create and return an SQSHook


   .. py:method:: filter_messages(self, messages)


   .. py:method:: filter_messages_literal(self, messages)


   .. py:method:: filter_messages_jsonpath(self, messages)



