:py:mod:`airflow.providers.amazon.aws.transfers.salesforce_to_s3`
=================================================================

.. py:module:: airflow.providers.amazon.aws.transfers.salesforce_to_s3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.transfers.salesforce_to_s3.SalesforceToS3Operator




.. py:class:: SalesforceToS3Operator(*, salesforce_query: str, s3_bucket_name: str, s3_key: str, salesforce_conn_id: str, export_format: str = 'csv', query_params: Optional[Dict] = None, include_deleted: bool = False, coerce_to_timestamp: bool = False, record_time_added: bool = False, aws_conn_id: str = 'aws_default', replace: bool = False, encrypt: bool = False, gzip: bool = False, acl_policy: Optional[str] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Submits a Salesforce query and uploads the results to AWS S3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SalesforceToS3Operator`

   :param salesforce_query: The query to send to Salesforce.
   :type salesforce_query: str
   :param s3_bucket_name: The bucket name to upload to.
   :type s3_bucket_name: str
   :param s3_key: The object name to set when uploading the file.
   :type s3_key: str
   :param salesforce_conn_id: The name of the connection that has the parameters needed
       to connect to Salesforce.
   :type salesforce_conn_id: str
   :param export_format: Desired format of files to be exported.
   :type export_format: str
   :param query_params: Additional optional arguments to be passed to the HTTP request querying Salesforce.
   :type query_params: dict
   :param include_deleted: True if the query should include deleted records.
   :type include_deleted: bool
   :param coerce_to_timestamp: True if you want all datetime fields to be converted into Unix timestamps.
       False if you want them to be left in the same format as they were in Salesforce.
       Leaving the value as False will result in datetimes being strings. Default: False
   :type coerce_to_timestamp: bool
   :param record_time_added: True if you want to add a Unix timestamp field
       to the resulting data that marks when the data was fetched from Salesforce. Default: False
   :type record_time_added: bool
   :param aws_conn_id: The name of the connection that has the parameters we need to connect to S3.
   :type aws_conn_id: str
   :param replace: A flag to decide whether or not to overwrite the S3 key if it already exists. If set to
       False and the key exists an error will be raised.
   :type replace: bool
   :param encrypt: If True, the file will be encrypted on the server-side by S3 and will
       be stored in an encrypted form while at rest in S3.
   :type encrypt: bool
   :param gzip: If True, the file will be compressed locally.
   :type gzip: bool
   :param acl_policy: String specifying the canned ACL policy for the file being uploaded
       to the S3 bucket.
   :type acl_policy: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['salesforce_query', 's3_bucket_name', 's3_key']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = ['.sql']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> str

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



