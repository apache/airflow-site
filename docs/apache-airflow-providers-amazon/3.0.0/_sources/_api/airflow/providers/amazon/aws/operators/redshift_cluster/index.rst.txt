:py:mod:`airflow.providers.amazon.aws.operators.redshift_cluster`
=================================================================

.. py:module:: airflow.providers.amazon.aws.operators.redshift_cluster


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.redshift_cluster.RedshiftResumeClusterOperator
   airflow.providers.amazon.aws.operators.redshift_cluster.RedshiftPauseClusterOperator




.. py:class:: RedshiftResumeClusterOperator(*, cluster_identifier, aws_conn_id = 'aws_default', **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Resume a paused AWS Redshift Cluster

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:RedshiftResumeClusterOperator`

   :param cluster_identifier: id of the AWS Redshift Cluster
   :param aws_conn_id: aws connection to use

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['cluster_identifier']

      

   .. py:attribute:: ui_color
      :annotation: = #eeaa11

      

   .. py:attribute:: ui_fgcolor
      :annotation: = #ffffff

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: RedshiftPauseClusterOperator(*, cluster_identifier, aws_conn_id = 'aws_default', **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Pause an AWS Redshift Cluster if it has status `available`.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:RedshiftPauseClusterOperator`

   :param cluster_identifier: id of the AWS Redshift Cluster
   :param aws_conn_id: aws connection to use

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['cluster_identifier']

      

   .. py:attribute:: ui_color
      :annotation: = #eeaa11

      

   .. py:attribute:: ui_fgcolor
      :annotation: = #ffffff

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



