:py:mod:`airflow.providers.amazon.aws.sensors.sagemaker`
========================================================

.. py:module:: airflow.providers.amazon.aws.sensors.sagemaker


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.sagemaker.SageMakerBaseSensor
   airflow.providers.amazon.aws.sensors.sagemaker.SageMakerEndpointSensor
   airflow.providers.amazon.aws.sensors.sagemaker.SageMakerTransformSensor
   airflow.providers.amazon.aws.sensors.sagemaker.SageMakerTuningSensor
   airflow.providers.amazon.aws.sensors.sagemaker.SageMakerTrainingSensor




.. py:class:: SageMakerBaseSensor(*, aws_conn_id = 'aws_default', **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Contains general sensor behavior for SageMaker.

   Subclasses should implement get_sagemaker_response()
   and state_from_response() methods.
   Subclasses should also implement NON_TERMINAL_STATES and FAILED_STATE methods.

   .. py:attribute:: ui_color
      :annotation: = #ededed

      

   .. py:method:: get_hook(self)

      Get SageMakerHook.


   .. py:method:: poke(self, context)

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: non_terminal_states(self)
      :abstractmethod:

      Placeholder for returning states with should not terminate.


   .. py:method:: failed_states(self)
      :abstractmethod:

      Placeholder for returning states with are considered failed.


   .. py:method:: get_sagemaker_response(self)
      :abstractmethod:

      Placeholder for checking status of a SageMaker task.


   .. py:method:: get_failed_reason_from_response(self, response)

      Placeholder for extracting the reason for failure from an AWS response.


   .. py:method:: state_from_response(self, response)
      :abstractmethod:

      Placeholder for extracting the state from an AWS response.



.. py:class:: SageMakerEndpointSensor(*, endpoint_name, **kwargs)

   Bases: :py:obj:`SageMakerBaseSensor`

   Asks for the state of the endpoint state until it reaches a
   terminal state.
   If it fails the sensor errors, the task fails.


   :param job_name: job_name of the endpoint instance to check the state of


   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['endpoint_name']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: non_terminal_states(self)

      Placeholder for returning states with should not terminate.


   .. py:method:: failed_states(self)

      Placeholder for returning states with are considered failed.


   .. py:method:: get_sagemaker_response(self)

      Placeholder for checking status of a SageMaker task.


   .. py:method:: get_failed_reason_from_response(self, response)

      Placeholder for extracting the reason for failure from an AWS response.


   .. py:method:: state_from_response(self, response)

      Placeholder for extracting the state from an AWS response.



.. py:class:: SageMakerTransformSensor(*, job_name, **kwargs)

   Bases: :py:obj:`SageMakerBaseSensor`

   Asks for the state of the transform state until it reaches a
   terminal state.
   The sensor will error if the job errors, throwing a
   AirflowException
   containing the failure reason.

   :param
   job_name: job_name of the transform job instance to check the state of


   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_name']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: non_terminal_states(self)

      Placeholder for returning states with should not terminate.


   .. py:method:: failed_states(self)

      Placeholder for returning states with are considered failed.


   .. py:method:: get_sagemaker_response(self)

      Placeholder for checking status of a SageMaker task.


   .. py:method:: get_failed_reason_from_response(self, response)

      Placeholder for extracting the reason for failure from an AWS response.


   .. py:method:: state_from_response(self, response)

      Placeholder for extracting the state from an AWS response.



.. py:class:: SageMakerTuningSensor(*, job_name, **kwargs)

   Bases: :py:obj:`SageMakerBaseSensor`

   Asks for the state of the tuning state until it reaches a terminal
   state.
   The sensor will error if the job errors, throwing a
   AirflowException
   containing the failure reason.

   :param
   job_name: job_name of the tuning instance to check the state of
   :type
   job_name: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_name']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: non_terminal_states(self)

      Placeholder for returning states with should not terminate.


   .. py:method:: failed_states(self)

      Placeholder for returning states with are considered failed.


   .. py:method:: get_sagemaker_response(self)

      Placeholder for checking status of a SageMaker task.


   .. py:method:: get_failed_reason_from_response(self, response)

      Placeholder for extracting the reason for failure from an AWS response.


   .. py:method:: state_from_response(self, response)

      Placeholder for extracting the state from an AWS response.



.. py:class:: SageMakerTrainingSensor(*, job_name, print_log=True, **kwargs)

   Bases: :py:obj:`SageMakerBaseSensor`

   Asks for the state of the training state until it reaches a
   terminal state.
   If it fails the sensor errors, failing the task.


   :param job_name: name of the SageMaker training job to check the state of

   :param print_log: if the operator should print the cloudwatch log

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['job_name']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = []

      

   .. py:method:: init_log_resource(self, hook)

      Set tailing LogState for associated training job.


   .. py:method:: non_terminal_states(self)

      Placeholder for returning states with should not terminate.


   .. py:method:: failed_states(self)

      Placeholder for returning states with are considered failed.


   .. py:method:: get_sagemaker_response(self)

      Placeholder for checking status of a SageMaker task.


   .. py:method:: get_failed_reason_from_response(self, response)

      Placeholder for extracting the reason for failure from an AWS response.


   .. py:method:: state_from_response(self, response)

      Placeholder for extracting the state from an AWS response.



