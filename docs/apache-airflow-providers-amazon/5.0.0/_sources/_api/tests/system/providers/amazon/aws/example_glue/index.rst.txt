:py:mod:`tests.system.providers.amazon.aws.example_glue`
========================================================

.. py:module:: tests.system.providers.amazon.aws.example_glue


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   tests.system.providers.amazon.aws.example_glue.delete_logs
   tests.system.providers.amazon.aws.example_glue.glue_cleanup
   tests.system.providers.amazon.aws.example_glue.set_up



Attributes
~~~~~~~~~~

.. autoapisummary::

   tests.system.providers.amazon.aws.example_glue.DAG_ID
   tests.system.providers.amazon.aws.example_glue.ROLE_ARN_KEY
   tests.system.providers.amazon.aws.example_glue.sys_test_context_task
   tests.system.providers.amazon.aws.example_glue.EXAMPLE_CSV
   tests.system.providers.amazon.aws.example_glue.EXAMPLE_SCRIPT
   tests.system.providers.amazon.aws.example_glue.test_context
   tests.system.providers.amazon.aws.example_glue.test_run


.. py:data:: DAG_ID
   :annotation: = example_glue

   

.. py:data:: ROLE_ARN_KEY
   :annotation: = ROLE_ARN

   

.. py:data:: sys_test_context_task
   

   

.. py:data:: EXAMPLE_CSV
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        apple,0.5
        milk,2.5
        bread,4.0


    .. raw:: html

        </details>

   

.. py:data:: EXAMPLE_SCRIPT
   :annotation: = Multiline-String

    .. raw:: html

        <details><summary>Show Value</summary>

    .. code-block:: text
        :linenos:

        
        from pyspark.context import SparkContext
        from awsglue.context import GlueContext

        glueContext = GlueContext(SparkContext.getOrCreate())
        datasource = glueContext.create_dynamic_frame.from_catalog(
                     database='{db_name}', table_name='input')
        print('There are %s items in the table' % datasource.count())

        datasource.toDF().write.format('csv').mode("append").save('s3://{bucket_name}/output')


    .. raw:: html

        </details>

   

.. py:function:: delete_logs(job_id, glue_crawler_name)

   Glue generates four Cloudwatch log groups and multiple log streams and leaves them.


.. py:function:: glue_cleanup(glue_crawler_name, glue_job_name, glue_db_name)


.. py:function:: set_up(env_id, role_arn)


.. py:data:: test_context
   

   

.. py:data:: test_run
   

   

