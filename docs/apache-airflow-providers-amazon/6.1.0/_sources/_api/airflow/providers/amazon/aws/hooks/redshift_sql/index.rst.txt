:py:mod:`airflow.providers.amazon.aws.hooks.redshift_sql`
=========================================================

.. py:module:: airflow.providers.amazon.aws.hooks.redshift_sql


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.redshift_sql.RedshiftSQLHook




.. py:class:: RedshiftSQLHook(*args, schema = None, log_sql = True, **kwargs)

   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   Execute statements against Amazon Redshift, using redshift_connector

   This hook requires the redshift_conn_id connection.

   :param redshift_conn_id: reference to
       :ref:`Amazon Redshift connection id<howto/connection:redshift>`

   .. note::
       get_sqlalchemy_engine() and get_uri() depend on sqlalchemy-amazon-redshift

   .. py:attribute:: conn_name_attr
      :annotation: = redshift_conn_id

      

   .. py:attribute:: default_conn_name
      :annotation: = redshift_default

      

   .. py:attribute:: conn_type
      :annotation: = redshift

      

   .. py:attribute:: hook_name
      :annotation: = Amazon Redshift

      

   .. py:attribute:: supports_autocommit
      :annotation: = True

      

   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behavior


   .. py:method:: conn()


   .. py:method:: get_uri()

      Overrides DbApiHook get_uri to use redshift_connector sqlalchemy dialect as driver name


   .. py:method:: get_sqlalchemy_engine(engine_kwargs=None)

      Overrides DbApiHook get_sqlalchemy_engine to pass redshift_connector specific kwargs


   .. py:method:: get_table_primary_key(table, schema = 'public')

      Helper method that returns the table primary key
      :param table: Name of the target table
      :param schema: Name of the target schema, public by default
      :return: Primary key columns list


   .. py:method:: get_conn()

      Returns a redshift_connector.Connection object



