:py:mod:`airflow.providers.amazon.aws.hooks.rds`
================================================

.. py:module:: airflow.providers.amazon.aws.hooks.rds

.. autoapi-nested-parse::

   Interact with AWS RDS.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.rds.RdsHook




.. py:class:: RdsHook(*args, **kwargs)

   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsGenericHook`\ [\ :py:obj:`mypy_boto3_rds.RDSClient`\ ]

   Interact with AWS RDS using proper client from the boto3 library.

   Hook attribute `conn` has all methods that listed in documentation

   .. seealso::
       - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html
       - https://docs.aws.amazon.com/rds/index.html

   Additional arguments (such as ``aws_conn_id`` or ``region_name``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsGenericHook`

   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: get_db_snapshot_state(snapshot_id)

      Get the current state of a DB instance snapshot.

      :param snapshot_id: The ID of the target DB instance snapshot
      :return: Returns the status of the DB snapshot as a string (eg. "available")
      :rtype: str
      :raises AirflowNotFoundException: If the DB instance snapshot does not exist.


   .. py:method:: wait_for_db_snapshot_state(snapshot_id, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_db_snapshots` until the target state is reached.
      An error is raised after a max number of attempts.

      :param snapshot_id: The ID of the target DB instance snapshot
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made


   .. py:method:: get_db_cluster_snapshot_state(snapshot_id)

      Get the current state of a DB cluster snapshot.

      :param snapshot_id: The ID of the target DB cluster.
      :return: Returns the status of the DB cluster snapshot as a string (eg. "available")
      :rtype: str
      :raises AirflowNotFoundException: If the DB cluster snapshot does not exist.


   .. py:method:: wait_for_db_cluster_snapshot_state(snapshot_id, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_db_cluster_snapshots` until the target state is reached.
      An error is raised after a max number of attempts.

      :param snapshot_id: The ID of the target DB cluster snapshot
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made

      .. seealso::
          A list of possible values for target_state:
          https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html#RDS.Client.describe_db_cluster_snapshots


   .. py:method:: get_export_task_state(export_task_id)

      Gets the current state of an RDS snapshot export to Amazon S3.

      :param export_task_id: The identifier of the target snapshot export task.
      :return: Returns the status of the snapshot export task as a string (eg. "canceled")
      :rtype: str
      :raises AirflowNotFoundException: If the export task does not exist.


   .. py:method:: wait_for_export_task_state(export_task_id, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_export_tasks` until the target state is reached.
      An error is raised after a max number of attempts.

      :param export_task_id: The identifier of the target snapshot export task.
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made

      .. seealso::
          A list of possible values for target_state:
          https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html#RDS.Client.describe_export_tasks


   .. py:method:: get_event_subscription_state(subscription_name)

      Gets the current state of an RDS snapshot export to Amazon S3.

      :param subscription_name: The name of the target RDS event notification subscription.
      :return: Returns the status of the event subscription as a string (eg. "active")
      :rtype: str
      :raises AirflowNotFoundException: If the event subscription does not exist.


   .. py:method:: wait_for_event_subscription_state(subscription_name, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_event_subscriptions` until the target state is reached.
      An error is raised after a max number of attempts.

      :param subscription_name: The name of the target RDS event notification subscription.
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made

      .. seealso::
          A list of possible values for target_state:
          https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rds.html#RDS.Client.describe_event_subscriptions


   .. py:method:: get_db_instance_state(db_instance_id)

      Get the current state of a DB instance.

      :param snapshot_id: The ID of the target DB instance.
      :return: Returns the status of the DB instance as a string (eg. "available")
      :rtype: str
      :raises AirflowNotFoundException: If the DB instance does not exist.


   .. py:method:: wait_for_db_instance_state(db_instance_id, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_db_instances` until the target state is reached.
      An error is raised after a max number of attempts.

      :param db_instance_id: The ID of the target DB instance.
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made

      .. seealso::
          For information about DB instance statuses, see Viewing DB instance status in the Amazon RDS
          User Guide.
          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status


   .. py:method:: get_db_cluster_state(db_cluster_id)

      Get the current state of a DB cluster.

      :param snapshot_id: The ID of the target DB cluster.
      :return: Returns the status of the DB cluster as a string (eg. "available")
      :rtype: str
      :raises AirflowNotFoundException: If the DB cluster does not exist.


   .. py:method:: wait_for_db_cluster_state(db_cluster_id, target_state, check_interval = 30, max_attempts = 40)

      Polls :py:meth:`RDS.Client.describe_db_clusters` until the target state is reached.
      An error is raised after a max number of attempts.

      :param db_cluster_id: The ID of the target DB cluster.
      :param target_state: Wait until this state is reached
      :param check_interval: The amount of time in seconds to wait between attempts
      :param max_attempts: The maximum number of attempts to be made

      .. seealso::
          For information about DB instance statuses, see Viewing DB instance status in the Amazon RDS
          User Guide.
          https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status



