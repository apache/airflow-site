:py:mod:`airflow.providers.amazon.aws.utils.waiter`
===================================================

.. py:module:: airflow.providers.amazon.aws.utils.waiter


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.utils.waiter.waiter
   airflow.providers.amazon.aws.utils.waiter.get_state



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.utils.waiter.log


.. py:data:: log
   

   

.. py:function:: waiter(get_state_callable, get_state_args, parse_response, desired_state, failure_states, object_type, action, countdown = 25 * 60, check_interval_seconds = 60)

   Will call get_state_callable until it reaches the desired_state or the failure_states.
   It will also time out if it waits longer than countdown seconds.

   :param get_state_callable: A callable to run until it returns True
   :param get_state_args: Arguments to pass to get_state_callable
   :param parse_response: Dictionary keys to extract state from response of get_state_callable
   :param desired_state: Wait until the getter returns this value
   :param failure_states: A set of states which indicate failure and should throw an
       exception if any are reached before the desired_state
   :param object_type: Used for the reporting string. What are you waiting for? (application, job, etc)
   :param action: Used for the reporting string. What action are you waiting for? (created, deleted, etc)
   :param countdown: Total amount of time the waiter should wait for the desired state
       before timing out (in seconds). Defaults to 25 * 60 seconds.
   :param check_interval_seconds: Number of seconds waiter should wait before attempting
       to retry get_state_callable. Defaults to 60 seconds.


.. py:function:: get_state(response, keys)


