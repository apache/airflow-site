:py:mod:`airflow.providers.amazon.aws.auth_manager.aws_auth_manager`
====================================================================

.. py:module:: airflow.providers.amazon.aws.auth_manager.aws_auth_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.auth_manager.aws_auth_manager.AwsAuthManager




.. py:class:: AwsAuthManager(appbuilder)


   Bases: :py:obj:`airflow.auth.managers.base_auth_manager.BaseAuthManager`

   AWS auth manager.

   Leverages AWS services such as Amazon Identity Center and Amazon Verified Permissions to perform
   authentication and authorization in Airflow.

   :param appbuilder: the flask app builder

   .. py:method:: avp_facade()


   .. py:method:: get_user()

      Return the user associated to the user in session.


   .. py:method:: is_logged_in()

      Return whether the user is logged in.


   .. py:method:: is_authorized_configuration(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on configuration.

      :param method: the method to perform
      :param details: optional details about the configuration
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_cluster_activity(*, method, user = None)

      Return whether the user is authorized to perform a given action on the cluster activity.

      :param method: the method to perform
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_connection(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a connection.

      :param method: the method to perform
      :param details: optional details about the connection
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_dag(*, method, access_entity = None, details = None, user = None)

      Return whether the user is authorized to perform a given action on a DAG.

      :param method: the method to perform
      :param access_entity: the kind of DAG information the authorization request is about.
          If not provided, the authorization request is about the DAG itself
      :param details: optional details about the DAG
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_dataset(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a dataset.

      :param method: the method to perform
      :param details: optional details about the dataset
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_pool(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a pool.

      :param method: the method to perform
      :param details: optional details about the pool
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_variable(*, method, details = None, user = None)

      Return whether the user is authorized to perform a given action on a variable.

      :param method: the method to perform
      :param details: optional details about the variable
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: is_authorized_view(*, access_view, user = None)

      Return whether the user is authorized to access a read-only state of the installation.

      :param access_view: the specific read-only view/state the authorization request is about.
      :param user: the user to perform the action on. If not provided (or None), it uses the current user


   .. py:method:: get_url_login(**kwargs)

      Return the login page url.


   .. py:method:: get_url_logout()

      Return the logout page url.


   .. py:method:: security_manager()

      Return the security manager.

      By default, Airflow comes with the default security manager
      ``airflow.www.security_manager.AirflowSecurityManagerV2``. The auth manager might need to extend this
      default security manager for its own purposes.

      By default, return the default AirflowSecurityManagerV2.



