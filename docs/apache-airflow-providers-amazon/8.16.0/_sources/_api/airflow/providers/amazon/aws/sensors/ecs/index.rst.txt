:py:mod:`airflow.providers.amazon.aws.sensors.ecs`
==================================================

.. py:module:: airflow.providers.amazon.aws.sensors.ecs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.ecs.EcsBaseSensor
   airflow.providers.amazon.aws.sensors.ecs.EcsClusterStateSensor
   airflow.providers.amazon.aws.sensors.ecs.EcsTaskDefinitionStateSensor
   airflow.providers.amazon.aws.sensors.ecs.EcsTaskStateSensor




.. py:class:: EcsBaseSensor(*, aws_conn_id = 'aws_default', region_name = None, verify = None, botocore_config = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.ecs.EcsHook`\ ]

   Contains general sensor behavior for Elastic Container Service.

   .. py:attribute:: aws_hook_class

      

   .. py:method:: client()

      Create and return an EcsHook client.



.. py:class:: EcsClusterStateSensor(*, cluster_name, target_state = EcsClusterStates.ACTIVE, failure_states = None, **kwargs)


   Bases: :py:obj:`EcsBaseSensor`

   Poll the cluster state until it reaches a terminal state; raises AirflowException with the failure reason.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/sensor:EcsClusterStateSensor`

   :param cluster_name: The name of your cluster.
   :param target_state: Success state to watch for. (Default: "ACTIVE")
   :param failure_states: Fail if any of these states are reached before the
        Success State. (Default: "FAILED" or "INACTIVE")

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: EcsTaskDefinitionStateSensor(*, task_definition, target_state = EcsTaskDefinitionStates.ACTIVE, **kwargs)


   Bases: :py:obj:`EcsBaseSensor`

   Poll task definition until it reaches a terminal state; raise AirflowException with the failure reason.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/sensor:EcsTaskDefinitionStateSensor`

   :param task_definition: The family for the latest ACTIVE revision, family and
        revision (family:revision ) for a specific revision in the family, or full
        Amazon Resource Name (ARN) of the task definition.
   :param target_state: Success state to watch for. (Default: "ACTIVE")

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: EcsTaskStateSensor(*, cluster, task, target_state = EcsTaskStates.RUNNING, failure_states = None, **kwargs)


   Bases: :py:obj:`EcsBaseSensor`

   Poll the task state until it reaches a terminal state; raises AirflowException with the failure reason.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/sensor:EcsTaskStateSensor`

   :param cluster: The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task.
   :param task: The task ID or full ARN of the task to poll.
   :param target_state: Success state to watch for. (Default: "ACTIVE")
   :param failure_states: Fail if any of these states are reached before
        the Success State. (Default: "STOPPED")

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: poke(context)

      Override when deriving this class.



