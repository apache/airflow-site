:py:mod:`tests.system.providers.amazon.aws.example_bedrock_knowledge_base`
==========================================================================

.. py:module:: tests.system.providers.amazon.aws.example_bedrock_knowledge_base


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.create_opensearch_policies
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.create_collection
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.create_vector_index
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.copy_data_to_s3
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.get_collection_arn
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.delete_data_source
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.delete_knowledge_base
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.delete_vector_index
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.delete_collection
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.delete_opensearch_policies



Attributes
~~~~~~~~~~

.. autoapisummary::

   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.ROLE_ARN_KEY
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.sys_test_context_task
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.DAG_ID
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.log
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.test_context
   tests.system.providers.amazon.aws.example_bedrock_knowledge_base.test_run


.. py:data:: ROLE_ARN_KEY
   :value: 'ROLE_ARN'

   

.. py:data:: sys_test_context_task

   

.. py:data:: DAG_ID
   :value: 'example_bedrock_knowledge_base'

   

.. py:data:: log

   

.. py:function:: create_opensearch_policies(bedrock_role_arn, collection_name, policy_name_suffix)

   Create security, network and data access policies within Amazon OpenSearch Serverless.

   :param bedrock_role_arn: Arn of the Bedrock Knowledge Base Execution Role.
   :param collection_name: Name of the OpenSearch collection to apply the policies to.
   :param policy_name_suffix: EnvironmentID or other unique suffix to append to the policy name.


.. py:function:: create_collection(collection_name)

   Call the Amazon OpenSearch Serverless API and create a collection with the provided name.

   :param collection_name: The name of the Collection to create.


.. py:function:: create_vector_index(index_name, collection_id, region)

   Use the OpenSearchPy client to create the vector index for the Amazon Open Search Serverless Collection.

   :param index_name: The vector index name to create.
   :param collection_id: ID of the collection to be indexed.
   :param region: Name of the AWS region the collection resides in.


.. py:function:: copy_data_to_s3(bucket)

   Download some sample data and upload it to 3S.

   :param bucket: Name of the Amazon S3 bucket to send the data to.


.. py:function:: get_collection_arn(collection_id)

   Return a collection ARN for a given collection ID.

   :param collection_id: ID of the collection to be indexed.


.. py:function:: delete_data_source(knowledge_base_id, data_source_id)

   Delete the Amazon Bedrock data source created earlier.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto_operator:BedrockDeleteDataSource`

   :param knowledge_base_id: The unique identifier of the knowledge base which the data source is attached to.
   :param data_source_id: The unique identifier of the data source to delete.


.. py:function:: delete_knowledge_base(knowledge_base_id)

   Delete the Amazon Bedrock knowledge base created earlier.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:BedrockDeleteKnowledgeBase`

   :param knowledge_base_id: The unique identifier of the knowledge base to delete.


.. py:function:: delete_vector_index(index_name, collection_id)

   Delete the vector index created earlier.

   :param index_name: The name of the vector index to delete.
   :param collection_id: ID of the collection to be indexed.


.. py:function:: delete_collection(collection_id)

   Delete the OpenSearch collection created earlier.

   :param collection_id: ID of the collection to be indexed.


.. py:function:: delete_opensearch_policies(collection_name)

   Delete the security, network and data access policies created earlier.

   :param collection_name: All policies in the given collection name will be deleted.


.. py:data:: test_context

   

.. py:data:: test_run

   

