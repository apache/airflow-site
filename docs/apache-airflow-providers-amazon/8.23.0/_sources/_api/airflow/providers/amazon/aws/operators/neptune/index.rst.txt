:py:mod:`airflow.providers.amazon.aws.operators.neptune`
========================================================

.. py:module:: airflow.providers.amazon.aws.operators.neptune


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.neptune.NeptuneStartDbClusterOperator
   airflow.providers.amazon.aws.operators.neptune.NeptuneStopDbClusterOperator



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.neptune.handle_waitable_exception



.. py:function:: handle_waitable_exception(operator, err)

   Handle client exceptions for invalid cluster or invalid instance status that are temporary.

   After status change, it's possible to retry. Waiter will handle terminal status.


.. py:class:: NeptuneStartDbClusterOperator(db_cluster_id, wait_for_completion = True, waiter_delay = 30, waiter_max_attempts = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.neptune.NeptuneHook`\ ]

   Starts an Amazon Neptune DB cluster.

   Amazon Neptune Database is a serverless graph database designed for superior scalability
   and availability. Neptune Database provides built-in security, continuous backups, and
   integrations with other AWS services

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:NeptuneStartDbClusterOperator`

   :param db_cluster_id: The DB cluster identifier of the Neptune DB cluster to be started.
   :param wait_for_completion: Whether to wait for the cluster to start. (default: True)
   :param deferrable: If True, the operator will wait asynchronously for the cluster to start.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param waiter_delay: Time in seconds to wait between status checks.
   :param waiter_max_attempts: Maximum number of attempts to check for job completion.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.

   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html
   :return: dictionary with Neptune cluster id

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context, event = None, **kwargs)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



.. py:class:: NeptuneStopDbClusterOperator(db_cluster_id, wait_for_completion = True, waiter_delay = 30, waiter_max_attempts = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.neptune.NeptuneHook`\ ]

   Stops an Amazon Neptune DB cluster.

   Amazon Neptune Database is a serverless graph database designed for superior scalability
   and availability. Neptune Database provides built-in security, continuous backups, and
   integrations with other AWS services

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:NeptuneStartDbClusterOperator`

   :param db_cluster_id: The DB cluster identifier of the Neptune DB cluster to be stopped.
   :param wait_for_completion: Whether to wait for cluster to stop. (default: True)
   :param deferrable: If True, the operator will wait asynchronously for the cluster to stop.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param waiter_delay: Time in seconds to wait between status checks.
   :param waiter_max_attempts: Maximum number of attempts to check for job completion.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html
   :return: dictionary with Neptune cluster id

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context, event = None, **kwargs)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



