:py:mod:`airflow.providers.amazon.aws.operators.step_function`
==============================================================

.. py:module:: airflow.providers.amazon.aws.operators.step_function


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.step_function.StepFunctionStartExecutionOperator
   airflow.providers.amazon.aws.operators.step_function.StepFunctionGetExecutionOutputOperator




.. py:class:: StepFunctionStartExecutionOperator(*, state_machine_arn, name = None, state_machine_input = None, waiter_max_attempts = 30, waiter_delay = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.step_function.StepFunctionHook`\ ]

   An Operator that begins execution of an AWS Step Function State Machine.

   Additional arguments may be specified and are passed down to the underlying BaseOperator.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:StepFunctionStartExecutionOperator`

   :param state_machine_arn: ARN of the Step Function State Machine
   :param name: The name of the execution.
   :param state_machine_input: JSON data input to pass to the State Machine
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is None or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param do_xcom_push: if True, execution_arn is pushed to XCom with key execution_arn.
   :param waiter_max_attempts: Maximum number of attempts to poll the execution.
   :param waiter_delay: Number of seconds between polling the state of the execution.
   :param deferrable: If True, the operator will wait asynchronously for the job to complete.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False, but can be overridden in config file by setting default_deferrable to True)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#f9c915'

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



.. py:class:: StepFunctionGetExecutionOutputOperator(*, execution_arn, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.step_function.StepFunctionHook`\ ]

   An Operator that returns the output of an AWS Step Function State Machine execution.

   Additional arguments may be specified and are passed down to the underlying BaseOperator.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:StepFunctionGetExecutionOutputOperator`

   :param execution_arn: ARN of the Step Function State Machine Execution
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#f9c915'

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



