:py:mod:`airflow.providers.amazon.aws.operators.comprehend`
===========================================================

.. py:module:: airflow.providers.amazon.aws.operators.comprehend


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.comprehend.ComprehendBaseOperator
   airflow.providers.amazon.aws.operators.comprehend.ComprehendStartPiiEntitiesDetectionJobOperator




.. py:class:: ComprehendBaseOperator(input_data_config, output_data_config, data_access_role_arn, language_code, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.comprehend.ComprehendHook`\ ]

   This is the base operator for Comprehend Service operators (not supposed to be used directly in DAGs).

   :param input_data_config: The input properties for a PII entities detection job. (templated)
   :param output_data_config: Provides `conﬁguration` parameters for the output of PII entity detection
       jobs. (templated)
   :param data_access_role_arn: The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend
       read access to your input data. (templated)
   :param language_code: The language of the input documents. (templated)

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: template_fields_renderers
      :type: dict

      

   .. py:method:: client()

      Create and return the Comprehend client.


   .. py:method:: execute(context)
      :abstractmethod:

      Must overwrite in child classes.



.. py:class:: ComprehendStartPiiEntitiesDetectionJobOperator(input_data_config, output_data_config, mode, data_access_role_arn, language_code, start_pii_entities_kwargs = None, wait_for_completion = True, waiter_delay = 60, waiter_max_attempts = 20, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`ComprehendBaseOperator`

   Create a comprehend pii entities detection job for a collection of documents.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:ComprehendStartPiiEntitiesDetectionJobOperator`

   :param input_data_config: The input properties for a PII entities detection job. (templated)
   :param output_data_config: Provides `conﬁguration` parameters for the output of PII entity detection
       jobs. (templated)
   :param mode: Specifies whether the output provides the locations (offsets) of PII  entities or a file in
       which PII entities are redacted. If you set the mode parameter to ONLY_REDACTION. In that case you
       must provide a RedactionConfig in start_pii_entities_kwargs.
   :param data_access_role_arn: The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend
       read access to your input data. (templated)
   :param language_code: The language of the input documents. (templated)
   :param start_pii_entities_kwargs: Any optional parameters to pass to the job. If JobName is not provided
       in start_pii_entities_kwargs, operator will create.

   :param wait_for_completion: Whether to wait for job to stop. (default: True)
   :param waiter_delay: Time in seconds to wait between status checks. (default: 60)
   :param waiter_max_attempts: Maximum number of attempts to check for job completion. (default: 20)
   :param deferrable: If True, the operator will wait asynchronously for the job to stop.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:method:: execute(context)

      Must overwrite in child classes.


   .. py:method:: execute_complete(context, event = None)



