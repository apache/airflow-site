:py:mod:`airflow.providers.amazon.aws.transfers.http_to_s3`
===========================================================

.. py:module:: airflow.providers.amazon.aws.transfers.http_to_s3

.. autoapi-nested-parse::

   This module contains operator to move data from HTTP endpoint to S3.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.transfers.http_to_s3.HttpToS3Operator




.. py:class:: HttpToS3Operator(*, endpoint = None, method = 'GET', data = None, headers = None, extra_options = None, http_conn_id = 'http_default', log_response = False, auth_type = None, tcp_keep_alive = True, tcp_keep_alive_idle = 120, tcp_keep_alive_count = 20, tcp_keep_alive_interval = 30, s3_bucket = None, s3_key, replace = False, encrypt = False, acl_policy = None, aws_conn_id = 'aws_default', verify = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Calls an endpoint on an HTTP system to execute an action and store the result in S3.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:HttpToS3Operator`

   :param http_conn_id: The :ref:`http connection<howto/connection:http>` to run
       the operator against
   :param endpoint: The relative part of the full url. (templated)
   :param method: The HTTP method to use, default = "POST"
   :param data: The data to pass. POST-data in POST/PUT and params
       in the URL for a GET request. (templated)
   :param headers: The HTTP headers to be added to the GET request
   :param response_check: A check against the 'requests' response object.
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
       It should return True for 'pass' and False otherwise.
   :param response_filter: A function allowing you to manipulate the response
       text. e.g response_filter=lambda response: json.loads(response.text).
       The callable takes the response object as the first positional argument
       and optionally any number of keyword arguments available in the context dictionary.
   :param extra_options: Extra options for the 'requests' library, see the
       'requests' documentation (options to modify timeout, ssl, etc.)
   :param log_response: Log the response (default: False)
   :param auth_type: The auth type for the service
   :param tcp_keep_alive: Enable TCP Keep Alive for the connection.
   :param tcp_keep_alive_idle: The TCP Keep Alive Idle parameter (corresponds to ``socket.TCP_KEEPIDLE``).
   :param tcp_keep_alive_count: The TCP Keep Alive count parameter (corresponds to ``socket.TCP_KEEPCNT``)
   :param tcp_keep_alive_interval: The TCP Keep Alive interval parameter (corresponds to
       ``socket.TCP_KEEPINTVL``)
   :param s3_bucket: Name of the S3 bucket where to save the object. (templated)
       It should be omitted when ``s3_key`` is provided as a full s3:// url.
   :param s3_key: The key of the object to be created. (templated)
       It can be either full s3:// style url or relative path from root level.
       When it's specified as a full s3:// url, please omit ``s3_bucket``.
   :param replace: If True, it will overwrite the key if it already exists
   :param encrypt: If True, the file will be encrypted on the server-side
       by S3 and will be stored in an encrypted form while at rest in S3.
   :param acl_policy: String specifying the canned ACL policy for the file being
       uploaded to the S3 bucket.
   :param aws_conn_id: Connection id of the S3 connection to use
   :param verify: Whether or not to verify SSL certificates for S3 connection.
       By default SSL certificates are verified.

       You can provide the following values:

       - False: do not validate SSL certificates. SSL will still be used,
                but SSL certificates will not be
                verified.
       - path/to/cert/bundle.pem: A filename of the CA cert bundle to uses.
                You can specify this argument if you want to use a different
                CA cert bundle than the one used by botocore.

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('http_conn_id', 'endpoint', 'data', 'headers', 's3_bucket', 's3_key')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: template_ext
      :type: collections.abc.Sequence[str]
      :value: ()

      

   .. py:attribute:: ui_color
      :value: '#f4a460'

      

   .. py:method:: http_hook()

      Create and return an HttpHook.


   .. py:method:: s3_hook()

      Create and return an S3Hook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



