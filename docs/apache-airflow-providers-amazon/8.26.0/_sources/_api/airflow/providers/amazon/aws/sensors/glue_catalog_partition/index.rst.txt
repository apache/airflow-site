:py:mod:`airflow.providers.amazon.aws.sensors.glue_catalog_partition`
=====================================================================

.. py:module:: airflow.providers.amazon.aws.sensors.glue_catalog_partition


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.glue_catalog_partition.GlueCatalogPartitionSensor




.. py:class:: GlueCatalogPartitionSensor(*, table_name, expression = "ds='{{ ds }}'", database_name = 'default', poke_interval = 60 * 3, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.glue_catalog.GlueCatalogHook`\ ]

   Waits for a partition to show up in AWS Glue Catalog.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:GlueCatalogPartitionSensor`

   :param table_name: The name of the table to wait for, supports the dot
       notation (my_database.my_table)
   :param expression: The partition clause to wait for. This is passed as
       is to the AWS Glue Catalog API's get_partitions function,
       and supports SQL like notation as in ``ds='2015-01-01'
       AND type='value'`` and comparison operators as in ``"ds>=2015-01-01"``.
       See https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-partitions.html
       #aws-glue-api-catalog-partitions-GetPartitions
   :param database_name: The name of the catalog database where the partitions reside.
   :param poke_interval: Time in seconds that the job should wait in
       between each tries
   :param deferrable: If true, then the sensor will wait asynchronously for the partition to
       show up in the AWS Glue Catalog.
       (default: False, but can be overridden in config file by setting default_deferrable to True)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#C5CAE9'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: poke(context)

      Check for existence of the partition in the AWS Glue Catalog table.


   .. py:method:: execute_complete(context, event = None)


   .. py:method:: get_hook()

      Get the GlueCatalogHook.



