:py:mod:`airflow.providers.amazon.aws.hooks.athena_sql`
=======================================================

.. py:module:: airflow.providers.amazon.aws.hooks.athena_sql


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.athena_sql.AthenaSQLHook




.. py:class:: AthenaSQLHook(athena_conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`, :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   Interact with Amazon Athena.

   Provide wrapper around PyAthena library.

   :param athena_conn_id: :ref:`Amazon Athena Connection <howto/connection:athena>`.

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   You can specify ``driver`` in ``extra`` of your connection in order to use
   a different driver than the default ``rest``.

   Also, aws_domain could be specified in ``extra`` of your connection.

   PyAthena and AWS Authentication parameters could be passed in extra field of ``athena_conn_id`` connection.

   Passing authentication parameters in ``athena_conn_id`` will override those in ``aws_conn_id``.

   .. seealso::
       :class:`~airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   .. note::
       get_uri() depends on SQLAlchemy and PyAthena.

   .. py:property:: conn
      :type: airflow.providers.amazon.aws.utils.connection_wrapper.AwsConnectionWrapper

      Get Aws Connection Wrapper object.


   .. py:attribute:: conn_name_attr
      :value: 'athena_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'athena_default'

      

   .. py:attribute:: conn_type
      :value: 'athena'

      

   .. py:attribute:: hook_name
      :value: 'Amazon Athena'

      

   .. py:attribute:: supports_autocommit
      :value: True

      

   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Return custom UI field behaviour for AWS Athena Connection.


   .. py:method:: conn_config()

      Get the Airflow Connection object and wrap it in helper (cached).


   .. py:method:: get_uri()

      Overridden to use the Athena dialect as driver name.


   .. py:method:: get_conn()

      Get a ``pyathena.Connection`` object.



