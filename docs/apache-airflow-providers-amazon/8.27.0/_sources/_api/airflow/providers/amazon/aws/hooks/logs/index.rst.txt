:py:mod:`airflow.providers.amazon.aws.hooks.logs`
=================================================

.. py:module:: airflow.providers.amazon.aws.hooks.logs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.logs.AwsLogsHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.logs.NUM_CONSECUTIVE_EMPTY_RESPONSE_EXIT_THRESHOLD


.. py:data:: NUM_CONSECUTIVE_EMPTY_RESPONSE_EXIT_THRESHOLD
   :value: 3

   

.. py:class:: AwsLogsHook(*args, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   Interact with Amazon CloudWatch Logs.

   Provide thin wrapper around :external+boto3:py:class:`boto3.client("logs") <CloudWatchLogs.Client>`.

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       - :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`

   .. py:class:: ContinuationToken


      Just a wrapper around a str token to allow updating it from the caller.


   .. py:method:: get_log_events(log_group, log_stream_name, start_time = 0, skip = 0, start_from_head = None, continuation_token = None, end_time = None)

      Return a generator for log items in a single stream; yields all items available at the current moment.

      .. seealso::
          - :external+boto3:py:meth:`CloudWatchLogs.Client.get_log_events`

      :param log_group: The name of the log group.
      :param log_stream_name: The name of the specific stream.
      :param start_time: The timestamp value in ms to start reading the logs from (default: 0).
      :param skip: The number of log entries to skip at the start (default: 0).
          This is for when there are multiple entries at the same timestamp.
      :param start_from_head: Deprecated. Do not use with False, logs would be retrieved out of order.
          If possible, retrieve logs in one query, or implement pagination yourself.
      :param continuation_token: a token indicating where to read logs from.
          Will be updated as this method reads new logs, to be reused in subsequent calls.
      :param end_time: The timestamp value in ms to stop reading the logs from (default: None).
          If None is provided, reads it until the end of the log stream
      :return: | A CloudWatch log event with the following key-value pairs:
               |   'timestamp' (int): The time in milliseconds of the event.
               |   'message' (str): The log event data.
               |   'ingestionTime' (int): The time in milliseconds the event was ingested.


   .. py:method:: describe_log_streams_async(log_group, stream_prefix, order_by, count)
      :async:

      Async function to get the list of log streams for the specified log group.

      You can list all the log streams or filter the results by prefix. You can also control
      how the results are ordered.

      :param log_group: The name of the log group.
      :param stream_prefix: The prefix to match.
      :param order_by: If the value is LogStreamName , the results are ordered by log stream name.
       If the value is LastEventTime , the results are ordered by the event time. The default value is LogStreamName.
      :param count: The maximum number of items returned


   .. py:method:: get_log_events_async(log_group, log_stream_name, start_time = 0, skip = 0, start_from_head = True)
      :async:

      Yield all the available items in a single log stream.

      :param log_group: The name of the log group.
      :param log_stream_name: The name of the specific stream.
      :param start_time: The time stamp value to start reading the logs from (default: 0).
      :param skip: The number of log entries to skip at the start (default: 0).
          This is for when there are multiple entries at the same timestamp.
      :param start_from_head: whether to start from the beginning (True) of the log or
          at the end of the log (False).



