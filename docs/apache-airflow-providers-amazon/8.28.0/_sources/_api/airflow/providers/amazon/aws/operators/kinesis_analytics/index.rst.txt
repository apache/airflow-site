:py:mod:`airflow.providers.amazon.aws.operators.kinesis_analytics`
==================================================================

.. py:module:: airflow.providers.amazon.aws.operators.kinesis_analytics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.kinesis_analytics.KinesisAnalyticsV2CreateApplicationOperator
   airflow.providers.amazon.aws.operators.kinesis_analytics.KinesisAnalyticsV2StartApplicationOperator
   airflow.providers.amazon.aws.operators.kinesis_analytics.KinesisAnalyticsV2StopApplicationOperator




.. py:class:: KinesisAnalyticsV2CreateApplicationOperator(application_name, runtime_environment, service_execution_role, create_application_kwargs = None, application_description = 'Managed Service for Apache Flink application created from Airflow', **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.kinesis_analytics.KinesisAnalyticsV2Hook`\ ]

   Creates an AWS Managed Service for Apache Flink application.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:KinesisAnalyticsV2CreateApplicationOperator`

   :param application_name: The name of application. (templated)
   :param runtime_environment: The runtime environment for the application. (templated)
   :param service_execution_role: The IAM role used by the application to access services. (templated)
   :param create_application_kwargs: Create application extra properties. (templated)
   :param application_description: A summary description of the application. (templated)

   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: ui_color
      :value: '#44b5e2'

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: template_fields_renderers
      :type: dict

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: KinesisAnalyticsV2StartApplicationOperator(application_name, run_configuration = None, wait_for_completion = True, waiter_delay = 60, waiter_max_attempts = 20, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.kinesis_analytics.KinesisAnalyticsV2Hook`\ ]

   Starts an AWS Managed Service for Apache Flink application.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:KinesisAnalyticsV2StartApplicationOperator`

   :param application_name: The name of application. (templated)
   :param run_configuration: Application properties to start Apache Flink Job. (templated)

   :param wait_for_completion: Whether to wait for job to stop. (default: True)
   :param waiter_delay: Time in seconds to wait between status checks. (default: 60)
   :param waiter_max_attempts: Maximum number of attempts to check for job completion. (default: 20)
   :param deferrable: If True, the operator will wait asynchronously for the job to stop.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: ui_color
      :value: '#44b5e2'

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: template_fields_renderers
      :type: dict

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



.. py:class:: KinesisAnalyticsV2StopApplicationOperator(application_name, force = False, wait_for_completion = True, waiter_delay = 60, waiter_max_attempts = 20, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.kinesis_analytics.KinesisAnalyticsV2Hook`\ ]

   Stop an AWS Managed Service for Apache Flink application.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:KinesisAnalyticsV2StopApplicationOperator`

   :param application_name: The name of your application. (templated)
   :param force: Set to true to force the application to stop. If you set Force to true, Managed Service for
       Apache Flink stops the application without taking a snapshot. (templated)

   :param wait_for_completion: Whether to wait for job to stop. (default: True)
   :param waiter_delay: Time in seconds to wait between status checks. (default: 60)
   :param waiter_max_attempts: Maximum number of attempts to check for job completion. (default: 20)
   :param deferrable: If True, the operator will wait asynchronously for the job to stop.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: ui_color
      :value: '#44b5e2'

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



