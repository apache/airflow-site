:py:mod:`airflow.providers.amazon.aws.operators.glue_databrew`
==============================================================

.. py:module:: airflow.providers.amazon.aws.operators.glue_databrew


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.glue_databrew.GlueDataBrewStartJobOperator




.. py:class:: GlueDataBrewStartJobOperator(job_name, wait_for_completion = True, delay = None, waiter_delay = 30, waiter_max_attempts = 60, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.glue_databrew.GlueDataBrewHook`\ ]

   Start an AWS Glue DataBrew job.

   AWS Glue DataBrew is a visual data preparation tool that makes it easier
   for data analysts and data scientists to clean and normalize data
   to prepare it for analytics and machine learning (ML).

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GlueDataBrewStartJobOperator`

   :param job_name: unique job name per AWS Account
   :param wait_for_completion: Whether to wait for job run completion. (default: True)
   :param deferrable: If True, the operator will wait asynchronously for the job to complete.
       This implies waiting for completion. This mode requires aiobotocore module to be installed.
       (default: False)
   :param delay: Time in seconds to wait between status checks. (Deprecated).
   :param waiter_delay: Time in seconds to wait between status checks. Default is 30.
   :param waiter_max_attempts: Maximum number of attempts to check for job completion. (default: 60)
   :return: dictionary with key run_id and value of the resulting job's run_id.

   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



