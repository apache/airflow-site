:py:mod:`airflow.providers.amazon.aws.operators.quicksight`
===========================================================

.. py:module:: airflow.providers.amazon.aws.operators.quicksight


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.operators.quicksight.QuickSightCreateIngestionOperator




.. py:class:: QuickSightCreateIngestionOperator(data_set_id, ingestion_id, ingestion_type = 'FULL_REFRESH', wait_for_completion = True, check_interval = 30, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.operators.base_aws.AwsBaseOperator`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.quicksight.QuickSightHook`\ ]

   Creates and starts a new SPICE ingestion for a dataset;  also helps to Refresh existing SPICE datasets.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:QuickSightCreateIngestionOperator`

   :param data_set_id:  ID of the dataset used in the ingestion.
   :param ingestion_id: ID for the ingestion.
   :param ingestion_type: Type of ingestion. Values Can be  INCREMENTAL_REFRESH or FULL_REFRESH.
       Default FULL_REFRESH.
   :param wait_for_completion: If wait is set to True, the time interval, in seconds,
       that the operation waits to check the status of the Amazon QuickSight Ingestion.
   :param check_interval: if wait is set to be true, this is the time interval
       in seconds which the operator will check the status of the Amazon QuickSight Ingestion
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:attribute:: ui_color
      :value: '#ffd700'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



