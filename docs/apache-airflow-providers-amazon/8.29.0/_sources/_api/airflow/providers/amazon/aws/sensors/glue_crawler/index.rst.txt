:py:mod:`airflow.providers.amazon.aws.sensors.glue_crawler`
===========================================================

.. py:module:: airflow.providers.amazon.aws.sensors.glue_crawler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.glue_crawler.GlueCrawlerSensor




.. py:class:: GlueCrawlerSensor(*, crawler_name, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.glue_crawler.GlueCrawlerHook`\ ]

   Waits for an AWS Glue crawler to reach any of the statuses below.

   'FAILED', 'CANCELLED', 'SUCCEEDED'

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:GlueCrawlerSensor`

   :param crawler_name: The AWS Glue crawler unique name
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: get_hook()

      Return a new or pre-existing GlueCrawlerHook.



