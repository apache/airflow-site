:py:mod:`airflow.providers.amazon.aws.triggers.eks`
===================================================

.. py:module:: airflow.providers.amazon.aws.triggers.eks


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.eks.EksCreateFargateProfileTrigger
   airflow.providers.amazon.aws.triggers.eks.EksDeleteFargateProfileTrigger
   airflow.providers.amazon.aws.triggers.eks.EksCreateNodegroupTrigger
   airflow.providers.amazon.aws.triggers.eks.EksDeleteNodegroupTrigger




.. py:class:: EksCreateFargateProfileTrigger(cluster_name, fargate_profile_name, waiter_delay, waiter_max_attempts, aws_conn_id, region = None, region_name = None)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Asynchronously wait for the fargate profile to be created.

   :param cluster_name: The name of the EKS cluster
   :param fargate_profile_name: The name of the fargate profile
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: EksDeleteFargateProfileTrigger(cluster_name, fargate_profile_name, waiter_delay, waiter_max_attempts, aws_conn_id, region = None, region_name = None)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Asynchronously wait for the fargate profile to be deleted.

   :param cluster_name: The name of the EKS cluster
   :param fargate_profile_name: The name of the fargate profile
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: EksCreateNodegroupTrigger(cluster_name, nodegroup_name, waiter_delay, waiter_max_attempts, aws_conn_id, region_name)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger for EksCreateNodegroupOperator.

   The trigger will asynchronously poll the boto3 API and wait for the
   nodegroup to be in the state specified by the waiter.

   :param waiter_name: Name of the waiter to use, for instance 'nodegroup_active' or 'nodegroup_deleted'
   :param cluster_name: The name of the EKS cluster associated with the node group.
   :param nodegroup_name: The name of the nodegroup to check.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region: Which AWS region the connection should use. (templated)
       If this is None or empty then the default boto3 behaviour is used.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: EksDeleteNodegroupTrigger(cluster_name, nodegroup_name, waiter_delay, waiter_max_attempts, aws_conn_id, region_name)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger for EksDeleteNodegroupOperator.

   The trigger will asynchronously poll the boto3 API and wait for the
   nodegroup to be in the state specified by the waiter.

   :param waiter_name: Name of the waiter to use, for instance 'nodegroup_active' or 'nodegroup_deleted'
   :param cluster_name: The name of the EKS cluster associated with the node group.
   :param nodegroup_name: The name of the nodegroup to check.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region: Which AWS region the connection should use. (templated)
       If this is None or empty then the default boto3 behaviour is used.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



