:py:mod:`airflow.providers.amazon.aws.sensors.dynamodb`
=======================================================

.. py:module:: airflow.providers.amazon.aws.sensors.dynamodb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.sensors.dynamodb.DynamoDBValueSensor




.. py:class:: DynamoDBValueSensor(table_name, partition_key_name, partition_key_value, attribute_name, attribute_value, sort_key_name = None, sort_key_value = None, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.sensors.base_aws.AwsBaseSensor`\ [\ :py:obj:`airflow.providers.amazon.aws.hooks.dynamodb.DynamoDBHook`\ ]

   Waits for an attribute value to be present for an item in a DynamoDB table.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/sensor:DynamoDBValueSensor`

   :param table_name: DynamoDB table name
   :param partition_key_name: DynamoDB partition key name
   :param partition_key_value: DynamoDB partition key value
   :param attribute_name: DynamoDB attribute name
   :param attribute_value: DynamoDB attribute value
   :param sort_key_name: (optional) DynamoDB sort key name
   :param sort_key_value: (optional) DynamoDB sort key value
   :param aws_conn_id: The Airflow connection used for AWS credentials.
       If this is ``None`` or empty then the default boto3 behaviour is used. If
       running Airflow in a distributed manner and aws_conn_id is None or
       empty, then default boto3 configuration would be used (and must be
       maintained on each worker node).
   :param region_name: AWS region_name. If not specified then the default boto3 behaviour is used.
   :param verify: Whether or not to verify SSL certificates. See:
       https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html
   :param botocore_config: Configuration dictionary (key-values) for botocore client. See:
       https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html

   .. py:attribute:: aws_hook_class

      

   .. py:attribute:: template_fields
      :type: Sequence[str]

      

   .. py:method:: poke(context)

      Test DynamoDB item for matching attribute value.



