:py:mod:`airflow.providers.amazon.aws.hooks.appflow`
====================================================

.. py:module:: airflow.providers.amazon.aws.hooks.appflow


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.hooks.appflow.AppflowHook




.. py:class:: AppflowHook(*args, **kwargs)


   Bases: :py:obj:`airflow.providers.amazon.aws.hooks.base_aws.AwsGenericHook`\ [\ :py:obj:`mypy_boto3_appflow.client.AppflowClient`\ ]

   Interact with Amazon AppFlow.

   Provide thin wrapper around :external+boto3:py:class:`boto3.client("appflow") <Appflow.Client>`.

   Additional arguments (such as ``aws_conn_id``) may be specified and
   are passed down to the underlying AwsBaseHook.

   .. seealso::
       - :class:`airflow.providers.amazon.aws.hooks.base_aws.AwsBaseHook`
       - `Amazon Appflow API Reference <https://docs.aws.amazon.com/appflow/1.0/APIReference/Welcome.html>`__

   .. py:method:: run_flow(flow_name, poll_interval = 20, wait_for_completion = True, max_attempts = 60)

      Execute an AppFlow run.

      :param flow_name: The flow name
      :param poll_interval: Time (seconds) to wait between two consecutive calls to check the run status
      :param wait_for_completion: whether to wait for the run to end to return
      :param max_attempts: the number of polls to do before timing out/returning a failure.
      :return: The run execution ID


   .. py:method:: update_flow_filter(flow_name, filter_tasks, set_trigger_ondemand = False)

      Update the flow task filter; all filters will be removed if an empty array is passed to filter_tasks.

      :param flow_name: The flow name
      :param filter_tasks: List flow tasks to be added
      :param set_trigger_ondemand: If True, set the trigger to on-demand; otherwise, keep the trigger as is
      :return: None



