:py:mod:`airflow.providers.amazon.aws.triggers.rds`
===================================================

.. py:module:: airflow.providers.amazon.aws.triggers.rds


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.amazon.aws.triggers.rds.RdsDbAvailableTrigger
   airflow.providers.amazon.aws.triggers.rds.RdsDbDeletedTrigger
   airflow.providers.amazon.aws.triggers.rds.RdsDbStoppedTrigger




.. py:class:: RdsDbAvailableTrigger(db_identifier, waiter_delay, waiter_max_attempts, aws_conn_id, response, db_type, region_name = None)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger to wait asynchronously for a DB instance or cluster to be available.

   :param db_identifier: The DB identifier for the DB instance or cluster to be polled.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region_name: AWS region where the DB is located, if different from the default one.
   :param response: The response from the RdsHook, to be passed back to the operator.
   :param db_type: The type of DB: instance or cluster.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: RdsDbDeletedTrigger(db_identifier, waiter_delay, waiter_max_attempts, aws_conn_id, response, db_type, region_name = None)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger to wait asynchronously for a DB instance or cluster to be deleted.

   :param db_identifier: The DB identifier for the DB instance or cluster to be polled.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region_name: AWS region where the DB is located, if different from the default one.
   :param response: The response from the RdsHook, to be passed back to the operator.
   :param db_type: The type of DB: instance or cluster.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



.. py:class:: RdsDbStoppedTrigger(db_identifier, waiter_delay, waiter_max_attempts, aws_conn_id, response, db_type, region_name = None)


   Bases: :py:obj:`airflow.providers.amazon.aws.triggers.base.AwsBaseWaiterTrigger`

   Trigger to wait asynchronously for a DB instance or cluster to be stopped.

   :param db_identifier: The DB identifier for the DB instance or cluster to be polled.
   :param waiter_delay: The amount of time in seconds to wait between attempts.
   :param waiter_max_attempts: The maximum number of attempts to be made.
   :param aws_conn_id: The Airflow connection used for AWS credentials.
   :param region_name: AWS region where the DB is located, if different from the default one.
   :param response: The response from the RdsHook, to be passed back to the operator.
   :param db_type: The type of DB: instance or cluster.

   .. py:method:: hook()

      Override in subclasses to return the right hook.



