:py:mod:`airflow.providers.apache.flink.operators.flink_kubernetes`
===================================================================

.. py:module:: airflow.providers.apache.flink.operators.flink_kubernetes


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.flink.operators.flink_kubernetes.FlinkKubernetesOperator




.. py:class:: FlinkKubernetesOperator(*, application_file, namespace = None, kubernetes_conn_id = 'kubernetes_default', api_group = 'flink.apache.org', api_version = 'v1beta1', in_cluster = None, cluster_context = None, config_file = None, plural = 'flinkdeployments', **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates flinkDeployment object in kubernetes cluster.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:FlinkKubernetesOperator`

   .. seealso::
       For more detail about Flink Deployment Object have a look at the reference:
       https://nightlies.apache.org/flink/flink-kubernetes-operator-docs-main/docs/custom-resource/reference/#flinkdeployment

   :param application_file: Defines Kubernetes 'custom_resource_definition' of 'flinkDeployment' as either a
       path to a '.yaml' file, '.json' file, YAML string or JSON string.
   :param namespace: kubernetes namespace to put flinkDeployment
   :param kubernetes_conn_id: The :ref:`kubernetes connection id <howto/connection:kubernetes>`
       for the to Kubernetes cluster.
   :param api_group: kubernetes api group of flinkDeployment
   :param api_version: kubernetes api version of flinkDeployment
   :param in_cluster: run kubernetes client with in_cluster configuration.
   :param cluster_context: context that points to kubernetes cluster.
       Ignored when in_cluster is True. If None, current-context is used.
   :param config_file: The path to the Kubernetes config file. (templated)
       If not specified, default value is ``~/.kube/config``

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('application_file', 'namespace')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.yaml', '.yml', '.json')

      

   .. py:attribute:: ui_color
      :value: '#f4a460'

      

   .. py:method:: hook()


   .. py:method:: client()


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



