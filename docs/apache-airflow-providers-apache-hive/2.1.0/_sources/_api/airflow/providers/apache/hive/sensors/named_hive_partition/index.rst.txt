:py:mod:`airflow.providers.apache.hive.sensors.named_hive_partition`
====================================================================

.. py:module:: airflow.providers.apache.hive.sensors.named_hive_partition


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.hive.sensors.named_hive_partition.NamedHivePartitionSensor




.. py:class:: NamedHivePartitionSensor(*, partition_names: List[str], metastore_conn_id: str = 'metastore_default', poke_interval: int = 60 * 3, hook: Any = None, **kwargs: Any)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a set of partitions to show up in Hive.

   :param partition_names: List of fully qualified names of the
       partitions to wait for. A fully qualified name is of the
       form ``schema.table/pk1=pv1/pk2=pv2``, for example,
       default.users/ds=2016-01-01. This is passed as is to the metastore
       Thrift client ``get_partitions_by_name`` method. Note that
       you cannot use logical or comparison operators as in
       HivePartitionSensor.
   :type partition_names: list[str]
   :param metastore_conn_id: Reference to the
       :ref:`metastore thrift service connection id <howto/connection:hive_metastore>`.
   :type metastore_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['partition_names']

      

   .. py:attribute:: ui_color
      :annotation: = #8d99ae

      

   .. py:attribute:: poke_context_fields
      :annotation: = ['partition_names', 'metastore_conn_id']

      

   .. py:method:: parse_partition_name(partition: str) -> Tuple[Any, Ellipsis]
      :staticmethod:

      Get schema, table, and partition info.


   .. py:method:: poke_partition(self, partition: str) -> Any

      Check for a named partition.


   .. py:method:: poke(self, context: airflow.utils.context.Context) -> bool

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: is_smart_sensor_compatible(self)

      Return if this operator can use smart service. Default False.



