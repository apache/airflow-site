:py:mod:`airflow.providers.apache.kafka.triggers.await_message`
===============================================================

.. py:module:: airflow.providers.apache.kafka.triggers.await_message


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.apache.kafka.triggers.await_message.AwaitMessageTrigger




.. py:class:: AwaitMessageTrigger(topics, apply_function, kafka_config_id = 'kafka_default', apply_function_args = None, apply_function_kwargs = None, poll_timeout = 1, poll_interval = 5)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   A trigger that waits for a message matching specific criteria to arrive in Kafka.

   The behavior of the consumer of this trigger is as follows:
   - poll the Kafka topics for a message, if no message returned, sleep
   - process the message with provided callable and commit the message offset:

       - if callable returns any data, raise a TriggerEvent with the return data

       - else continue to next message


   :param kafka_config_id: The connection object to use, defaults to "kafka_default"
   :param topics: The topic (or topic regex) that should be searched for messages
   :param apply_function: the location of the function to apply to messages for determination of matching
       criteria. (In python dot notation as a string)
   :param apply_function_args: A set of arguments to apply to the callable, defaults to None
   :param apply_function_kwargs: A set of key word arguments to apply to the callable, defaults to None,
       defaults to None
   :param poll_timeout: How long the Kafka client should wait before returning from a poll request to
       Kafka (seconds), defaults to 1
   :param poll_interval: How long the trigger should sleep after reaching the end of the Kafka log
       (seconds), defaults to 5


   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



