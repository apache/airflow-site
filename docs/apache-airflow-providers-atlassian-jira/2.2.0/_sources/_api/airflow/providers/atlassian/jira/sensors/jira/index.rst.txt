:py:mod:`airflow.providers.atlassian.jira.sensors.jira`
=======================================================

.. py:module:: airflow.providers.atlassian.jira.sensors.jira


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.atlassian.jira.sensors.jira.JiraSensor
   airflow.providers.atlassian.jira.sensors.jira.JiraTicketSensor




.. py:class:: JiraSensor(*, method_name, jira_conn_id = 'jira_default', method_params = None, result_processor = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Monitors a jira ticket for any change.

   :param jira_conn_id: reference to a pre-defined Jira Connection
   :param method_name: method name from atlassian-python-api JIRA sdk to execute
   :param method_params: parameters for the method method_name
   :param result_processor: function that return boolean and act as a sensor response

   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: JiraTicketSensor(*, jira_conn_id = 'jira_default', ticket_id = None, field = None, expected_value = None, field_checker_func = None, **kwargs)


   Bases: :py:obj:`JiraSensor`

   Monitors a jira ticket for given change in terms of function.

   :param jira_conn_id: reference to a pre-defined Jira Connection
   :param ticket_id: id of the ticket to be monitored
   :param field: field of the ticket to be monitored
   :param expected_value: expected value of the field
   :param result_processor: function that return boolean and act as a sensor response

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('ticket_id',)

      

   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: issue_field_checker(jira_result)

      Check issue using different conditions to prepare to evaluate sensor.



