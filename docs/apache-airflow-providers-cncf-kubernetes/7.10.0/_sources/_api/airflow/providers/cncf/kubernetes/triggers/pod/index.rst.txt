:py:mod:`airflow.providers.cncf.kubernetes.triggers.pod`
========================================================

.. py:module:: airflow.providers.cncf.kubernetes.triggers.pod


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.triggers.pod.ContainerState
   airflow.providers.cncf.kubernetes.triggers.pod.KubernetesPodTrigger




.. py:class:: ContainerState


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   Possible container states.

   See https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase.

   .. py:attribute:: WAITING
      :value: 'waiting'

      

   .. py:attribute:: RUNNING
      :value: 'running'

      

   .. py:attribute:: TERMINATED
      :value: 'terminated'

      

   .. py:attribute:: FAILED
      :value: 'failed'

      

   .. py:attribute:: UNDEFINED
      :value: 'undefined'

      


.. py:class:: KubernetesPodTrigger(pod_name, pod_namespace, trigger_start_time, base_container_name, kubernetes_conn_id = None, poll_interval = 2, cluster_context = None, config_file = None, in_cluster = None, get_logs = True, startup_timeout = 120, startup_check_interval = 1, on_finish_action = 'delete_pod', should_delete_pod = None)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   KubernetesPodTrigger run on the trigger worker to check the state of Pod.

   :param pod_name: The name of the pod.
   :param pod_namespace: The namespace of the pod.
   :param kubernetes_conn_id: The :ref:`kubernetes connection id <howto/connection:kubernetes>`
       for the Kubernetes cluster.
   :param cluster_context: Context that points to kubernetes cluster.
   :param config_file: Path to kubeconfig file.
   :param poll_interval: Polling period in seconds to check for the status.
   :param trigger_start_time: time in Datetime format when the trigger was started
   :param in_cluster: run kubernetes client with in_cluster configuration.
   :param get_logs: get the stdout of the container as logs of the tasks.
   :param startup_timeout: timeout in seconds to start up the pod.
   :param on_finish_action: What to do when the pod reaches its final state, or the execution is interrupted.
       If "delete_pod", the pod will be deleted regardless its state; if "delete_succeeded_pod",
       only succeeded pod will be deleted. You can set to "keep_pod" to keep the pod.
   :param should_delete_pod: What to do when the pod reaches its final
       state, or the execution is interrupted. If True (default), delete the
       pod; if False, leave the pod.
       Deprecated - use `on_finish_action` instead.

   .. py:method:: serialize()

      Serialize KubernetesCreatePodTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Get current pod status and yield a TriggerEvent.


   .. py:method:: define_container_state(pod)


   .. py:method:: should_wait(pod_phase, container_state)
      :staticmethod:



