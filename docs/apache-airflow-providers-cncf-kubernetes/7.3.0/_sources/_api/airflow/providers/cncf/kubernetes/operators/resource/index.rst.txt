:py:mod:`airflow.providers.cncf.kubernetes.operators.resource`
==============================================================

.. py:module:: airflow.providers.cncf.kubernetes.operators.resource

.. autoapi-nested-parse::

   Manage a Kubernetes Resource.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.operators.resource.KubernetesCreateResourceOperator
   airflow.providers.cncf.kubernetes.operators.resource.KubernetesDeleteResourceOperator




.. py:class:: KubernetesCreateResourceOperator(*, yaml_conf, namespace = None, kubernetes_conn_id = KubernetesHook.default_conn_name, **kwargs)


   Bases: :py:obj:`KubernetesResourceBaseOperator`

   Create a resource in a kubernetes.

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: KubernetesDeleteResourceOperator(*, yaml_conf, namespace = None, kubernetes_conn_id = KubernetesHook.default_conn_name, **kwargs)


   Bases: :py:obj:`KubernetesResourceBaseOperator`

   Delete a resource in a kubernetes.

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



