:py:mod:`airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils`
===============================================================================

.. py:module:: airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.Singleton
   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.ResourceVersion
   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.KubernetesJobWatcher
   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.AirflowKubernetesScheduler



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.get_base_pod_from_template



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.T


.. py:data:: T

   

.. py:class:: Singleton


   Bases: :py:obj:`type`, :py:obj:`Generic`\ [\ :py:obj:`T`\ ]

   Metaclass that allows to implement singleton pattern.

   .. py:method:: __call__(*args, **kwargs)

      Call self as a function.



.. py:class:: ResourceVersion


   Singleton for tracking resourceVersion from Kubernetes.

   .. py:attribute:: resource_version
      :type: dict[str, str]

      


.. py:class:: KubernetesJobWatcher(namespace, watcher_queue, resource_version, scheduler_job_id, kube_config)


   Bases: :py:obj:`multiprocessing.Process`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Watches for Kubernetes jobs.

   .. py:method:: run()

      Perform watching.


   .. py:method:: process_error(event)

      Process error response.


   .. py:method:: process_status(pod_name, namespace, status, annotations, resource_version, event)



.. py:class:: AirflowKubernetesScheduler(kube_config, result_queue, kube_client, scheduler_job_id)


   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Airflow Scheduler for Kubernetes.

   .. py:method:: run_pod_async(pod, **kwargs)

      Run POD asynchronously.


   .. py:method:: run_next(next_job)

      Receives the next job to run, builds the pod, and creates it.


   .. py:method:: delete_pod(pod_name, namespace)

      Delete Pod from a namespace; does not raise if it does not exist.


   .. py:method:: patch_pod_executor_done(*, pod_name, namespace)

      Add a "done" annotation to ensure we don't continually adopt pods.


   .. py:method:: sync()

      Check the status of all currently running kubernetes jobs.

      If a job is completed, its status is placed in the result queue to be sent back to the scheduler.


   .. py:method:: process_watcher_task(task)

      Process the task by watcher.


   .. py:method:: terminate()

      Terminates the watcher.



.. py:function:: get_base_pod_from_template(pod_template_file, kube_config)

   Get base pod from template.

   Reads either the pod_template_file set in the executor_config or the base pod_template_file
   set in the airflow.cfg to craft a "base pod" that will be used by the KubernetesExecutor

   :param pod_template_file: absolute path to a pod_template_file.yaml or None
   :param kube_config: The KubeConfig class generated by airflow that contains all kube metadata
   :return: a V1Pod that can be used as the base pod for k8s tasks


