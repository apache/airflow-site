:py:mod:`airflow.providers.cncf.kubernetes.callbacks`
=====================================================

.. py:module:: airflow.providers.cncf.kubernetes.callbacks


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.callbacks.ExecutionMode
   airflow.providers.cncf.kubernetes.callbacks.KubernetesPodOperatorCallback




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.callbacks.client_type


.. py:data:: client_type

   

.. py:class:: ExecutionMode


   Bases: :py:obj:`str`, :py:obj:`enum.Enum`

   Enum class for execution mode.

   .. py:attribute:: SYNC
      :value: 'sync'

      

   .. py:attribute:: ASYNC
      :value: 'async'

      


.. py:class:: KubernetesPodOperatorCallback


   `KubernetesPodOperator` callbacks methods.

   Currently, the callbacks methods are not called in the async mode, this support will be added
   in the future.

   .. py:method:: on_sync_client_creation(*, client, **kwargs)
      :staticmethod:

      Invoke this callback after creating the sync client.

      :param client: the created `kubernetes.client.CoreV1Api` client.


   .. py:method:: on_pod_creation(*, pod, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback after creating the pod.

      :param pod: the created pod.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).


   .. py:method:: on_pod_starting(*, pod, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback when the pod starts.

      :param pod: the started pod.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).


   .. py:method:: on_pod_completion(*, pod, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback when the pod completes.

      :param pod: the completed pod.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).


   .. py:method:: on_pod_cleanup(*, pod, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback after cleaning/deleting the pod.

      :param pod: the completed pod.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).


   .. py:method:: on_operator_resuming(*, pod, event, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback when resuming the `KubernetesPodOperator` from deferred state.

      :param pod: the current state of the pod.
      :param event: the returned event from the Trigger.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).


   .. py:method:: progress_callback(*, line, client, mode, **kwargs)
      :staticmethod:

      Invoke this callback to process pod container logs.

      :param line: the read line of log.
      :param client: the Kubernetes client that can be used in the callback.
      :param mode: the current execution mode, it's one of (`sync`, `async`).



