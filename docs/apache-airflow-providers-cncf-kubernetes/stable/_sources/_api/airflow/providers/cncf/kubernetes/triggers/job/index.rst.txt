:py:mod:`airflow.providers.cncf.kubernetes.triggers.job`
========================================================

.. py:module:: airflow.providers.cncf.kubernetes.triggers.job


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.cncf.kubernetes.triggers.job.KubernetesJobTrigger




.. py:class:: KubernetesJobTrigger(job_name, job_namespace, pod_name, pod_namespace, base_container_name, kubernetes_conn_id = None, poll_interval = 10.0, cluster_context = None, config_file = None, in_cluster = None, get_logs = True, do_xcom_push = False)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   KubernetesJobTrigger run on the trigger worker to check the state of Job.

   :param job_name: The name of the job.
   :param job_namespace: The namespace of the job.
   :param pod_name: The name of the Pod.
   :param pod_namespace: The namespace of the Pod.
   :param base_container_name: The name of the base container in the pod.
   :param kubernetes_conn_id: The :ref:`kubernetes connection id <howto/connection:kubernetes>`
       for the Kubernetes cluster.
   :param cluster_context: Context that points to kubernetes cluster.
   :param config_file: Path to kubeconfig file.
   :param poll_interval: Polling period in seconds to check for the status.
   :param in_cluster: run kubernetes client with in_cluster configuration.
   :param get_logs: get the stdout of the base container as logs of the tasks.
   :param do_xcom_push: If True, the content of the file
       /airflow/xcom/return.json in the container will also be pushed to an
       XCom when the container completes.

   .. py:method:: serialize()

      Serialize KubernetesCreateJobTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Get current job status and yield a TriggerEvent.


   .. py:method:: hook()


   .. py:method:: pod_manager()



