:mod:`airflow.providers.datadog.sensors.datadog`
================================================

.. py:module:: airflow.providers.datadog.sensors.datadog


Module Contents
---------------

.. py:class:: DatadogSensor(*, datadog_conn_id: str = 'datadog_default', from_seconds_ago: int = 3600, up_to_seconds_from_now: int = 0, priority: Optional[str] = None, sources: Optional[str] = None, tags: Optional[List[str]] = None, response_check: Optional[Callable[[Dict[str, Any]], bool]] = None, **kwargs)

   Bases: :class:`airflow.sensors.base.BaseSensorOperator`

   A sensor to listen, with a filter, to datadog event streams and determine
   if some event was emitted.

   Depends on the datadog API, which has to be deployed on the same server where
   Airflow runs.

   :param datadog_conn_id: The connection to datadog, containing metadata for api keys.
   :type datadog_conn_id: str
   :param from_seconds_ago: POSIX timestamp start (default 3600).
   :type from_seconds_ago: int
   :param up_to_seconds_from_now: POSIX timestamp end (default 0).
   :type up_to_seconds_from_now: int
   :param priority: Priority of your events, either low or normal.
   :type priority: Optional[str]
   :param sources: A comma separated list indicating what tags, if any,
       should be used to filter the list of monitors by scope
   :type sources: Optional[str]
   :param tags: Get datadog events from specific sources.
   :type tags: Optional[List[str]]
   :param response_check: A check against the ‘requests’ response object. The callable takes
       the response object as the first positional argument and optionally any number of
       keyword arguments available in the context dictionary. It should return True for
       ‘pass’ and False otherwise.
   :param response_check: Optional[Callable[[Dict[str, Any]], bool]]

   .. attribute:: ui_color
      :annotation: = #66c3dd

      

   
   .. method:: poke(self, context: Dict[str, Any])




