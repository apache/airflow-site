:py:mod:`airflow.providers.dingding.operators.dingding`
=======================================================

.. py:module:: airflow.providers.dingding.operators.dingding


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.dingding.operators.dingding.DingdingOperator




.. py:class:: DingdingOperator(*, dingding_conn_id = 'dingding_default', message_type = 'text', message = None, at_mobiles = None, at_all = False, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   This operator allows to send DingTalk message using Custom Robot API.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:DingdingOperator`

   :param dingding_conn_id: Dingding connection id that has access token in the password field,
       and optional host name in host field, if host not set than default
       ``https://oapi.dingtalk.com`` will use.
   :param message_type: Message type you want to send to Dingding, support five type so far
       including ``text``, ``link``, ``markdown``, ``actionCard``, ``feedCard``.
   :param message: The message send to chat group
   :param at_mobiles: Remind specific users with this message
   :param at_all: Remind all people in group or not. If True, will overwrite ``at_mobiles``

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('message',)

      

   .. py:attribute:: ui_color
      :value: '#4ea4d4'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



