:py:mod:`airflow.providers.exasol.hooks.exasol`
===============================================

.. py:module:: airflow.providers.exasol.hooks.exasol


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.exasol.hooks.exasol.ExasolHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.exasol.hooks.exasol.exasol_fetch_all_handler
   airflow.providers.exasol.hooks.exasol.exasol_fetch_one_handler



.. py:class:: ExasolHook(*args, **kwargs)

   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   Interact with Exasol.
   You can specify the pyexasol ``compression``, ``encryption``, ``json_lib``
   and ``client_name``  parameters in the extra field of your connection
   as ``{"compression": True, "json_lib": "rapidjson", etc}``.
   See `pyexasol reference
   <https://github.com/badoo/pyexasol/blob/master/docs/REFERENCE.md#connect>`_
   for more details.

   .. py:attribute:: conn_name_attr
      :value: 'exasol_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'exasol_default'

      

   .. py:attribute:: conn_type
      :value: 'exasol'

      

   .. py:attribute:: hook_name
      :value: 'Exasol'

      

   .. py:attribute:: supports_autocommit
      :value: True

      

   .. py:method:: get_conn()

      Returns a connection object


   .. py:method:: get_pandas_df(sql, parameters = None, **kwargs)

      Executes the sql and returns a pandas dataframe

      :param sql: the sql statement to be executed (str) or a list of
          sql statements to execute
      :param parameters: The parameters to render the SQL query with.
      :param kwargs: (optional) passed into pyexasol.ExaConnection.export_to_pandas method


   .. py:method:: get_records(sql, parameters = None)

      Executes the sql and returns a set of records.

      :param sql: the sql statement to be executed (str) or a list of
          sql statements to execute
      :param parameters: The parameters to render the SQL query with.


   .. py:method:: get_first(sql, parameters = None)

      Executes the sql and returns the first resulting row.

      :param sql: the sql statement to be executed (str) or a list of
          sql statements to execute
      :param parameters: The parameters to render the SQL query with.


   .. py:method:: export_to_file(filename, query_or_table, query_params = None, export_params = None)

      Exports data to a file.

      :param filename: Path to the file to which the data has to be exported
      :param query_or_table: the sql statement to be executed or table name to export
      :param query_params: Query parameters passed to underlying ``export_to_file``
          method of :class:`~pyexasol.connection.ExaConnection`.
      :param export_params: Extra parameters passed to underlying ``export_to_file``
          method of :class:`~pyexasol.connection.ExaConnection`.


   .. py:method:: get_description(statement)
      :staticmethod:

      Copied implementation from DB2-API wrapper.
      More info https://github.com/exasol/pyexasol/blob/master/docs/DBAPI_COMPAT.md#db-api-20-wrapper
      :param statement: Exasol statement
      :return: description sequence of t


   .. py:method:: run(sql, autocommit = False, parameters = None, handler = None, split_statements = False, return_last = True)

      Runs a command or a list of commands. Pass a list of sql
      statements to the sql parameter to get them to execute
      sequentially

      :param sql: the sql statement to be executed (str) or a list of
          sql statements to execute
      :param autocommit: What to set the connection's autocommit setting to
          before executing the query.
      :param parameters: The parameters to render the SQL query with.
      :param handler: The result handler which is called with the result of each statement.
      :param split_statements: Whether to split a single SQL string into statements and run separately
      :param return_last: Whether to return result for only last statement or for all after split
      :return: return only result of the LAST SQL expression if handler was provided.


   .. py:method:: set_autocommit(conn, autocommit)

      Sets the autocommit flag on the connection

      :param conn: Connection to set autocommit setting to.
      :param autocommit: The autocommit setting to set.


   .. py:method:: get_autocommit(conn)

      Get autocommit setting for the provided connection.
      Return True if autocommit is set.
      Return False if autocommit is not set or set to False or conn
      does not support autocommit.

      :param conn: Connection to get autocommit setting from.
      :return: connection autocommit setting.



.. py:function:: exasol_fetch_all_handler(statement)


.. py:function:: exasol_fetch_one_handler(statement)


