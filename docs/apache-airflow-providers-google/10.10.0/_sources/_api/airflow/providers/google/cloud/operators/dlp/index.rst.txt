:py:mod:`airflow.providers.google.cloud.operators.dlp`
======================================================

.. py:module:: airflow.providers.google.cloud.operators.dlp

.. autoapi-nested-parse::

   Various Google Cloud DLP operators which allow you to perform basic operations using Cloud DLP.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.dlp.CloudDLPCancelDLPJobOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDeidentifyTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPCreateDLPJobOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPCreateInspectTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPCreateJobTriggerOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPCreateStoredInfoTypeOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeidentifyContentOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDeidentifyTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteDLPJobOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteInspectTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteJobTriggerOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPDeleteStoredInfoTypeOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPGetDeidentifyTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPGetInspectTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPGetDLPJobTriggerOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPGetStoredInfoTypeOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPInspectContentOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListDeidentifyTemplatesOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListDLPJobsOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListInfoTypesOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListInspectTemplatesOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListJobTriggersOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPListStoredInfoTypesOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPRedactImageOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPReidentifyContentOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateDeidentifyTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateInspectTemplateOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateJobTriggerOperator
   airflow.providers.google.cloud.operators.dlp.CloudDLPUpdateStoredInfoTypeOperator




.. py:class:: CloudDLPCancelDLPJobOperator(*, dlp_job_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Starts asynchronous cancellation on a long-running DlpJob.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCancelDLPJobOperator`

   :param dlp_job_id: ID of the DLP job resource to be cancelled.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default project_id
       from the Google Cloud connection is used.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('dlp_job_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPCreateDeidentifyTemplateOperator(*, organization_id = None, project_id = None, deidentify_template = None, template_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create a deidentify template to reuse frequently-used configurations for content, images, and storage.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCreateDeidentifyTemplateOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param deidentify_template: (Optional) The DeidentifyTemplate to create.
   :param template_id: (Optional) The template ID.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'deidentify_template', 'template_id', 'gcp_conn_id',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPCreateDLPJobOperator(*, project_id = None, inspect_job = None, risk_job = None, job_id = None, retry = DEFAULT, timeout = None, metadata = (), wait_until_finished = True, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a new job to inspect storage or calculate risk metrics.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCreateDLPJobOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param inspect_job: (Optional) The configuration for the inspect job.
   :param risk_job: (Optional) The configuration for the risk job.
   :param job_id: (Optional) The job ID.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param wait_until_finished: (Optional) If true, it will keep polling the job state
       until it is set to DONE.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'inspect_job', 'risk_job', 'job_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPCreateInspectTemplateOperator(*, organization_id = None, project_id = None, inspect_template = None, template_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create an InspectTemplate to reuse frequently-used configurations for content, images, and storage.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCreateInspectTemplateOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param inspect_template: (Optional) The InspectTemplate to create.
   :param template_id: (Optional) The template ID.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'inspect_template', 'template_id', 'gcp_conn_id',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPCreateJobTriggerOperator(*, project_id = None, job_trigger = None, trigger_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create a job trigger to run DLP actions such as scanning storage for sensitive info on a set schedule.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCreateJobTriggerOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param job_trigger: (Optional) The JobTrigger to create.
   :param trigger_id: (Optional) The JobTrigger ID.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'job_trigger', 'trigger_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPCreateStoredInfoTypeOperator(*, organization_id = None, project_id = None, config = None, stored_info_type_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a pre-built stored infoType to be used for inspection.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPCreateStoredInfoTypeOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param config: (Optional) The config for the StoredInfoType.
   :param stored_info_type_id: (Optional) The StoredInfoType ID.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'config', 'stored_info_type_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeidentifyContentOperator(*, project_id = None, deidentify_config = None, inspect_config = None, item = None, inspect_template_name = None, deidentify_template_name = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   De-identifies potentially sensitive info from a content item; limits input size and output size.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeidentifyContentOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param deidentify_config: (Optional) Configuration for the de-identification of the
       content item. Items specified here will override the template referenced by the
       deidentify_template_name argument.
   :param inspect_config: (Optional) Configuration for the inspector. Items specified
       here will override the template referenced by the inspect_template_name argument.
   :param item: (Optional) The item to de-identify. Will be treated as text.
   :param inspect_template_name: (Optional) Optional template to use. Any configuration
       directly specified in inspect_config will override those set in the template.
   :param deidentify_template_name: (Optional) Optional template to use. Any
       configuration directly specified in deidentify_config will override those set
       in the template.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'deidentify_config', 'inspect_config', 'item', 'inspect_template_name',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeleteDeidentifyTemplateOperator(*, template_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a DeidentifyTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeleteDeidentifyTemplateOperator`

   :param template_id: The ID of deidentify template to be deleted.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeleteDLPJobOperator(*, dlp_job_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a long-running DlpJob.

   This method indicates that the client is no longer interested
   in the DlpJob result. The job will be cancelled if possible.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeleteDLPJobOperator`

   :param dlp_job_id: The ID of the DLP job resource to be deleted.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('dlp_job_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeleteInspectTemplateOperator(*, template_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes an InspectTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeleteInspectTemplateOperator`

   :param template_id: The ID of the inspect template to be deleted.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeleteJobTriggerOperator(*, job_trigger_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a job trigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeleteJobTriggerOperator`

   :param job_trigger_id: The ID of the DLP job trigger to be deleted.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_trigger_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPDeleteStoredInfoTypeOperator(*, stored_info_type_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a stored infoType.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPDeleteStoredInfoTypeOperator`

   :param stored_info_type_id: The ID of the stored info type to be deleted.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('stored_info_type_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPGetDeidentifyTemplateOperator(*, template_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets a DeidentifyTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPGetDeidentifyTemplateOperator`

   :param template_id: The ID of deidentify template to be read.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPGetDLPJobOperator(*, dlp_job_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets the latest state of a long-running DlpJob.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPGetDLPJobOperator`

   :param dlp_job_id: The ID of the DLP job resource to be read.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('dlp_job_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPGetInspectTemplateOperator(*, template_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets an InspectTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPGetInspectTemplateOperator`

   :param template_id: The ID of inspect template to be read.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPGetDLPJobTriggerOperator(*, job_trigger_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets a job trigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPGetDLPJobTriggerOperator`

   :param job_trigger_id: The ID of the DLP job trigger to be read.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_trigger_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPGetStoredInfoTypeOperator(*, stored_info_type_id, organization_id = None, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Gets a stored infoType.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPGetStoredInfoTypeOperator`

   :param stored_info_type_id: The ID of the stored info type to be read.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('stored_info_type_id', 'organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPInspectContentOperator(*, project_id = None, inspect_config = None, item = None, inspect_template_name = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Finds potentially sensitive info in content; limits input size, processing time, and output size.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPInspectContentOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param inspect_config: (Optional) Configuration for the inspector. Items specified
       here will override the template referenced by the inspect_template_name argument.
   :param item: (Optional) The item to de-identify. Will be treated as text.
   :param inspect_template_name: (Optional) Optional template to use. Any configuration
       directly specified in inspect_config will override those set in the template.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'inspect_config', 'item', 'inspect_template_name', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListDeidentifyTemplatesOperator(*, organization_id = None, project_id = None, page_size = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists DeidentifyTemplates.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListDeidentifyTemplatesOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param page_size: (Optional) The maximum number of resources contained in the
       underlying API response.
   :param order_by: (Optional) Optional comma separated list of fields to order by,
       followed by asc or desc postfix.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListDLPJobsOperator(*, project_id = None, results_filter = None, page_size = None, job_type = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists DlpJobs that match the specified filter in the request.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListDLPJobsOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param results_filter: (Optional) Filter used to specify a subset of results.
   :param page_size: (Optional) The maximum number of resources contained in the
       underlying API response.
   :param job_type: (Optional) The type of job.
   :param order_by: (Optional) Optional comma separated list of fields to order by,
       followed by asc or desc postfix.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListInfoTypesOperator(*, project_id = None, language_code = None, results_filter = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Returns a list of the sensitive information types that the DLP API supports.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListInfoTypesOperator`

   :param language_code: (Optional) Optional BCP-47 language code for localized infoType
       friendly names. If omitted, or if localized strings are not available, en-US
       strings will be returned.
   :param results_filter: (Optional) Filter used to specify a subset of results.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('language_code', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListInspectTemplatesOperator(*, organization_id = None, project_id = None, page_size = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists InspectTemplates.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListInspectTemplatesOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param page_size: (Optional) The maximum number of resources contained in the
       underlying API response.
   :param order_by: (Optional) Optional comma separated list of fields to order by,
       followed by asc or desc postfix.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListJobTriggersOperator(*, project_id = None, page_size = None, order_by = None, results_filter = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists job triggers.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListJobTriggersOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param page_size: (Optional) The maximum number of resources contained in the
       underlying API response.
   :param order_by: (Optional) Optional comma separated list of fields to order by,
       followed by asc or desc postfix.
   :param results_filter: (Optional) Filter used to specify a subset of results.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPListStoredInfoTypesOperator(*, organization_id = None, project_id = None, page_size = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists stored infoTypes.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPListStoredInfoTypesOperator`

   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param page_size: (Optional) The maximum number of resources contained in the
       underlying API response.
   :param order_by: (Optional) Optional comma separated list of fields to order by,
       followed by asc or desc postfix.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('organization_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPRedactImageOperator(*, project_id = None, inspect_config = None, image_redaction_configs = None, include_findings = None, byte_item = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Redacts potentially sensitive info from an image; limits input size, processing time, and output size.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPRedactImageOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param inspect_config: (Optional) Configuration for the inspector. Items specified
       here will override the template referenced by the inspect_template_name argument.
   :param image_redaction_configs: (Optional) The configuration for specifying what
       content to redact from images.
   :param include_findings: (Optional) Whether the response should include findings
       along with the redacted image.
   :param byte_item: (Optional) The content must be PNG, JPEG, SVG or BMP.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'inspect_config', 'image_redaction_configs', 'include_findings', 'byte_item',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPReidentifyContentOperator(*, project_id = None, reidentify_config = None, inspect_config = None, item = None, inspect_template_name = None, reidentify_template_name = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Re-identifies content that has been de-identified.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPReidentifyContentOperator`

   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param reidentify_config: (Optional) Configuration for the re-identification of
       the content item.
   :param inspect_config: (Optional) Configuration for the inspector.
   :param item: (Optional) The item to re-identify. Will be treated as text.
   :param inspect_template_name: (Optional) Optional template to use. Any configuration
       directly specified in inspect_config will override those set in the template.
   :param reidentify_template_name: (Optional) Optional template to use. References an
       instance of DeidentifyTemplate. Any configuration directly specified in
       reidentify_config or inspect_config will override those set in the template.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'reidentify_config', 'inspect_config', 'item', 'inspect_template_name',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPUpdateDeidentifyTemplateOperator(*, template_id, organization_id = None, project_id = None, deidentify_template = None, update_mask = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Updates the DeidentifyTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPUpdateDeidentifyTemplateOperator`

   :param template_id: The ID of deidentify template to be updated.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param deidentify_template: New DeidentifyTemplate value.
   :param update_mask: Mask to control which fields get updated.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'deidentify_template', 'update_mask',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPUpdateInspectTemplateOperator(*, template_id, organization_id = None, project_id = None, inspect_template = None, update_mask = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Updates the InspectTemplate.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPUpdateInspectTemplateOperator`

   :param template_id: The ID of the inspect template to be updated.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param inspect_template: New InspectTemplate value.
   :param update_mask: Mask to control which fields get updated.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('template_id', 'organization_id', 'project_id', 'inspect_template', 'update_mask',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPUpdateJobTriggerOperator(*, job_trigger_id, project_id = None, job_trigger = None, update_mask = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Updates a job trigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPUpdateJobTriggerOperator`

   :param job_trigger_id: The ID of the DLP job trigger to be updated.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. If set to None or missing, the default
       project_id from the Google Cloud connection is used.
   :param job_trigger: New JobTrigger value.
   :param update_mask: Mask to control which fields get updated.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('job_trigger_id', 'project_id', 'job_trigger', 'update_mask', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudDLPUpdateStoredInfoTypeOperator(*, stored_info_type_id, organization_id = None, project_id = None, config = None, update_mask = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Updates the stored infoType by creating a new version.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudDLPUpdateStoredInfoTypeOperator`

   :param stored_info_type_id: The ID of the stored info type to be updated.
   :param organization_id: (Optional) The organization ID. Required to set this
       field if parent resource is an organization.
   :param project_id: (Optional) Google Cloud project ID where the
       DLP Instance exists. Only set this field if the parent resource is
       a project instead of an organization.
   :param config: Updated configuration for the storedInfoType. If not provided, a new
       version of the storedInfoType will be created with the existing configuration.
   :param update_mask: Mask to control which fields get updated.
   :param retry: (Optional) A retry object used to retry requests.
       If None is specified, requests will not be retried.
   :param timeout: (Optional) The amount of time, in seconds, to wait for the request
       to complete. Note that if retry is specified, the timeout applies to each
       individual attempt.
   :param metadata: (Optional) Additional metadata that is provided to the method.
   :param gcp_conn_id: (Optional) The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('stored_info_type_id', 'organization_id', 'project_id', 'config', 'update_mask', 'gcp_conn_id',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



