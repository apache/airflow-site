:py:mod:`airflow.providers.google.cloud.triggers.gcs`
=====================================================

.. py:module:: airflow.providers.google.cloud.triggers.gcs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.gcs.GCSBlobTrigger
   airflow.providers.google.cloud.triggers.gcs.GCSCheckBlobUpdateTimeTrigger
   airflow.providers.google.cloud.triggers.gcs.GCSPrefixBlobTrigger
   airflow.providers.google.cloud.triggers.gcs.GCSUploadSessionTrigger




.. py:class:: GCSBlobTrigger(bucket, object_name, poke_interval, google_cloud_conn_id, hook_params)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   A trigger that fires and it finds the requested file or folder present in the given bucket.

   :param bucket: the bucket in the google cloud storage where the objects are residing.
   :param object_name: the file or folder present in the bucket
   :param google_cloud_conn_id: reference to the Google Connection
   :param poke_interval: polling period in seconds to check for file/folder
   :param hook_params: Extra config params to be passed to the underlying hook.
           Should match the desired hook constructor params.

   .. py:method:: serialize()

      Serializes GCSBlobTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Loop until the relevant file/folder is found.



.. py:class:: GCSCheckBlobUpdateTimeTrigger(bucket, object_name, target_date, poke_interval, google_cloud_conn_id, hook_params)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   A trigger that makes an async call to GCS to check whether the object is updated in a bucket.

   :param bucket: google cloud storage bucket name cloud storage where the objects are residing.
   :param object_name: the file or folder present in the bucket
   :param target_date: context datetime to compare with blob object updated time
   :param poke_interval: polling period in seconds to check for file/folder
   :param google_cloud_conn_id: reference to the Google Connection
   :param hook_params: dict object that has delegate_to and impersonation_chain

   .. py:method:: serialize()

      Serializes GCSCheckBlobUpdateTimeTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Loop until the object updated time is greater than target datetime.



.. py:class:: GCSPrefixBlobTrigger(bucket, prefix, poke_interval, google_cloud_conn_id, hook_params)


   Bases: :py:obj:`GCSBlobTrigger`

   Looks for objects in bucket matching a prefix.

   If none found, sleep for interval and check again. Otherwise, return matches.

   :param bucket: the bucket in the google cloud storage where the objects are residing.
   :param prefix: The prefix of the blob_names to match in the Google cloud storage bucket
   :param google_cloud_conn_id: reference to the Google Connection
   :param poke_interval: polling period in seconds to check
   :param hook_params: Extra config params to be passed to the underlying hook.
           Should match the desired hook constructor params.

   .. py:method:: serialize()

      Serializes GCSPrefixBlobTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Loop until the matches are found for the given prefix on the bucket.



.. py:class:: GCSUploadSessionTrigger(bucket, prefix, poke_interval, google_cloud_conn_id, hook_params, inactivity_period = 60 * 60, min_objects = 1, previous_objects = None, allow_delete = True)


   Bases: :py:obj:`GCSPrefixBlobTrigger`

   Return Trigger Event if the inactivity period has passed with no increase in the number of objects.

   :param bucket: The Google Cloud Storage bucket where the objects are expected.
   :param prefix: The name of the prefix to check in the Google cloud storage bucket.
   :param poke_interval: polling period in seconds to check
   :param inactivity_period: The total seconds of inactivity to designate
       an upload session is over. Note, this mechanism is not real time and
       this operator may not return until a interval after this period
       has passed with no additional objects sensed.
   :param min_objects: The minimum number of objects needed for upload session
       to be considered valid.
   :param previous_objects: The set of object ids found during the last poke.
   :param allow_delete: Should this sensor consider objects being deleted
       between intervals valid behavior. If true a warning message will be logged
       when this happens. If false an error will be raised.
   :param google_cloud_conn_id: The connection ID to use when connecting
       to Google Cloud Storage.

   .. py:method:: serialize()

      Serializes GCSUploadSessionTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Loop until no new files or deleted files in list blob for the inactivity_period.



