:py:mod:`airflow.providers.google.cloud.hooks.cloud_batch`
==========================================================

.. py:module:: airflow.providers.google.cloud.hooks.cloud_batch


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.cloud_batch.CloudBatchHook
   airflow.providers.google.cloud.hooks.cloud_batch.CloudBatchAsyncHook




.. py:class:: CloudBatchHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for the Google Cloud Batch service.

   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account.

   .. py:method:: get_conn()

      Retrieves connection to GCE Batch.

      :return: Google Batch Service client object.


   .. py:method:: submit_batch_job(job_name, job, region, project_id = PROVIDE_PROJECT_ID)


   .. py:method:: delete_job(job_name, region, project_id = PROVIDE_PROJECT_ID)


   .. py:method:: list_jobs(region, project_id = PROVIDE_PROJECT_ID, filter = None, limit = None)


   .. py:method:: list_tasks(region, job_name, project_id = PROVIDE_PROJECT_ID, group_name = 'group0', filter = None, limit = None)


   .. py:method:: wait_for_job(job_name, polling_period_seconds = 10, timeout = None)


   .. py:method:: get_job(job_name)



.. py:class:: CloudBatchAsyncHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Async hook for the Google Cloud Batch service.

   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account.

   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: get_batch_job(job_name)
      :async:



