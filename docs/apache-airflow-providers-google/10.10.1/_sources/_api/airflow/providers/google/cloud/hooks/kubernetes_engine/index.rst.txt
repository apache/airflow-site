:py:mod:`airflow.providers.google.cloud.hooks.kubernetes_engine`
================================================================

.. py:module:: airflow.providers.google.cloud.hooks.kubernetes_engine

.. autoapi-nested-parse::

   This module contains a Google Kubernetes Engine Hook.

   .. spelling:word-list::

       gapic
       enums



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.kubernetes_engine.GKEHook
   airflow.providers.google.cloud.hooks.kubernetes_engine.GKEAsyncHook
   airflow.providers.google.cloud.hooks.kubernetes_engine.GKEPodHook
   airflow.providers.google.cloud.hooks.kubernetes_engine.GKEPodAsyncHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.kubernetes_engine.OPERATIONAL_POLL_INTERVAL


.. py:data:: OPERATIONAL_POLL_INTERVAL
   :value: 15

   

.. py:class:: GKEHook(gcp_conn_id = 'google_cloud_default', location = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Google Kubernetes Engine cluster APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.

   .. py:method:: get_cluster_manager_client()

      Create or get a ClusterManagerClient.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: get_client()


   .. py:method:: wait_for_operation(operation, project_id = None)

      Continuously fetch the status from Google Cloud.

      This is done until the given operation completes, or raises an error.

      :param operation: The Operation to wait for.
      :param project_id: Google Cloud project ID.
      :return: A new, updated operation fetched from Google Cloud.


   .. py:method:: get_operation(operation_name, project_id = None)

      Get an operation from Google Cloud.

      :param operation_name: Name of operation to fetch
      :param project_id: Google Cloud project ID
      :return: The new, updated operation from Google Cloud


   .. py:method:: delete_cluster(name, project_id = PROVIDE_PROJECT_ID, wait_to_complete = True, retry = DEFAULT, timeout = None)

      Deletes the cluster, the Kubernetes endpoint, and all worker nodes.

      Firewalls and routes that were configured during cluster creation are
      also deleted. Other Google Compute Engine resources that might be in use
      by the cluster (e.g. load balancer resources) will not be deleted if
      they were not present at the initial create time.

      :param name: The name of the cluster to delete.
      :param project_id: Google Cloud project ID.
      :param wait_to_complete: If *True*, wait until the deletion is finished
          before returning.
      :param retry: Retry object used to determine when/if to retry requests.
          If None is specified, requests will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request
          to complete. Note that if retry is specified, the timeout applies to
          each individual attempt.
      :return: The full url to the delete operation if successful, else None.


   .. py:method:: create_cluster(cluster, project_id = PROVIDE_PROJECT_ID, wait_to_complete = True, retry = DEFAULT, timeout = None)

      Create a cluster.

      This should consist of the specified number, and the type of Google
      Compute Engine instances.

      :param cluster: A Cluster protobuf or dict. If dict is provided, it must
          be of the same form as the protobuf message
          :class:`google.cloud.container_v1.types.Cluster`.
      :param project_id: Google Cloud project ID.
      :param wait_to_complete: A boolean value which makes method to sleep
          while operation of creation is not finished.
      :param retry: A retry object (``google.api_core.retry.Retry``) used to
          retry requests. If None is specified, requests will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request
          to complete. Note that if retry is specified, the timeout applies to
          each individual attempt.
      :return: The full url to the new, or existing, cluster.
      :raises ParseError: On JSON parsing problems when trying to convert
          dict.
      :raises AirflowException: cluster is not dict type nor Cluster proto
          type.


   .. py:method:: get_cluster(name, project_id = PROVIDE_PROJECT_ID, retry = DEFAULT, timeout = None)

      Get details of specified cluster.

      :param name: The name of the cluster to retrieve.
      :param project_id: Google Cloud project ID.
      :param retry: A retry object used to retry requests. If None is
          specified, requests will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request
          to complete. Note that if retry is specified, the timeout applies to
          each individual attempt.



.. py:class:: GKEAsyncHook(gcp_conn_id = 'google_cloud_default', location = None, impersonation_chain = None)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseAsyncHook`

   Asynchronous client of GKE.

   .. py:attribute:: sync_hook_class

      

   .. py:method:: get_operation(operation_name, project_id = PROVIDE_PROJECT_ID)
      :async:

      Fetch an operation from Google Cloud.

      :param operation_name: Name of operation to fetch.
      :param project_id: Google Cloud project ID.
      :return: The new, updated operation from Google Cloud.



.. py:class:: GKEPodHook(cluster_url, ssl_ca_cert, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`, :py:obj:`airflow.providers.cncf.kubernetes.utils.pod_manager.PodOperatorHookProtocol`

   Google Kubernetes Engine pod APIs.

   .. py:property:: is_in_cluster
      :type: bool

      Expose whether the hook is configured with ``load_incluster_config`` or not.


   .. py:method:: api_client()


   .. py:method:: core_v1_client()

      Get authenticated client object.


   .. py:method:: get_namespace()

      Get the namespace configured by the Airflow connection.


   .. py:method:: get_xcom_sidecar_container_image()

      Get the xcom sidecar image defined in the connection.

      Implemented for compatibility with KubernetesHook.


   .. py:method:: get_xcom_sidecar_container_resources()

      Get the xcom sidecar resources defined in the connection.

      Implemented for compatibility with KubernetesHook.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: get_pod(name, namespace)

      Get a pod object.

      :param name: Name of the pod.
      :param namespace: Name of the pod's namespace.



.. py:class:: GKEPodAsyncHook(cluster_url, ssl_ca_cert, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseAsyncHook`

   Google Kubernetes Engine pods APIs asynchronously.

   :param cluster_url: The URL pointed to the cluster.
   :param ssl_ca_cert: SSL certificate used for authentication to the pod.

   .. py:attribute:: sync_hook_class

      

   .. py:attribute:: scopes
      :value: ['https://www.googleapis.com/auth/cloud-platform']

      

   .. py:method:: get_conn(token)
      :async:


   .. py:method:: get_pod(name, namespace)
      :async:

      Get a pod object.

      :param name: Name of the pod.
      :param namespace: Name of the pod's namespace.


   .. py:method:: delete_pod(name, namespace)
      :async:

      Delete a pod.

      :param name: Name of the pod.
      :param namespace: Name of the pod's namespace.


   .. py:method:: read_logs(name, namespace)
      :async:

      Read logs inside the pod while starting containers inside.

      All the logs will be outputted with its timestamp to track the logs
      after the execution of the pod is completed. The method is used for
      async output of the logs only in the pod failed it execution or the task
      was cancelled by the user.

      :param name: Name of the pod.
      :param namespace: Name of the pod's namespace.



