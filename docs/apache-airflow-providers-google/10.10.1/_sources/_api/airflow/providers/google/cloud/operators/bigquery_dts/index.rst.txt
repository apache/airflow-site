:py:mod:`airflow.providers.google.cloud.operators.bigquery_dts`
===============================================================

.. py:module:: airflow.providers.google.cloud.operators.bigquery_dts

.. autoapi-nested-parse::

   This module contains Google BigQuery Data Transfer Service operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.bigquery_dts.BigQueryCreateDataTransferOperator
   airflow.providers.google.cloud.operators.bigquery_dts.BigQueryDeleteDataTransferConfigOperator
   airflow.providers.google.cloud.operators.bigquery_dts.BigQueryDataTransferServiceStartTransferRunsOperator




.. py:class:: BigQueryCreateDataTransferOperator(*, transfer_config, project_id = None, location = None, authorization_code = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id='google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a new data transfer configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:BigQueryCreateDataTransferOperator`

   :param transfer_config: Data transfer configuration to create.
   :param project_id: The BigQuery project id where the transfer configuration should be
           created. If set to None or missing, the default project_id from the Google Cloud connection
           is used.
   :param location: BigQuery Transfer Service location for regional transfers.
   :param authorization_code: authorization code to use with this transfer configuration.
       This is required if new credentials are needed.
   :param retry: A retry object used to retry requests. If `None` is
       specified, requests will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to
       complete. Note that if retry is specified, the timeout applies to each individual
       attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('transfer_config', 'project_id', 'authorization_code', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: BigQueryDeleteDataTransferConfigOperator(*, transfer_config_id, project_id = None, location = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id='google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes transfer configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:BigQueryDeleteDataTransferConfigOperator`

   :param transfer_config_id: Id of transfer config to be used.
   :param project_id: The BigQuery project id where the transfer configuration should be
       created. If set to None or missing, the default project_id from the Google Cloud connection is used.
   :param location: BigQuery Transfer Service location for regional transfers.
   :param retry: A retry object used to retry requests. If `None` is
       specified, requests will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to
       complete. Note that if retry is specified, the timeout applies to each individual
       attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('transfer_config_id', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: BigQueryDataTransferServiceStartTransferRunsOperator(*, transfer_config_id, project_id = None, location = None, requested_time_range = None, requested_run_time = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id='google_cloud_default', impersonation_chain = None, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Start manual transfer runs to be executed now with schedule_time equal to current time.

   The transfer runs can be created for a time range where the run_time is between
   start_time (inclusive) and end_time (exclusive), or for a specific run_time.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:BigQueryDataTransferServiceStartTransferRunsOperator`

   :param transfer_config_id: Id of transfer config to be used.
   :param requested_time_range: Time range for the transfer runs that should be started.
       If a dict is provided, it must be of the same form as the protobuf
       message `~google.cloud.bigquery_datatransfer_v1.types.TimeRange`
   :param requested_run_time: Specific run_time for a transfer run to be started. The
       requested_run_time must not be in the future.  If a dict is provided, it
       must be of the same form as the protobuf message
       `~google.cloud.bigquery_datatransfer_v1.types.Timestamp`
   :param project_id: The BigQuery project id where the transfer configuration should be
       created.
   :param location: BigQuery Transfer Service location for regional transfers.
   :param retry: A retry object used to retry requests. If `None` is
       specified, requests will not be retried.
   :param timeout: The amount of time, in seconds, to wait for the request to
       complete. Note that if retry is specified, the timeout applies to each individual
       attempt.
   :param metadata: Additional metadata that is provided to the method.
   :param gcp_conn_id: The connection ID used to connect to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param deferrable: Run operator in the deferrable mode.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('transfer_config_id', 'project_id', 'requested_time_range', 'requested_run_time',...

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: hook()


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_completed(context, event)

      Method to be executed after invoked trigger in defer method finishes its job.



