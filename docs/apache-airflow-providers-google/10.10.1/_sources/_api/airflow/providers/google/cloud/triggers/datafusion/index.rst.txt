:py:mod:`airflow.providers.google.cloud.triggers.datafusion`
============================================================

.. py:module:: airflow.providers.google.cloud.triggers.datafusion


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.datafusion.DataFusionStartPipelineTrigger




.. py:class:: DataFusionStartPipelineTrigger(instance_url, namespace, pipeline_name, pipeline_id, pipeline_type, poll_interval = 3.0, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, success_states = None)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Trigger to perform checking the pipeline status until it reaches terminate state.

   :param pipeline_name: Your pipeline name.
   :param instance_url: Endpoint on which the REST APIs is accessible for the instance.
   :param pipeline_id: Unique pipeline ID associated with specific pipeline
   :param pipeline_type: Your pipeline type.
   :param namespace: if your pipeline belongs to a Basic edition instance, the namespace ID
      is always default. If your pipeline belongs to an Enterprise edition instance, you
      can create a namespace.
   :param gcp_conn_id: Reference to google cloud connection id
   :param poll_interval: polling period in seconds to check for the status
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:method:: serialize()

      Serializes DataFusionStartPipelineTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Gets current pipeline status and yields a TriggerEvent.



