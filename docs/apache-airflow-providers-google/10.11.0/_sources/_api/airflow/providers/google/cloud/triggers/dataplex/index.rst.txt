:py:mod:`airflow.providers.google.cloud.triggers.dataplex`
==========================================================

.. py:module:: airflow.providers.google.cloud.triggers.dataplex

.. autoapi-nested-parse::

   This module contains Google Dataplex triggers.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.dataplex.DataplexDataQualityJobTrigger




.. py:class:: DataplexDataQualityJobTrigger(job_id, data_scan_id, project_id, region, gcp_conn_id = 'google_cloud_default', polling_interval_seconds = 10, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   DataplexDataQualityJobTrigger runs on the trigger worker and waits for the job to be `SUCCEEDED` state.

   :param job_id: Optional. The ID of a Dataplex job.
   :param data_scan_id: Required. DataScan identifier.
   :param project_id: Google Cloud Project where the job is running.
   :param region: The ID of the Google Cloud region that the job belongs to.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param polling_interval_seconds: polling period in seconds to check for the status.

   .. py:method:: serialize()

      Return the information needed to reconstruct this Trigger.

      :return: Tuple of (class path, keyword arguments needed to re-instantiate).


   .. py:method:: run()
      :async:

      Run the trigger in an asynchronous context.

      The trigger should yield an Event whenever it wants to fire off
      an event, and return None if it is finished. Single-event triggers
      should thus yield and then immediately return.

      If it yields, it is likely that it will be resumed very quickly,
      but it may not be (e.g. if the workload is being moved to another
      triggerer process, or a multi-event trigger was being used for a
      single-event task defer).

      In either case, Trigger classes should assume they will be persisted,
      and then rely on cleanup() being called when they are no longer needed.



