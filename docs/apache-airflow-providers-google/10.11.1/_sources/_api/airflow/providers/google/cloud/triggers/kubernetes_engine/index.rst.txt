:py:mod:`airflow.providers.google.cloud.triggers.kubernetes_engine`
===================================================================

.. py:module:: airflow.providers.google.cloud.triggers.kubernetes_engine


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.triggers.kubernetes_engine.GKEStartPodTrigger
   airflow.providers.google.cloud.triggers.kubernetes_engine.GKEOperationTrigger




.. py:class:: GKEStartPodTrigger(pod_name, pod_namespace, cluster_url, ssl_ca_cert, base_container_name, trigger_start_time, cluster_context = None, poll_interval = 2, in_cluster = None, get_logs = True, startup_timeout = 120, on_finish_action = 'delete_pod', should_delete_pod = None, *args, **kwargs)


   Bases: :py:obj:`airflow.providers.cncf.kubernetes.triggers.pod.KubernetesPodTrigger`

   Trigger for checking pod status until it finishes its job.

   :param pod_name: The name of the pod.
   :param pod_namespace: The namespace of the pod.
   :param cluster_url: The URL pointed to the cluster.
   :param ssl_ca_cert: SSL certificate that is used for authentication to the pod.
   :param cluster_context: Context that points to kubernetes cluster.
   :param poll_interval: Polling period in seconds to check for the status.
   :param trigger_start_time: time in Datetime format when the trigger was started
   :param in_cluster: run kubernetes client with in_cluster configuration.
   :param get_logs: get the stdout of the container as logs of the tasks.
   :param startup_timeout: timeout in seconds to start up the pod.
   :param base_container_name: The name of the base container in the pod. This container's logs
       will appear as part of this task's logs if get_logs is True. Defaults to None. If None,
       will consult the class variable BASE_CONTAINER_NAME (which defaults to "base") for the base
       container name to use.
   :param on_finish_action: What to do when the pod reaches its final state, or the execution is interrupted.
       If "delete_pod", the pod will be deleted regardless its state; if "delete_succeeded_pod",
       only succeeded pod will be deleted. You can set to "keep_pod" to keep the pod.
   :param should_delete_pod: What to do when the pod reaches its final
       state, or the execution is interrupted. If True (default), delete the
       pod; if False, leave the pod.
       Deprecated - use `on_finish_action` instead.

   .. py:method:: serialize()

      Serialize KubernetesCreatePodTrigger arguments and classpath.



.. py:class:: GKEOperationTrigger(operation_name, project_id, location, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, poll_interval = 10)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Trigger which checks status of the operation.

   .. py:method:: serialize()

      Serializes GKEOperationTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Gets operation status and yields corresponding event.



