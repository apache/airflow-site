:py:mod:`airflow.providers.google.cloud.hooks.compute`
======================================================

.. py:module:: airflow.providers.google.cloud.hooks.compute

.. autoapi-nested-parse::

   This module contains a Google Compute Engine Hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.compute.GceOperationStatus
   airflow.providers.google.cloud.hooks.compute.ComputeEngineHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.compute.TIME_TO_SLEEP_IN_SECONDS


.. py:data:: TIME_TO_SLEEP_IN_SECONDS
   :value: 1

   

.. py:class:: GceOperationStatus


   Class with GCE operations statuses.

   .. py:attribute:: PENDING
      :value: 'PENDING'

      

   .. py:attribute:: RUNNING
      :value: 'RUNNING'

      

   .. py:attribute:: DONE
      :value: 'DONE'

      


.. py:class:: ComputeEngineHook(api_version = 'v1', gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for Google Compute Engine APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.

   .. py:method:: get_conn()

      Retrieves connection to Google Compute Engine.

      :return: Google Compute Engine services object
      :rtype: dict


   .. py:method:: get_compute_instance_template_client()

      Returns Compute Engine Instance Template Client.


   .. py:method:: get_compute_instance_client()

      Returns Compute Engine Instance Client.


   .. py:method:: get_compute_instance_group_managers_client()

      Returns Compute Engine Instance Group Managers Client.


   .. py:method:: insert_instance_template(body, request_id = None, project_id = PROVIDE_PROJECT_ID, retry = None, timeout = None, metadata = ())

      Creates Instance Template using body specified.

      Must be called with keyword arguments rather than positional.

      :param body: Instance Template representation as an object.
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again)
          It should be in UUID format as defined in RFC 4122
      :param project_id: Google Cloud project ID where the Compute Engine Instance Template exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: delete_instance_template(resource_id, request_id = None, project_id = PROVIDE_PROJECT_ID, retry = None, timeout = None, metadata = ())

      Deletes Instance Template.

      Deleting an Instance Template is permanent and cannot be undone. It is not
      possible to delete templates that are already in use by a managed instance
      group. Must be called with keyword arguments rather than positional.

      :param resource_id: Name of the Compute Engine Instance Template resource.
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again)
          It should be in UUID format as defined in RFC 4122
      :param project_id: Google Cloud project ID where the Compute Engine Instance Template exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: get_instance_template(resource_id, project_id = PROVIDE_PROJECT_ID, retry = None, timeout = None, metadata = ())

      Retrieves Instance Template by project_id and resource_id.

      Must be called with keyword arguments rather than positional.

      :param resource_id: Name of the Instance Template.
      :param project_id: Google Cloud project ID where the Compute Engine Instance Template exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param retry: A retry object used to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.
      :return: Instance Template representation as object according to
          https://cloud.google.com/compute/docs/reference/rest/v1/instanceTemplates
      :rtype: object


   .. py:method:: insert_instance(body, zone, project_id = PROVIDE_PROJECT_ID, request_id = None, source_instance_template = None, retry = None, timeout = None, metadata = ())

      Creates Instance using body specified.

      Must be called with keyword arguments rather than positional.

      :param body: Instance representation as an object. Should at least include 'name', 'machine_type',
          'disks' and 'network_interfaces' fields but doesn't include 'zone' field, as it will be specified
          in 'zone' parameter.
          Full or partial URL and can be represented as examples below:
          1. "machine_type": "projects/your-project-name/zones/your-zone/machineTypes/your-machine-type"
          2. "source_image": "projects/your-project-name/zones/your-zone/diskTypes/your-disk-type"
          3. "subnetwork": "projects/your-project-name/regions/your-region/subnetworks/your-subnetwork"
      :param zone: Google Cloud zone where the Instance exists
      :param project_id: Google Cloud project ID where the Compute Engine Instance Template exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param source_instance_template: Existing Instance Template that will be used as a base while
          creating new Instance.
          When specified, only name of new Instance should be provided as input arguments in 'body'
          parameter when creating new Instance. All other parameters, will be passed to Instance as they
          are specified in the Instance Template.
          Full or partial URL and can be represented as examples below:
          1. "https://www.googleapis.com/compute/v1/projects/your-project/global/instanceTemplates/temp"
          2. "projects/your-project/global/instanceTemplates/temp"
          3. "global/instanceTemplates/temp"
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again)
          It should be in UUID format as defined in RFC 4122
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: get_instance(resource_id, zone, project_id = PROVIDE_PROJECT_ID, retry = None, timeout = None, metadata = ())

      Retrieves Instance by project_id and resource_id.

      Must be called with keyword arguments rather than positional.

      :param resource_id: Name of the Instance
      :param zone: Google Cloud zone where the Instance exists
      :param project_id: Google Cloud project ID where the Compute Engine Instance exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.
      :return: Instance representation as object according to
          https://cloud.google.com/compute/docs/reference/rest/v1/instances
      :rtype: object


   .. py:method:: delete_instance(resource_id, zone, project_id = PROVIDE_PROJECT_ID, request_id = None, retry = None, timeout = None, metadata = ())

      Permanently and irrevocably deletes an Instance.

      It is not possible to delete Instances that are already in use by a managed instance group.
      Must be called with keyword arguments rather than positional.

      :param resource_id: Name of the Compute Engine Instance Template resource.
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again)
          It should be in UUID format as defined in RFC 4122
      :param project_id: Google Cloud project ID where the Compute Engine Instance Template exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param zone: Google Cloud zone where the Instance exists
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: start_instance(zone, resource_id, project_id)

      Starts an existing instance defined by project_id, zone and resource_id.

      Must be called with keyword arguments rather than positional.

      :param zone: Google Cloud zone where the instance exists
      :param resource_id: Name of the Compute Engine instance resource
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.
      :return: None


   .. py:method:: stop_instance(zone, resource_id, project_id)

      Stops an instance defined by project_id, zone and resource_id.

      Must be called with keyword arguments rather than positional.

      :param zone: Google Cloud zone where the instance exists
      :param resource_id: Name of the Compute Engine instance resource
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.
      :return: None


   .. py:method:: set_machine_type(zone, resource_id, body, project_id)

      Sets machine type of an instance defined by project_id, zone and resource_id.

      Must be called with keyword arguments rather than positional.

      :param zone: Google Cloud zone where the instance exists.
      :param resource_id: Name of the Compute Engine instance resource
      :param body: Body required by the Compute Engine setMachineType API,
          as described in
          https://cloud.google.com/compute/docs/reference/rest/v1/instances/setMachineType
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.
      :return: None


   .. py:method:: insert_instance_group_manager(body, zone, project_id = PROVIDE_PROJECT_ID, request_id = None, retry = None, timeout = None, metadata = ())

      Creates an Instance Group Managers using the body specified.

      After the group is created, instances in the group are created using the specified Instance Template.
      Must be called with keyword arguments rather than positional.

      :param body: Instance Group Manager representation as an object.
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new Instance Group Managers again)
          It should be in UUID format as defined in RFC 4122
      :param project_id: Google Cloud project ID where the Compute Engine Instance Group Managers exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param zone: Google Cloud zone where the Instance exists
      :param retry: A retry object used to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: get_instance_group_manager(resource_id, zone, project_id = PROVIDE_PROJECT_ID, retry = None, timeout = None, metadata = ())

      Retrieves Instance Group Manager by project_id, zone and resource_id.

      Must be called with keyword arguments rather than positional.

      :param resource_id: The name of the Managed Instance Group
      :param zone: Google Cloud zone where the Instance Group Managers exists
      :param project_id: Google Cloud project ID where the Compute Engine Instance Group Managers exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.
      :return: Instance Group Managers representation as object according to
          https://cloud.google.com/compute/docs/reference/rest/v1/instanceGroupManagers
      :rtype: object


   .. py:method:: delete_instance_group_manager(resource_id, zone, project_id = PROVIDE_PROJECT_ID, request_id = None, retry = None, timeout = None, metadata = ())

      Permanently and irrevocably deletes Instance Group Managers.

      Must be called with keyword arguments rather than positional.

      :param resource_id: Name of the Compute Engine Instance Group Managers resource.
      :param request_id: Unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again)
          It should be in UUID format as defined in RFC 4122
      :param project_id: Google Cloud project ID where the Compute Engine Instance Group Managers exists.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
      :param zone: Google Cloud zone where the Instance Group Managers exists
      :param retry: A retry object used  to retry requests. If `None` is specified, requests
          will not be retried.
      :param timeout: The amount of time, in seconds, to wait for the request to complete.
          Note that if `retry` is specified, the timeout applies to each individual attempt.
      :param metadata: Additional metadata that is provided to the method.


   .. py:method:: patch_instance_group_manager(zone, resource_id, body, project_id, request_id = None)

      Patches Instance Group Manager with the specified body.

      Must be called with keyword arguments rather than positional.

      :param zone: Google Cloud zone where the Instance Group Manager exists
      :param resource_id: Name of the Instance Group Manager
      :param body: Instance Group Manager representation as json-merge-patch object
          according to
          https://cloud.google.com/compute/docs/reference/rest/beta/instanceTemplates/patch
      :param request_id: Optional, unique request_id that you might add to achieve
          full idempotence (for example when client call times out repeating the request
          with the same request id will not create a new instance template again).
          It should be in UUID format as defined in RFC 4122
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.
      :return: None


   .. py:method:: get_instance_info(zone, resource_id, project_id)

      Gets instance information.

      :param zone: Google Cloud zone where the Instance Group Manager exists
      :param resource_id: Name of the Instance Group Manager
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.


   .. py:method:: get_instance_address(zone, resource_id, project_id = PROVIDE_PROJECT_ID, use_internal_ip = False)

      Return network address associated to instance.

      :param zone: Google Cloud zone where the Instance Group Manager exists
      :param resource_id: Name of the Instance Group Manager
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.
      :param use_internal_ip: If true, return private IP address.


   .. py:method:: set_instance_metadata(zone, resource_id, metadata, project_id)

      Set instance metadata.

      :param zone: Google Cloud zone where the Instance Group Manager exists
      :param resource_id: Name of the Instance Group Manager
      :param metadata: The new instance metadata.
      :param project_id: Optional, Google Cloud project ID where the
          Compute Engine Instance exists. If set to None or missing,
          the default project_id from the Google Cloud connection is used.



