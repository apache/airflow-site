:py:mod:`airflow.providers.google.cloud.hooks.functions`
========================================================

.. py:module:: airflow.providers.google.cloud.hooks.functions

.. autoapi-nested-parse::

   This module contains a Google Cloud Functions Hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.functions.CloudFunctionsHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.functions.TIME_TO_SLEEP_IN_SECONDS


.. py:data:: TIME_TO_SLEEP_IN_SECONDS
   :value: 1

   

.. py:class:: CloudFunctionsHook(api_version, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Google Cloud Functions APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.

   .. py:method:: get_conn()

      Retrieve the connection to Cloud Functions.

      :return: Google Cloud Function services object.


   .. py:method:: get_function(name)

      Get the Cloud Function with given name.

      :param name: Name of the function.
      :return: A Cloud Functions object representing the function.


   .. py:method:: create_new_function(location, body, project_id)

      Create a new function at the location specified in the body.

      :param location: The location of the function.
      :param body: The body required by the Cloud Functions insert API.
      :param project_id: Google Cloud Project ID where the function belongs.
          If set to None or missing, the default project ID from the Google
          Cloud connection is used.


   .. py:method:: update_function(name, body, update_mask)

      Update Cloud Functions according to the specified update mask.

      :param name: The name of the function.
      :param body: The body required by the cloud function patch API.
      :param update_mask: The update mask - array of fields that should be patched.


   .. py:method:: upload_function_zip(location, zip_path, project_id)

      Upload ZIP file with sources.

      :param location: The location where the function is created.
      :param zip_path: The path of the valid .zip file to upload.
      :param project_id: Google Cloud Project ID where the function belongs.
          If set to None or missing, the default project ID from the Google
          Cloud connection is used.
      :return: The upload URL that was returned by generateUploadUrl method.


   .. py:method:: delete_function(name)

      Delete the specified Cloud Function.

      :param name: The name of the function.


   .. py:method:: call_function(function_id, input_data, location, project_id = PROVIDE_PROJECT_ID)

      Invoke a deployed Cloud Function.

      This is done synchronously and should only be used for testing purposes,
      as very limited traffic is allowed.

      :param function_id: ID of the function to be called
      :param input_data: Input to be passed to the function
      :param location: The location where the function is located.
      :param project_id: Google Cloud Project ID where the function belongs.
          If set to None or missing, the default project ID from the Google
          Cloud connection is used.



