:py:mod:`airflow.providers.google.cloud.hooks.vertex_ai.generative_model`
=========================================================================

.. py:module:: airflow.providers.google.cloud.hooks.vertex_ai.generative_model

.. autoapi-nested-parse::

   This module contains a Google Cloud Vertex AI Generative Model hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.vertex_ai.generative_model.GenerativeModelHook




.. py:class:: GenerativeModelHook(gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for Google Cloud Vertex AI Generative Model APIs.

   .. py:method:: get_text_generation_model(pretrained_model)

      Return a Model Garden Model object based on Text Generation.


   .. py:method:: get_text_embedding_model(pretrained_model)

      Return a Model Garden Model object based on Text Embedding.


   .. py:method:: get_generative_model(pretrained_model)

      Return a Generative Model object.


   .. py:method:: get_generative_model_part(content_gcs_path, content_mime_type = None)

      Return a Generative Model Part object.


   .. py:method:: prompt_language_model(prompt, pretrained_model, temperature, max_output_tokens, top_p, top_k, location, project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI PaLM API to generate natural language text.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Vertex AI PaLM API, in order to elicit a specific response.
      :param pretrained_model: A pre-trained model optimized for performing natural
          language tasks such as classification, summarization, extraction, content
          creation, and ideation.
      :param temperature: Temperature controls the degree of randomness in token
          selection.
      :param max_output_tokens: Token limit determines the maximum amount of text
          output.
      :param top_p: Tokens are selected from most probable to least until the sum
          of their probabilities equals the top_p value. Defaults to 0.8.
      :param top_k: A top_k of 1 means the selected token is the most probable
          among all tokens.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: generate_text_embeddings(prompt, pretrained_model, location, project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI PaLM API to generate text embeddings.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Vertex AI PaLM API, in order to elicit a specific response.
      :param pretrained_model: A pre-trained model optimized for generating text embeddings.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: prompt_multimodal_model(prompt, location, generation_config = None, safety_settings = None, pretrained_model = 'gemini-pro', project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI Gemini Pro foundation model to generate natural language text.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Multi-modal model, in order to elicit a specific response.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param generation_config: Optional. Generation configuration settings.
      :param safety_settings: Optional. Per request settings for blocking unsafe content.
      :param pretrained_model: By default uses the pre-trained model `gemini-pro`,
          supporting prompts with text-only input, including natural language
          tasks, multi-turn text and code chat, and code generation. It can
          output text and code.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: prompt_multimodal_model_with_media(prompt, location, media_gcs_path, mime_type, generation_config = None, safety_settings = None, pretrained_model = 'gemini-pro-vision', project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI Gemini Pro foundation model to generate natural language text.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Multi-modal model, in order to elicit a specific response.
      :param generation_config: Optional. Generation configuration settings.
      :param safety_settings: Optional. Per request settings for blocking unsafe content.
      :param pretrained_model: By default uses the pre-trained model `gemini-pro-vision`,
          supporting prompts with text-only input, including natural language
          tasks, multi-turn text and code chat, and code generation. It can
          output text and code.
      :param media_gcs_path: A GCS path to a content file such as an image or a video.
          Can be passed to the multi-modal model as part of the prompt. Used with vision models.
      :param mime_type: Validates the media type presented by the file in the media_gcs_path.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: text_generation_model_predict(prompt, pretrained_model, temperature, max_output_tokens, top_p, top_k, location, project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI PaLM API to generate natural language text.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Vertex AI PaLM API, in order to elicit a specific response.
      :param pretrained_model: A pre-trained model optimized for performing natural
          language tasks such as classification, summarization, extraction, content
          creation, and ideation.
      :param temperature: Temperature controls the degree of randomness in token
          selection.
      :param max_output_tokens: Token limit determines the maximum amount of text
          output.
      :param top_p: Tokens are selected from most probable to least until the sum
          of their probabilities equals the top_p value. Defaults to 0.8.
      :param top_k: A top_k of 1 means the selected token is the most probable
          among all tokens.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: text_embedding_model_get_embeddings(prompt, pretrained_model, location, project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI PaLM API to generate text embeddings.

      :param prompt: Required. Inputs or queries that a user or a program gives
          to the Vertex AI PaLM API, in order to elicit a specific response.
      :param pretrained_model: A pre-trained model optimized for generating text embeddings.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.


   .. py:method:: generative_model_generate_content(contents, location, tools = None, generation_config = None, safety_settings = None, pretrained_model = 'gemini-pro', project_id = PROVIDE_PROJECT_ID)

      Use the Vertex AI Gemini Pro foundation model to generate natural language text.

      :param contents: Required. The multi-part content of a message that a user or a program
          gives to the generative model, in order to elicit a specific response.
      :param location: Required. The ID of the Google Cloud location that the service belongs to.
      :param generation_config: Optional. Generation configuration settings.
      :param safety_settings: Optional. Per request settings for blocking unsafe content.
      :param pretrained_model: By default uses the pre-trained model `gemini-pro`,
          supporting prompts with text-only input, including natural language
          tasks, multi-turn text and code chat, and code generation. It can
          output text and code.
      :param project_id: Required. The ID of the Google Cloud project that the service belongs to.



