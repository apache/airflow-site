:py:mod:`airflow.providers.google.cloud.operators.vertex_ai.model_service`
==========================================================================

.. py:module:: airflow.providers.google.cloud.operators.vertex_ai.model_service

.. autoapi-nested-parse::

   This module contains Google Vertex AI operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.vertex_ai.model_service.DeleteModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.GetModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.ExportModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.ListModelsOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.UploadModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.ListModelVersionsOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.SetDefaultVersionOnModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.AddVersionAliasesOnModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.DeleteVersionAliasesOnModelOperator
   airflow.providers.google.cloud.operators.vertex_ai.model_service.DeleteModelVersionOperator




.. py:class:: DeleteModelOperator(*, region, project_id, model_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a Model.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the Model resource to be deleted.
       Could be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` if model
       has several versions.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('region', 'model_id', 'project_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: GetModelOperator(*, region, project_id, model_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Retrieves a Model.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the Model resource to be retrieved.
       Could be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` if model has
       several versions.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('region', 'model_id', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ExportModelOperator(*, project_id, region, model_id, output_config, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Exports a trained, exportable Model to a location specified by the user.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the Model to export.
       Could be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` if model has
       several versions.
   :param output_config:  Required. The desired output location and configuration.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('region', 'model_id', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ListModelsOperator(*, region, project_id, filter = None, page_size = None, page_token = None, read_mask = None, order_by = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists Models in a Location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param retry: Designation of what errors, if any, should be retried.
   :param filter: An expression for filtering the results of the request. For field names both
       snake_case and camelCase are supported.
       -  ``model`` supports = and !=. ``model`` represents the Model ID,  Could be in format the
       last segment of the Model's [resource name][google.cloud.aiplatform.v1.Model.name].
       -  ``display_name`` supports = and !=
       -  ``labels`` supports general map functions that is:
       --  ``labels.key=value`` - key:value equality
       --  \`labels.key:\* or labels:key - key existence
       --  A key including a space must be quoted. ``labels."a key"``.
   :param page_size: The standard list page size.
   :param page_token: The standard list page token. Typically obtained via
       [ListModelsResponse.next_page_token][google.cloud.aiplatform.v1.ListModelsResponse.next_page_token]
       of the previous
       [ModelService.ListModels][google.cloud.aiplatform.v1.ModelService.ListModels]
       call.
   :param read_mask: Mask specifying which fields to read.
   :param order_by: A comma-separated list of fields to order by, sorted in ascending order. Use "desc"
       after a field name for descending.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('region', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: UploadModelOperator(*, project_id, region, model, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Uploads a Model artifact into Vertex AI.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model: Required. The Model to create.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('region', 'project_id', 'model', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: ListModelVersionsOperator(*, region, project_id, model_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists Model versions in a Location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the model to list versions for.
       Could be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` if model has
       several versions.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('model_id', 'region', 'project_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: SetDefaultVersionOnModelOperator(*, region, project_id, model_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Sets the desired Model version as Default.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the model to set as default.
       Should be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}` if model
       has several versions.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('model_id', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: AddVersionAliasesOnModelOperator(*, region, project_id, model_id, version_aliases, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Adds version aliases for the Model.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the model to add version aliases for.
       Should be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}`.
   :param version_aliases: List of version aliases to be added to model version.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('model_id', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DeleteVersionAliasesOnModelOperator(*, region, project_id, model_id, version_aliases, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes version aliases for the Model.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the model to delete version aliases from.
       Should be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}`.
   :param version_aliases: List of version aliases to be deleted from model version.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('model_id', 'project_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DeleteModelVersionOperator(*, region, project_id, model_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete Model version in a Location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param model_id: Required. The ID of the Model in which to delete version.
       Should be in format `projects/{project}/locations/{location}/models/{model_id}@{version_id}` or
       `projects/{project}/locations/{location}/models/{model_id}@{version_alias}`
       several versions.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :value: ('model_id', 'project_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



