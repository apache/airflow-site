:py:mod:`airflow.providers.google.cloud.transfers.bigquery_to_postgres`
=======================================================================

.. py:module:: airflow.providers.google.cloud.transfers.bigquery_to_postgres

.. autoapi-nested-parse::

   This module contains Google BigQuery to PostgreSQL operator.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.transfers.bigquery_to_postgres.BigQueryToPostgresOperator




.. py:class:: BigQueryToPostgresOperator(*, target_table_name, postgres_conn_id = 'postgres_default', replace = False, selected_fields = None, replace_index = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryToSqlBaseOperator`

   Fetch data from a BigQuery table (alternatively fetch selected columns) and insert into PostgreSQL table.

   Due to constraints of the PostgreSQL's ON CONFLICT clause both `selected_fields` and `replace_index`
   parameters need to be specified when using the operator with parameter `replace=True`.
   In effect this means that in order to run this operator with `replace=True` your target table MUST
   already have a unique index column / columns, otherwise the INSERT command will fail with an error.
   See more at https://www.postgresql.org/docs/current/sql-insert.html.

   Please note that currently most of the clauses that can be used with PostgreSQL's INSERT
   command, such as ON CONSTRAINT, WHERE, DEFAULT, etc.,  are not supported by this operator.
   If you need the clauses for your queries, `SQLExecuteQueryOperator` will be a more suitable option.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:BigQueryToPostgresOperator`

   :param target_table_name: target Postgres table (templated)
   :param postgres_conn_id: Reference to :ref:`postgres connection id <howto/connection:postgres>`.
   :param replace: Whether to replace instead of insert
   :param selected_fields: List of fields to return (comma-separated). If
       unspecified, all fields are returned. Must be specified if `replace` is True
   :param replace_index: the column or list of column names to act as
       index for the ON CONFLICT clause. Must be specified if `replace` is True

   .. py:method:: get_sql_hook()

      Return a concrete SQL Hook (a PostgresHook for instance).


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



