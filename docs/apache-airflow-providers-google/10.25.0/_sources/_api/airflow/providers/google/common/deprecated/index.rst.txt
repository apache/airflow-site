:py:mod:`airflow.providers.google.common.deprecated`
====================================================

.. py:module:: airflow.providers.google.common.deprecated


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.common.deprecated.AirflowDeprecationAdapter



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.common.deprecated.deprecated



.. py:class:: AirflowDeprecationAdapter(planned_removal_date = None, planned_removal_release = None, use_instead = None, reason = None, instructions = None, category = DeprecationWarning, **kwargs)


   Bases: :py:obj:`deprecated.classic.ClassicAdapter`

   Build a detailed deprecation message based on the wrapped object type and other provided details.

   :param planned_removal_date: The date after which the deprecated object should be removed.
       The recommended date is six months ahead from today. The expected date format is `Month DD, YYYY`,
       for example: `August 22, 2024`.
       This parameter is required if the `planned_removal_release` parameter is not set.
   :param planned_removal_release: The package name and the version in which the deprecated object is
       expected to be removed. The expected format is `<package_name>==<package_version>`, for example
       `apache-airflow==2.10.0` or `apache-airflow-providers-google==10.22.0`.
       This parameter is required if the `planned_removal_date` parameter is not set.
   :param use_instead: Optional. Replacement of the deprecated object.
   :param reason: Optional. The detailed reason for the deprecated object.
   :param instructions: Optional. The detailed instructions for migrating from the deprecated object.
   :param category: Optional. The warning category to be used for the deprecation warning.

   .. py:method:: get_deprecated_msg(wrapped, instance)

      Generate a deprecation message for wrapped callable.

      :param wrapped: Deprecated entity.
      :param instance: The instance to which the callable belongs. (not used)
      :return: A formatted deprecation message with all the details.


   .. py:method:: entity_type(entity)
      :staticmethod:


   .. py:method:: entity_path(entity)
      :staticmethod:


   .. py:method:: sunset_message()


   .. py:method:: replacement_message()



.. py:function:: deprecated(*args, planned_removal_date = None, planned_removal_release = None, use_instead = None, reason = None, instructions = None, adapter_cls = AirflowDeprecationAdapter, **kwargs)

   Mark a class, method or a function deprecated.

   :param planned_removal_date: The date after which the deprecated object should be removed.
       The recommended date is six months ahead from today. The expected date format is `Month DD, YYYY`,
       for example: `August 22, 2024`.
       This parameter is required if the `planned_removal_release` parameter is not set.
   :param planned_removal_release: The package name and the version in which the deprecated object is
       expected to be removed. The expected format is `<package_name>==<package_version>`, for example
       `apache-airflow==2.10.0` or `apache-airflow-providers-google==10.22.0`.
       This parameter is required if the `planned_removal_date` parameter is not set.
   :param use_instead: Optional. Replacement of the deprecated object.
   :param reason: Optional. The detailed reason for the deprecated object.
   :param instructions: Optional. The detailed instructions for migrating from the deprecated object.
   :param adapter_cls: Optional. Adapter class that is used to get the deprecation message
       This should be a subclass of `AirflowDeprecationAdapter`.


