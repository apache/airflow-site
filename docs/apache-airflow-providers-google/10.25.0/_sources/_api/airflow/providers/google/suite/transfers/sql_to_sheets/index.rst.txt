:py:mod:`airflow.providers.google.suite.transfers.sql_to_sheets`
================================================================

.. py:module:: airflow.providers.google.suite.transfers.sql_to_sheets


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.suite.transfers.sql_to_sheets.SQLToGoogleSheetsOperator




.. py:class:: SQLToGoogleSheetsOperator(*, sql, spreadsheet_id, sql_conn_id, parameters = None, database = None, spreadsheet_range = 'Sheet1', gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.common.sql.operators.sql.BaseSQLOperator`

   Copy data from SQL results to provided Google Spreadsheet.

   :param sql: The SQL to execute.
   :param spreadsheet_id: The Google Sheet ID to interact with.
   :param conn_id: the connection ID used to connect to the database.
   :param parameters: The parameters to render the SQL query with.
   :param database: name of database which overwrite the defined one in connection
   :param spreadsheet_range: The A1 notation of the values to retrieve.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('sql', 'spreadsheet_id', 'spreadsheet_range', 'impersonation_chain')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.sql',)

      

   .. py:attribute:: ui_color
      :value: '#a0e08c'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



