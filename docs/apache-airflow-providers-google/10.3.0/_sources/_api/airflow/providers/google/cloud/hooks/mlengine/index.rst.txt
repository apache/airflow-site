:py:mod:`airflow.providers.google.cloud.hooks.mlengine`
=======================================================

.. py:module:: airflow.providers.google.cloud.hooks.mlengine

.. autoapi-nested-parse::

   This module contains a Google ML Engine Hook.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.mlengine.MLEngineHook
   airflow.providers.google.cloud.hooks.mlengine.MLEngineAsyncHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.hooks.mlengine.log


.. py:data:: log

   

.. py:class:: MLEngineHook(**kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseHook`

   Hook for Google ML Engine APIs.

   All the methods in the hook where project_id is used must be called with
   keyword arguments rather than positional.

   .. py:method:: get_conn()

      Retrieves the connection to MLEngine.

      :return: Google MLEngine services object.


   .. py:method:: create_job(job, project_id, use_existing_job_fn = None)

      Launches a MLEngine job and wait for it to reach a terminal state.

      :param project_id: The Google Cloud project id within which MLEngine
          job will be launched. If set to None or missing, the default project_id from the Google Cloud
          connection is used.
      :param job: MLEngine Job object that should be provided to the MLEngine
          API, such as: ::

              {
                'jobId': 'my_job_id',
                'trainingInput': {
                  'scaleTier': 'STANDARD_1',
                  ...
                }
              }

      :param use_existing_job_fn: In case that a MLEngine job with the same
          job_id already exist, this method (if provided) will decide whether
          we should use this existing job, continue waiting for it to finish
          and returning the job object. It should accepts a MLEngine job
          object, and returns a boolean value indicating whether it is OK to
          reuse the existing job. If 'use_existing_job_fn' is not provided,
          we by default reuse the existing MLEngine job.
      :return: The MLEngine job object if the job successfully reach a
          terminal state (which might be FAILED or CANCELLED state).


   .. py:method:: create_job_without_waiting_result(body, project_id)

      Launches a MLEngine job and wait for it to reach a terminal state.

      :param project_id: The Google Cloud project id within which MLEngine
          job will be launched. If set to None or missing, the default project_id from the Google Cloud
          connection is used.
      :param body: MLEngine Job object that should be provided to the MLEngine
          API, such as: ::

              {
                'jobId': 'my_job_id',
                'trainingInput': {
                  'scaleTier': 'STANDARD_1',
                  ...
                }
              }
      :return: The MLEngine job_id of the object if the job successfully reach a
          terminal state (which might be FAILED or CANCELLED state).


   .. py:method:: cancel_job(job_id, project_id)

      Cancels a MLEngine job.

      :param project_id: The Google Cloud project id within which MLEngine
          job will be cancelled. If set to None or missing, the default project_id from the Google Cloud
          connection is used.
      :param job_id: A unique id for the want-to-be cancelled Google MLEngine training job.

      :return: Empty dict if cancelled successfully
      :raises: googleapiclient.errors.HttpError


   .. py:method:: get_job(project_id, job_id)

      Gets a MLEngine job based on the job id.

      :param project_id: The project in which the Job is located. If set to None or missing, the default
          project_id from the Google Cloud connection is used. (templated)
      :param job_id: A unique id for the Google MLEngine job. (templated)
      :return: MLEngine job object if succeed.
      :raises: googleapiclient.errors.HttpError


   .. py:method:: create_version(model_name, version_spec, project_id)

      Creates the Version on Google Cloud ML Engine.

      :param version_spec: A dictionary containing the information about the version. (templated)
      :param model_name: The name of the Google Cloud ML Engine model that the version belongs to.
          (templated)
      :param project_id: The Google Cloud project name to which MLEngine model belongs.
          If set to None or missing, the default project_id from the Google Cloud connection is used.
          (templated)
      :return: If the version was created successfully, returns the operation.
          Otherwise raises an error .


   .. py:method:: set_default_version(model_name, version_name, project_id)

      Sets a version to be the default. Blocks until finished.

      :param model_name: The name of the Google Cloud ML Engine model that the version belongs to.
          (templated)
      :param version_name: A name to use for the version being operated upon. (templated)
      :param project_id: The Google Cloud project name to which MLEngine model belongs. If set to None
          or missing, the default project_id from the Google Cloud connection is used. (templated)
      :return: If successful, return an instance of Version.
          Otherwise raises an error.
      :raises: googleapiclient.errors.HttpError


   .. py:method:: list_versions(model_name, project_id)

      Lists all available versions of a model. Blocks until finished.

      :param model_name: The name of the Google Cloud ML Engine model that the version
          belongs to. (templated)
      :param project_id: The Google Cloud project name to which MLEngine model belongs. If set to None or
          missing, the default project_id from the Google Cloud connection is used. (templated)
      :return: return an list of instance of Version.
      :raises: googleapiclient.errors.HttpError


   .. py:method:: delete_version(model_name, version_name, project_id)

      Deletes the given version of a model. Blocks until finished.

      :param model_name: The name of the Google Cloud ML Engine model that the version
          belongs to. (templated)
      :param project_id: The Google Cloud project name to which MLEngine
          model belongs.
      :param version_name: A name to use for the version being operated upon. (templated)
      :return: If the version was deleted successfully, returns the operation.
          Otherwise raises an error.


   .. py:method:: create_model(model, project_id)

      Create a Model. Blocks until finished.

      :param model: A dictionary containing the information about the model.
      :param project_id: The Google Cloud project name to which MLEngine model belongs. If set to None or
          missing, the default project_id from the Google Cloud connection is used. (templated)
      :return: If the version was created successfully, returns the instance of Model.
          Otherwise raises an error.
      :raises: googleapiclient.errors.HttpError


   .. py:method:: get_model(model_name, project_id)

      Gets a Model. Blocks until finished.

      :param model_name: The name of the model.
      :param project_id: The Google Cloud project name to which MLEngine model belongs. If set to None
          or missing, the default project_id from the Google Cloud connection is used. (templated)
      :return: If the model exists, returns the instance of Model.
          Otherwise return None.
      :raises: googleapiclient.errors.HttpError


   .. py:method:: delete_model(model_name, project_id, delete_contents = False)

      Delete a Model. Blocks until finished.

      :param model_name: The name of the model.
      :param delete_contents: Whether to force the deletion even if the models is not empty.
          Will delete all version (if any) in the dataset if set to True.
          The default value is False.
      :param project_id: The Google Cloud project name to which MLEngine model belongs. If set to None
          or missing, the default project_id from the Google Cloud connection is used. (templated)
      :raises: googleapiclient.errors.HttpError



.. py:class:: MLEngineAsyncHook(**kwargs)


   Bases: :py:obj:`airflow.providers.google.common.hooks.base_google.GoogleBaseAsyncHook`

   Class to get asynchronous hook for MLEngine.

   .. py:attribute:: sync_hook_class

      

   .. py:attribute:: scopes
      :value: ['https://www.googleapis.com/auth/cloud-platform']

      

   .. py:method:: get_job(job_id, session, project_id = None)
      :async:

      Get the specified job resource by job ID and project ID.


   .. py:method:: get_job_status(job_id, project_id = None)
      :async:

      Polls for job status asynchronously using gcloud-aio.

      Note that an OSError is raised when Job results are still pending.
      Exception means that Job finished with errors



