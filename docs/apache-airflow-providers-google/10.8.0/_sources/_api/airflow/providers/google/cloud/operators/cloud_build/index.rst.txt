:py:mod:`airflow.providers.google.cloud.operators.cloud_build`
==============================================================

.. py:module:: airflow.providers.google.cloud.operators.cloud_build

.. autoapi-nested-parse::

   Operators that integrates with Google Cloud Build service.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.cloud_build.CloudBuildCancelBuildOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildCreateBuildOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildCreateBuildTriggerOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildDeleteBuildTriggerOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildGetBuildOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildGetBuildTriggerOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildListBuildTriggersOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildListBuildsOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildRetryBuildOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildRunBuildTriggerOperator
   airflow.providers.google.cloud.operators.cloud_build.CloudBuildUpdateBuildTriggerOperator
   airflow.providers.google.cloud.operators.cloud_build.BuildProcessor




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.cloud_build.REGEX_REPO_PATH


.. py:data:: REGEX_REPO_PATH

   

.. py:class:: CloudBuildCancelBuildOperator(*, id_, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Cancels a build in progress.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCancelBuildOperator`

   :param id_: The ID of the build.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'id_', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildCreateBuildOperator(*, build, project_id = None, wait = True, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, poll_interval = 4.0, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Starts a build with the specified configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCreateBuildOperator`

   :param build: The build resource to create. If a dict is provided, it must be of
       the same form as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.Build`.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param wait: Optional, wait for operation to finish.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param deferrable: Run operator in the deferrable mode
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'build', 'gcp_conn_id', 'impersonation_chain', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: prepare_template()

      Execute after the templated fields get replaced by their content.

      If you need your object to alter the content of the file before the
      template is rendered, it should override this method to do so.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event)



.. py:class:: CloudBuildCreateBuildTriggerOperator(*, trigger, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a new BuildTrigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCreateBuildTriggerOperator`

   :param trigger: The BuildTrigger to create. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'trigger', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildDeleteBuildTriggerOperator(*, trigger_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Deletes a BuildTrigger by its project ID and trigger ID.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildDeleteBuildTriggerOperator`

   :param trigger_id: The ID of the BuildTrigger to delete.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'trigger_id', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildGetBuildOperator(*, id_, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Returns information about a previously requested build.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildGetBuildOperator`

   :param id_: The ID of the build.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'id_', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildGetBuildTriggerOperator(*, trigger_id, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Returns information about a BuildTrigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildGetBuildTriggerOperator`

   :param trigger_id: The ID of the BuildTrigger to get.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'trigger_id', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildListBuildTriggersOperator(*, location = 'global', project_id = None, page_size = None, page_token = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists existing BuildTriggers.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildListBuildTriggersOperator`

   :param location: The location of the project.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param page_size: Optional, number of results to return in the list.
   :param page_token: Optional, token to provide to skip to a particular spot in the list.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('location', 'project_id', 'gcp_conn_id')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildListBuildsOperator(*, location = 'global', project_id = None, page_size = None, filter_ = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Lists previously requested builds.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildListBuildsOperator`

   :param location: The location of the project.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param page_size: Optional, number of results to return in the list.
   :param filter_: Optional, the raw filter text to constrain the results.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('location', 'project_id', 'gcp_conn_id')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildRetryBuildOperator(*, id_, project_id = None, wait = True, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a new build using the original build request, which may or may not result in an identical build.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildRetryBuildOperator`

   :param id_: Build ID of the original build.
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param wait: Optional, wait for operation to finish.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'id_', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildRunBuildTriggerOperator(*, trigger_id, source, project_id = None, wait = True, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Runs a BuildTrigger at a particular source revision.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildRunBuildTriggerOperator`

   :param trigger_id: The ID of the trigger.
   :param source: Source to build against this trigger. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.RepoSource`
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param wait: Optional, wait for operation to finish.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'trigger_id', 'source', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudBuildUpdateBuildTriggerOperator(*, trigger_id, trigger, project_id = None, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, location = 'global', **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Updates a BuildTrigger by its project ID and trigger ID.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildUpdateBuildTriggerOperator`

   :param trigger_id: The ID of the trigger.
   :param trigger: The BuildTrigger to create. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :param metadata: Optional, additional metadata that is provided to the method.
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param location: The location of the project.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('project_id', 'trigger_id', 'trigger', 'gcp_conn_id', 'location')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: BuildProcessor(build)


   Processes build configurations to add additional functionality to support the use of operators.

   The following improvements are made:
   * It is required to provide the source and only one type can be given,
   * It is possible to provide the source as the URL address instead dict.

   :param build: The request body of the build.
       See: https://cloud.google.com/cloud-build/docs/api/reference/rest/Shared.Types/Build

   .. py:method:: process_body()

      Processes the body passed in the constructor.

      :return: the body.



