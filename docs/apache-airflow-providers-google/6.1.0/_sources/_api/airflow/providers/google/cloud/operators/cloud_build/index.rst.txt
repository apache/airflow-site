:mod:`airflow.providers.google.cloud.operators.cloud_build`
===========================================================

.. py:module:: airflow.providers.google.cloud.operators.cloud_build

.. autoapi-nested-parse::

   Operators that integrates with Google Cloud Build service.



Module Contents
---------------

.. data:: REGEX_REPO_PATH
   

   

.. py:class:: CloudBuildCancelBuildOperator(*, id_: str, project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Cancels a build in progress.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCancelBuildOperator`

   :param id_: The ID of the build.
   :type id_: str
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'id_', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildCreateBuildOperator(*, build: Optional[Union[Dict, Build, str]] = None, body: Optional[Dict] = None, project_id: Optional[str] = None, wait: bool = True, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Starts a build with the specified configuration.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCreateBuildOperator`

   :param build: Optional, the build resource to create. If a dict is provided, it must be of
       the same form as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.Build`.
       Only either build or body should be passed.
   :type build: Optional[Union[dict, `google.cloud.devtools.cloudbuild_v1.types.Build`]]
   :param body: (Deprecated) The build resource to create.
       This parameter has been deprecated. You should pass the build parameter instead.
   :type body: Optional[dict]
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param wait: Optional, wait for operation to finish.
   :type wait: Optional[bool]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'build', 'body', 'gcp_conn_id', 'impersonation_chain']

      

   
   .. method:: prepare_template(self)



   
   .. method:: execute(self, context)




.. py:class:: CloudBuildCreateBuildTriggerOperator(*, trigger: Union[dict, BuildTrigger], project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Creates a new BuildTrigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildCreateBuildTriggerOperator`

   :param trigger: The BuildTrigger to create. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`
   :type trigger: Union[dict, `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`]
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'trigger', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildDeleteBuildTriggerOperator(*, trigger_id: str, project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Deletes a BuildTrigger by its project ID and trigger ID.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildDeleteBuildTriggerOperator`

   :param trigger_id: The ID of the BuildTrigger to delete.
   :type trigger_id: str
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. attribute:: template_fields
      :annotation: = ['project_id', 'trigger_id', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildGetBuildOperator(*, id_: str, project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Returns information about a previously requested build.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildGetBuildOperator`

   :param id_: The ID of the build.
   :type id_: str
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'id_', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildGetBuildTriggerOperator(*, trigger_id: str, project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Returns information about a BuildTrigger.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildGetBuildTriggerOperator`

   :param trigger_id: The ID of the BuildTrigger to get.
   :type trigger_id: str
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'trigger_id', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildListBuildTriggersOperator(*, location: str, project_id: Optional[str] = None, page_size: Optional[int] = None, page_token: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Lists existing BuildTriggers.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildListBuildTriggersOperator`

   :param location: The location of the project.
   :type location: string
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param page_size: Optional, number of results to return in the list.
   :type page_size: Optional[int]
   :param page_token: Optional, token to provide to skip to a particular spot in the list.
   :type page_token: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: List[dict]

   .. attribute:: template_fields
      :annotation: = ['location', 'project_id', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildListBuildsOperator(*, location: str, project_id: Optional[str] = None, page_size: Optional[int] = None, filter_: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Lists previously requested builds.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildListBuildsOperator`

   :param location: The location of the project.
   :type location: string
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: str
   :param page_size: Optional, number of results to return in the list.
   :type page_size: Optional[int]
   :param filter_: Optional, the raw filter text to constrain the results.
   :type filter_: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: List[dict]

   .. attribute:: template_fields
      :annotation: = ['location', 'project_id', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildRetryBuildOperator(*, id_: str, project_id: Optional[str] = None, wait: bool = True, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Creates a new build based on the specified build. This method creates a new build
   using the original build request, which may or may not result in an identical build.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildRetryBuildOperator`

   :param id_: Build ID of the original build.
   :type id_: str
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: str
   :param wait: Optional, wait for operation to finish.
   :type wait: Optional[bool]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'id_', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildRunBuildTriggerOperator(*, trigger_id: str, source: Union[dict, RepoSource], project_id: Optional[str] = None, wait: bool = True, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Runs a BuildTrigger at a particular source revision.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildRunBuildTriggerOperator`

   :param trigger_id: The ID of the trigger.
   :type trigger_id: str
   :param source: Source to build against this trigger. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.RepoSource`
   :type source: Union[dict, `google.cloud.devtools.cloudbuild_v1.types.RepoSource`]
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: str
   :param wait: Optional, wait for operation to finish.
   :type wait: Optional[bool]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'trigger_id', 'source', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: CloudBuildUpdateBuildTriggerOperator(*, trigger_id: str, trigger: Union[dict, BuildTrigger], project_id: Optional[str] = None, retry: Optional[Retry] = None, timeout: Optional[float] = None, metadata: Optional[Sequence[Tuple[str, str]]] = None, gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Updates a BuildTrigger by its project ID and trigger ID.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudBuildUpdateBuildTriggerOperator`

   :param trigger_id: The ID of the trigger.
   :type trigger_id: str
   :param trigger: The BuildTrigger to create. If a dict is provided, it must be of the same form
       as the protobuf message `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`
   :type trigger: Union[dict, `google.cloud.devtools.cloudbuild_v1.types.BuildTrigger`]
   :param project_id: Optional, Google Cloud Project project_id where the function belongs.
       If set to None or missing, the default project_id from the GCP connection is used.
   :type project_id: Optional[str]
   :param retry: Optional, a retry object used  to retry requests. If `None` is specified, requests
       will not be retried.
   :type retry: Optional[Retry]
   :param timeout: Optional, the amount of time, in seconds, to wait for the request to complete.
       Note that if `retry` is specified, the timeout applies to each individual attempt.
   :type timeout: Optional[float]
   :param metadata: Optional, additional metadata that is provided to the method.
   :type metadata: Optional[Sequence[Tuple[str, str]]]
   :param gcp_conn_id: Optional, the connection ID used to connect to Google Cloud Platform.
   :type gcp_conn_id: Optional[str]
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   :rtype: dict

   .. attribute:: template_fields
      :annotation: = ['project_id', 'trigger_id', 'trigger', 'gcp_conn_id']

      

   
   .. method:: execute(self, context)




.. py:class:: BuildProcessor(build: Union[Dict, Build])

   Processes build configurations to add additional functionality to support the use of operators.
   The following improvements are made:
   * It is required to provide the source and only one type can be given,
   * It is possible to provide the source as the URL address instead dict.

   :param build: The request body of the build.
       See: https://cloud.google.com/cloud-build/docs/api/reference/rest/Shared.Types/Build
   :type build: Union[Dict, Build]

   
   .. method:: process_body(self)

      Processes the body passed in the constructor

      :return: the body.
      :rtype: `google.cloud.devtools.cloudbuild_v1.types.Build`




