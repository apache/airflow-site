:py:mod:`airflow.providers.google.cloud.operators.dataproc_metastore`
=====================================================================

.. py:module:: airflow.providers.google.cloud.operators.dataproc_metastore

.. autoapi-nested-parse::

   This module contains Google Dataproc Metastore operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreCreateBackupOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreCreateMetadataImportOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreCreateServiceOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreDeleteBackupOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreDeleteServiceOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreExportMetadataOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreGetServiceOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreListBackupsOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreRestoreServiceOperator
   airflow.providers.google.cloud.operators.dataproc_metastore.DataprocMetastoreUpdateServiceOperator




.. py:class:: DataprocMetastoreCreateBackupOperator(*, project_id: str, region: str, service_id: str, backup: Union[Dict, google.cloud.metastore_v1.types.Backup], backup_id: str, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a new backup in a given project and location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param backup:  Required. The backup to create. The ``name`` field is ignored. The ID of the created
       backup must be provided in the request's ``backup_id`` field.

       This corresponds to the ``backup`` field on the ``request`` instance; if ``request`` is provided, this
       should not be set.
   :type backup: google.cloud.metastore_v1.types.Backup
   :param backup_id:  Required. The ID of the backup, which is used as the final component of the backup's
       name. This value must be between 1 and 64 characters long, begin with a letter, end with a letter or
       number, and consist of alphanumeric ASCII characters or hyphens.

       This corresponds to the ``backup_id`` field on the ``request`` instance; if ``request`` is provided,
       this should not be set.
   :type backup_id: str
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'backup', 'impersonation_chain']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreCreateMetadataImportOperator(*, project_id: str, region: str, service_id: str, metadata_import: google.cloud.metastore_v1.types.MetadataImport, metadata_import_id: str, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a new MetadataImport in a given project and location.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param metadata_import:  Required. The metadata import to create. The ``name`` field is ignored. The ID of
       the created metadata import must be provided in the request's ``metadata_import_id`` field.

       This corresponds to the ``metadata_import`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type metadata_import: google.cloud.metastore_v1.types.MetadataImport
   :param metadata_import_id:  Required. The ID of the metadata import, which is used as the final component
       of the metadata import's name. This value must be between 1 and 64 characters long, begin with a
       letter, end with a letter or number, and consist of alphanumeric ASCII characters or hyphens.

       This corresponds to the ``metadata_import_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type metadata_import_id: str
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'metadata_import', 'impersonation_chain']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreCreateServiceOperator(*, region: str, project_id: str, service: Union[Dict, google.cloud.metastore_v1.types.Service], service_id: str, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a metastore service in a project and location.

   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param service:  Required. The Metastore service to create. The ``name`` field is ignored. The ID of
       the created metastore service must be provided in the request's ``service_id`` field.

       This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided,
       this should not be set.
   :type service: google.cloud.metastore_v1.types.Service
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: The timeout for this request.
   :type timeout: float
   :param metadata: Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'service', 'impersonation_chain']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreDeleteBackupOperator(*, project_id: str, region: str, service_id: str, backup_id: str, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Deletes a single backup.

   :param project_id: Required. The ID of the Google Cloud project that the backup belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the backup belongs to.
   :type region: str
   :param service_id: Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param backup_id:  Required. The ID of the backup, which is used as the final component of the backup's
       name. This value must be between 1 and 64 characters long, begin with a letter, end with a letter or
       number, and consist of alphanumeric ASCII characters or hyphens.

       This corresponds to the ``backup_id`` field on the ``request`` instance; if ``request`` is provided,
       this should not be set.
   :type backup_id: str
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> None

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreDeleteServiceOperator(*, region: str, project_id: str, service_id: str, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Deletes a single service.

   :param request:  The request object. Request message for
       [DataprocMetastore.DeleteService][google.cloud.metastore.v1.DataprocMetastore.DeleteService].
   :type request: google.cloud.metastore_v1.types.DeleteServiceRequest
   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param retry: Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: The timeout for this request.
   :type timeout: float
   :param metadata: Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id:
   :type gcp_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreExportMetadataOperator(*, destination_gcs_folder: str, project_id: str, region: str, service_id: str, request_id: Optional[str] = None, database_dump_type: Optional[google.cloud.metastore_v1.types.metastore.DatabaseDumpSpec] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Exports metadata from a service.

   :param destination_gcs_folder: A Cloud Storage URI of a folder, in the format
       ``gs://<bucket_name>/<path_inside_bucket>``. A sub-folder
       ``<export_folder>`` containing exported files will be
       created below it.
   :type destination_gcs_folder: str
   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.
       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreGetServiceOperator(*, region: str, project_id: str, service_id: str, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Gets the details of a single service.

   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param retry: Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: The timeout for this request.
   :type timeout: float
   :param metadata: Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> dict

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreListBackupsOperator(*, project_id: str, region: str, service_id: str, page_size: Optional[int] = None, page_token: Optional[str] = None, filter: Optional[str] = None, order_by: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Lists backups in a service.

   :param project_id: Required. The ID of the Google Cloud project that the backup belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the backup belongs to.
   :type region: str
   :param service_id: Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> List[dict]

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreRestoreServiceOperator(*, project_id: str, region: str, service_id: str, backup_project_id: str, backup_region: str, backup_service_id: str, backup_id: str, restore_type: Optional[google.cloud.metastore_v1.types.metastore.Restore] = None, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Restores a service from a backup.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param service_id: Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param backup_project_id: Required. The ID of the Google Cloud project that the metastore
       service backup to restore from.
   :type backup_project_id: str
   :param backup_region: Required. The ID of the Google Cloud region that the metastore
       service backup to restore from.
   :type backup_region: str
   :param backup_service_id:  Required. The ID of the metastore service backup to restore from, which is
       used as the final component of the metastore service's name. This value must be between 2 and 63
       characters long inclusive, begin with a letter, end with a letter or number, and consist
       of alphanumeric ASCII characters or hyphens.
   :type backup_service_id: str
   :param backup_id:  Required. The ID of the metastore service backup to restore from
   :type backup_id: str
   :param restore_type: Optional. The type of restore. If unspecified, defaults to
       ``METADATA_ONLY``
   :type restore_type: google.cloud.metastore_v1.types.Restore.RestoreType
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataprocMetastoreUpdateServiceOperator(*, project_id: str, region: str, service_id: str, service: Union[Dict, google.cloud.metastore_v1.types.Service], update_mask: google.protobuf.field_mask_pb2.FieldMask, request_id: Optional[str] = None, retry: Optional[google.api_core.retry.Retry] = None, timeout: Optional[float] = None, metadata: Sequence[Tuple[str, str]] = (), gcp_conn_id: str = 'google_cloud_default', impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Updates the parameters of a single service.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :type project_id: str
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :type region: str
   :param service_id:  Required. The ID of the metastore service, which is used as the final component of
       the metastore service's name. This value must be between 2 and 63 characters long inclusive, begin
       with a letter, end with a letter or number, and consist of alphanumeric ASCII characters or
       hyphens.

       This corresponds to the ``service_id`` field on the ``request`` instance; if ``request`` is
       provided, this should not be set.
   :type service_id: str
   :param service:  Required. The metastore service to update. The server only merges fields in the service
       if they are specified in ``update_mask``.

       The metastore service's ``name`` field is used to identify the metastore service to be updated.

       This corresponds to the ``service`` field on the ``request`` instance; if ``request`` is provided,
       this should not be set.
   :type service: Union[Dict, google.cloud.metastore_v1.types.Service]
   :param update_mask:  Required. A field mask used to specify the fields to be overwritten in the metastore
       service resource by the update. Fields specified in the ``update_mask`` are relative to the resource
       (not to the full request). A field is overwritten if it is in the mask.

       This corresponds to the ``update_mask`` field on the ``request`` instance; if ``request`` is provided,
       this should not be set.
   :type update_mask: google.protobuf.field_mask_pb2.FieldMask
   :param request_id: Optional. A unique id used to identify the request.
   :type request_id: str
   :param retry: Optional. Designation of what errors, if any, should be retried.
   :type retry: google.api_core.retry.Retry
   :param timeout: Optional. The timeout for this request.
   :type timeout: float
   :param metadata: Optional. Strings which should be sent along with the request as metadata.
   :type metadata: Sequence[Tuple[str, str]]
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :type gcp_conn_id: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['project_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



