:py:mod:`airflow.providers.google.cloud.transfers.gdrive_to_local`
==================================================================

.. py:module:: airflow.providers.google.cloud.transfers.gdrive_to_local


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.transfers.gdrive_to_local.GoogleDriveToLocalOperator




.. py:class:: GoogleDriveToLocalOperator(*, output_file: str, file_name: str, folder_id: str, drive_id: Optional[str] = None, delegate_to: Optional[str] = None, impersonation_chain: Optional[Union[str, Sequence[str]]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Writes a Google Drive file into local Storage.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:GoogleDriveToLocalOperator`

   :param output_file: Path to downloaded file
   :type output_file: str
   :param folder_id: The folder id of the folder in which the Google Drive file resides
   :type folder_id: str
   :param file_name: The name of the file residing in Google Drive
   :type file_name: str
   :param drive_id: Optional. The id of the shared Google Drive in which the file resides.
   :type drive_id: str
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :type delegate_to: str
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :type impersonation_chain: Union[str, Sequence[str]]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['output_file', 'folder_id', 'file_name', 'drive_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



