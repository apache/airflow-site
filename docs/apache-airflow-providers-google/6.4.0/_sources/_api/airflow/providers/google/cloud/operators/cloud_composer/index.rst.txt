:py:mod:`airflow.providers.google.cloud.operators.cloud_composer`
=================================================================

.. py:module:: airflow.providers.google.cloud.operators.cloud_composer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerEnvironmentLink
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerEnvironmentsLink
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerCreateEnvironmentOperator
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerDeleteEnvironmentOperator
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerGetEnvironmentOperator
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerListEnvironmentsOperator
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerUpdateEnvironmentOperator
   airflow.providers.google.cloud.operators.cloud_composer.CloudComposerListImageVersionsOperator




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.cloud_composer.CLOUD_COMPOSER_BASE_LINK
   airflow.providers.google.cloud.operators.cloud_composer.CLOUD_COMPOSER_DETAILS_LINK
   airflow.providers.google.cloud.operators.cloud_composer.CLOUD_COMPOSER_ENVIRONMENTS_LINK


.. py:data:: CLOUD_COMPOSER_BASE_LINK
   :annotation: = https://console.cloud.google.com/composer/environments

   

.. py:data:: CLOUD_COMPOSER_DETAILS_LINK
   

   

.. py:data:: CLOUD_COMPOSER_ENVIRONMENTS_LINK
   

   

.. py:class:: CloudComposerEnvironmentLink

   Bases: :py:obj:`airflow.models.BaseOperatorLink`

   Helper class for constructing Cloud Composer Environment Link

   .. py:attribute:: name
      :annotation: = Cloud Composer Environment

      

   .. py:attribute:: key
      :annotation: = composer_conf

      

   .. py:method:: persist(operator_instance, context)
      :staticmethod:


   .. py:method:: get_link(self, operator, dttm)

      Link to external system.

      :param operator: airflow operator
      :param dttm: datetime
      :return: link to external system



.. py:class:: CloudComposerEnvironmentsLink

   Bases: :py:obj:`airflow.models.BaseOperatorLink`

   Helper class for constructing Cloud Composer Environment Link

   .. py:attribute:: name
      :annotation: = Cloud Composer Environment List

      

   .. py:attribute:: key
      :annotation: = composer_conf

      

   .. py:method:: persist(operator_instance, context)
      :staticmethod:


   .. py:method:: get_link(self, operator, dttm)

      Link to external system.

      :param operator: airflow operator
      :param dttm: datetime
      :return: link to external system



.. py:class:: CloudComposerCreateEnvironmentOperator(*, project_id, region, environment_id, environment, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, retry = None, timeout = None, metadata = (), deferrable = False, pooling_period_seconds = 30, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Create a new environment.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param environment_id: Required. The ID of the Google Cloud environment that the service belongs to.
   :param environment:  The environment to create.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param deferrable: Run operator in the deferrable mode
   :param pooling_period_seconds: Optional: Control the rate of the poll for the result of deferrable run.
       By default the trigger will poll every 30 seconds.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'environment_id', 'environment', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(self, context, event)



.. py:class:: CloudComposerDeleteEnvironmentOperator(*, project_id, region, environment_id, retry = None, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, deferrable = False, pooling_period_seconds = 30, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Delete an environment.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param environment_id: Required. The ID of the Google Cloud environment that the service belongs to.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param deferrable: Run operator in the deferrable mode
   :param pooling_period_seconds: Optional: Control the rate of the poll for the result of deferrable run.
       By default the trigger will poll every 30 seconds.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'environment_id', 'impersonation_chain']

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(self, context, event)



.. py:class:: CloudComposerGetEnvironmentOperator(*, project_id, region, environment_id, retry = None, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Get an existing environment.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param environment_id: Required. The ID of the Google Cloud environment that the service belongs to.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'environment_id', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudComposerListEnvironmentsOperator(*, project_id, region, page_size = None, page_token = None, retry = None, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   List environments.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param page_size: The maximum number of environments to return.
   :param page_token: The next_page_token value returned from a previous List
       request, if any.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: CloudComposerUpdateEnvironmentOperator(*, project_id, region, environment_id, environment, update_mask, retry = None, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, deferrable = False, pooling_period_seconds = 30, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Update an environment.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param region: Required. The ID of the Google Cloud region that the service belongs to.
   :param environment_id: Required. The ID of the Google Cloud environment that the service belongs to.
   :param environment:  A patch environment. Fields specified by the ``updateMask`` will be copied from the
       patch environment into the environment under update.
   :param update_mask:  Required. A comma-separated list of paths, relative to ``Environment``, of fields to
       update. If a dict is provided, it must be of the same form as the protobuf message
       :class:`~google.protobuf.field_mask_pb2.FieldMask`
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.
   :param deferrable: Run operator in the deferrable mode
   :param pooling_period_seconds: Optional: Control the rate of the poll for the result of deferrable run.
       By default the trigger will poll every 30 seconds.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'environment_id', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(self, context, event)



.. py:class:: CloudComposerListImageVersionsOperator(*, project_id, region, page_size = None, page_token = None, include_past_releases = False, retry = None, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, delegate_to = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   List ImageVersions for provided location.

   :param request:  The request object. List ImageVersions in a project and location.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id:
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param delegate_to: The account to impersonate using domain-wide delegation of authority,
       if any. For this to work, the service account making the request must have
       domain-wide delegation enabled.

   .. py:attribute:: template_fields
      :annotation: = ['project_id', 'region', 'impersonation_chain']

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



