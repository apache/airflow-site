:py:mod:`airflow.providers.google.cloud.operators.dataform`
===========================================================

.. py:module:: airflow.providers.google.cloud.operators.dataform


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.dataform.DataformCreateCompilationResultOperator
   airflow.providers.google.cloud.operators.dataform.DataformGetCompilationResultOperator
   airflow.providers.google.cloud.operators.dataform.DataformCreateWorkflowInvocationOperator
   airflow.providers.google.cloud.operators.dataform.DataformGetWorkflowInvocationOperator
   airflow.providers.google.cloud.operators.dataform.DataformCancelWorkflowInvocationOperator




.. py:class:: DataformCreateCompilationResultOperator(project_id, region, repository_id, compilation_result, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a new CompilationResult in a given project and location.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param repository_id: Required. The ID of the Dataform repository that the task belongs to.
   :param compilation_result:  Required. The compilation result to create.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataformGetCompilationResultOperator(project_id, region, repository_id, compilation_result_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Fetches a single CompilationResult.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param repository_id: Required. The ID of the Dataform repository that the task belongs to.
   :param compilation_result_id:  The Id of the Dataform Compilation Result
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :annotation: = ['repository_id', 'compilation_result_id', 'delegate_to', 'impersonation_chain']

      

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataformCreateWorkflowInvocationOperator(project_id, region, repository_id, workflow_invocation, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, asynchronous = False, wait_time = 10, *args, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Creates a new WorkflowInvocation in a given Repository.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param repository_id: Required. The ID of the Dataform repository that the task belongs to.
   :param workflow_invocation:  Required. The workflow invocation resource to create.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).
   :param asynchronous: Flag to return workflow_invocation_id from the Dataform API.
       This is useful for submitting long running workflows and
       waiting on them asynchronously using the DataformWorkflowInvocationStateSensor
   :param wait_time: Number of seconds between checks

   .. py:attribute:: template_fields
      :annotation: = ['workflow_invocation', 'delegate_to', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataformGetWorkflowInvocationOperator(project_id, region, repository_id, workflow_invocation_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Fetches a single WorkflowInvocation.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param repository_id: Required. The ID of the Dataform repository that the task belongs to.
   :param workflow_invocation_id:  the workflow invocation resource's id.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :annotation: = ['repository_id', 'workflow_invocation_id', 'delegate_to', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: DataformCancelWorkflowInvocationOperator(project_id, region, repository_id, workflow_invocation_id, retry = DEFAULT, timeout = None, metadata = (), gcp_conn_id = 'google_cloud_default', delegate_to = None, impersonation_chain = None, *args, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Requests cancellation of a running WorkflowInvocation.

   :param project_id: Required. The ID of the Google Cloud project that the task belongs to.
   :param region: Required. The ID of the Google Cloud region that the task belongs to.
   :param repository_id: Required. The ID of the Dataform repository that the task belongs to.
   :param workflow_invocation_id:  the workflow invocation resource's id.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata: Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use when fetching connection info.
   :param delegate_to: The account to impersonate, if any. For this to work, the service accountmaking the
       request must have  domain-wide delegation enabled.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :annotation: = ['repository_id', 'workflow_invocation_id', 'delegate_to', 'impersonation_chain']

      

   .. py:attribute:: operator_extra_links
      

      

   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



