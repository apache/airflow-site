:py:mod:`airflow.providers.google.cloud.operators.translate`
============================================================

.. py:module:: airflow.providers.google.cloud.operators.translate

.. autoapi-nested-parse::

   This module contains Google Translate operators.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.google.cloud.operators.translate.CloudTranslateTextOperator
   airflow.providers.google.cloud.operators.translate.TranslateTextOperator
   airflow.providers.google.cloud.operators.translate.TranslateTextBatchOperator
   airflow.providers.google.cloud.operators.translate.TranslateCreateDatasetOperator
   airflow.providers.google.cloud.operators.translate.TranslateDatasetsListOperator
   airflow.providers.google.cloud.operators.translate.TranslateImportDataOperator
   airflow.providers.google.cloud.operators.translate.TranslateDeleteDatasetOperator
   airflow.providers.google.cloud.operators.translate.TranslateCreateModelOperator
   airflow.providers.google.cloud.operators.translate.TranslateModelsListOperator
   airflow.providers.google.cloud.operators.translate.TranslateDeleteModelOperator
   airflow.providers.google.cloud.operators.translate.TranslateDocumentOperator
   airflow.providers.google.cloud.operators.translate.TranslateDocumentBatchOperator




.. py:class:: CloudTranslateTextOperator(*, values, target_language, format_, source_language, model, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Translate a string or list of strings.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:CloudTranslateTextOperator`

   See https://cloud.google.com/translate/docs/translating-text

   Execute method returns str or list.

   This is a list of dictionaries for each queried value. Each
   dictionary typically contains three keys (though not all will be present in all cases):

   * ``detectedSourceLanguage``: The detected language (as an ISO 639-1 language code) of the text.
   * ``translatedText``: The translation of the text into the target language.
   * ``input``: The corresponding input value.
   * ``model``: The model used to translate the text.

   If only a single value is passed, then only a single
   dictionary is set as the XCom return value.

   :param values: String or list of strings to translate.
   :param target_language: The language to translate results into. This is required by the API.
   :param format_: (Optional) One of ``text`` or ``html``, to specify if the input text is plain text or HTML.
   :param source_language: (Optional) The language of the text to be translated.
   :param model: (Optional) The model used to translate the text, such as ``'base'`` or ``'nmt'``.
   :param impersonation_chain: Optional service account to impersonate using short-term credentials, or
       chained list of accounts required to get the access_token of the last account in the list, which
       will be impersonated in the request. If set as a string, the account must grant the originating
       account the Service Account Token Creator IAM role. If set as a sequence, the identities from
       the list must grant Service Account Token Creator IAM role to the directly preceding identity,
       with the first account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('values', 'target_language', 'format_', 'source_language', 'model', 'gcp_conn_id',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateTextOperator(*, contents, source_language_code = None, target_language_code, mime_type = None, location = None, project_id = PROVIDE_PROJECT_ID, model = None, transliteration_config = None, glossary_config = None, labels = None, timeout = DEFAULT, retry = DEFAULT, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Translate text content of moderate amount, for larger volumes of text please use the TranslateTextBatchOperator.

   Wraps the Google cloud Translate Text (Advanced) functionality.
   See https://cloud.google.com/translate/docs/advanced/translating-text-v3

   For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:TranslateTextOperator`.

   :param project_id: Optional. The ID of the Google Cloud project that the
       service belongs to.
   :param location: optional. The ID of the Google Cloud location that the
       service belongs to. if not specified, 'global' is used.
       Non-global location is required for requests using AutoML models or custom glossaries.
   :param contents: Required. The sequence of content strings to be translated.
       Limited to 1024 items  with 30_000 codepoints total recommended.
   :param  mime_type: Optional. The format of the source text, If left blank,
       the MIME type defaults to "text/html".
   :param source_language_code: Optional. The ISO-639 language code of the
       input text if known. If not specified, attempted to recognize automatically.
   :param target_language_code: Required. The ISO-639 language code to use
       for translation of the input text.
   :param model: Optional. The ``model`` type requested for this translation.
       If not provided, the default Google model (NMT) will be used.
       The format depends on model type:

       - AutoML Translation models:
         ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
       - General (built-in) models:
         ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``
       - Translation LLM models:
         ``projects/{project-number-or-id}/locations/{location-id}/models/general/translation-llm``

       For global (non-region) requests, use 'global' ``location-id``.
   :param glossary_config: Optional. Glossary to be applied.
   :param transliteration_config: Optional. Transliteration to be applied.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('contents', 'target_language_code', 'mime_type', 'source_language_code', 'model',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateTextBatchOperator(*, project_id = PROVIDE_PROJECT_ID, location, target_language_codes, source_language_code, input_configs, output_config, models = None, glossaries = None, labels = None, metadata = (), timeout = DEFAULT, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Translate large volumes of text content, by the inputs provided.

   Wraps the Google cloud Translate Text (Advanced) functionality.
   See https://cloud.google.com/translate/docs/advanced/batch-translation

   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateTextBatchOperator`.

   :param project_id: Optional. The ID of the Google Cloud project that the
       service belongs to. If not specified the hook project_id will be used.
   :param location: required. The ID of the Google Cloud location, (non-global) that the
       service belongs to.
   :param source_language_code: Required. Source language code.
   :param target_language_codes: Required. Up to 10 language codes allowed here.
   :param input_configs: Required. Input configurations.
       The total number of files matched should be <=100. The total content size should be <= 100M Unicode codepoints.
       The files must use UTF-8 encoding.
   :param models: Optional. The models to use for translation. Map's key is
       target language code. Map's value is model name. Value can
       be a built-in general model, or an AutoML Translation model.
       The value format depends on model type:

       - AutoML Translation models:
         ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
       - General (built-in) models:
         ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``

       If the map is empty or a specific model is not requested for
       a language pair, then the default Google model (NMT) is used.
   :param output_config: Required. Output configuration.
   :param glossaries: Optional. Glossaries to be applied for translation. It's keyed by target language code.
   :param labels: Optional. The labels with user-defined metadata.
       See https://cloud.google.com/translate/docs/advanced/labels for more information.

   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('input_configs', 'target_language_codes', 'source_language_code', 'models', 'glossaries',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateCreateDatasetOperator(*, project_id = PROVIDE_PROJECT_ID, location, dataset, metadata = (), timeout = DEFAULT, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Create a Google Cloud Translate dataset.

   Creates a `native` translation dataset, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateCreateDatasetOperator`.

   :param dataset: The dataset to create. If a dict is provided, it must correspond to
       the automl_translation.Dataset type.
   :param project_id: ID of the Google Cloud project where dataset is located.
       If not provided default project_id is used.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('dataset', 'location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateDatasetsListOperator(*, project_id = PROVIDE_PROJECT_ID, location, metadata = (), timeout = DEFAULT, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get a list of native Google Cloud Translation datasets in a project.

   Get project's list of `native` translation datasets, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateDatasetsListOperator`.

   :param project_id: ID of the Google Cloud project where dataset is located.
       If not provided default project_id is used.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateImportDataOperator(*, dataset_id, location, input_config, project_id = PROVIDE_PROJECT_ID, metadata = (), timeout = None, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Import data to the translation dataset.

   Loads data to the translation dataset, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateImportDataOperator`.

   :param dataset_id: The dataset_id of target native dataset to import data to.
   :param input_config: The desired input location of translations language pairs file. If a dict provided,
       must follow the structure of DatasetInputConfig.
       If a dict is provided, it must be of the same form as the protobuf message InputConfig.
   :param project_id: ID of the Google Cloud project where dataset is located. If not provided
       default project_id is used.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('dataset_id', 'input_config', 'location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateDeleteDatasetOperator(*, dataset_id, location, project_id = PROVIDE_PROJECT_ID, metadata = (), timeout = None, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete translation dataset and all of its contents.

   Deletes the translation dataset and it's data, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateDeleteDatasetOperator`.

   :param dataset_id: The dataset_id of target native dataset to be deleted.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('dataset_id', 'location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateCreateModelOperator(*, project_id = PROVIDE_PROJECT_ID, location, dataset_id, display_name, timeout = None, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', metadata = (), impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Creates a Google Cloud Translate model.

   Creates a `native` translation model, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateCreateModelOperator`.

   :param dataset_id: The dataset id used for model training.
   :param project_id: ID of the Google Cloud project where dataset is located.
       If not provided default project_id is used.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('dataset_id', 'location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateModelsListOperator(*, project_id = PROVIDE_PROJECT_ID, location, metadata = (), timeout = DEFAULT, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Get a list of native Google Cloud Translation models in a project.

   Get project's list of `native` translation models, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateModelsListOperator`.

   :param project_id: ID of the Google Cloud project where dataset is located.
       If not provided default project_id is used.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateDeleteModelOperator(*, model_id, location, project_id = PROVIDE_PROJECT_ID, metadata = (), timeout = None, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Delete translation model and all of its contents.

   Deletes the translation model and it's data, using API V3.
   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateDeleteModelOperator`.

   :param model_id: The model_id of target native model to be deleted.
   :param location: The location of the project.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('model_id', 'location', 'project_id', 'gcp_conn_id', 'impersonation_chain')

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateDocumentOperator(*, location = None, project_id = PROVIDE_PROJECT_ID, source_language_code = None, target_language_code, document_input_config, document_output_config, customized_attribution = None, is_translate_native_pdf_only = False, enable_shadow_removal_native_pdf = False, enable_rotation_correction = False, model = None, glossary_config = None, labels = None, timeout = DEFAULT, retry = DEFAULT, metadata = (), gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Translate document provided.

   Wraps the Google cloud Translate Text (Advanced) functionality.
   Supports wide range of input/output file types, please visit the
   https://cloud.google.com/translate/docs/advanced/translate-documents for more details.

   For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:TranslateDocumentOperator`.

   :param project_id: Optional. The ID of the Google Cloud project that the
       service belongs to. If not specified the hook project_id will be used.
   :param source_language_code: Optional. The ISO-639 language code of the
       input document text if known. If the source language isn't specified,
       the API attempts to identify the source language automatically and returns
       the source language within the response.
   :param target_language_code: Required. The ISO-639 language code to use
       for translation of the input document text.
   :param location: Optional. Project or location to make a call. Must refer to a caller's project.
       If not specified, 'global' is used.
       Non-global location is required for requests using AutoML models or custom glossaries.
       Models and glossaries must be within the same region (have the same location-id).
   :param document_input_config: A document translation request input config.
   :param document_output_config: Optional. A document translation request output config.
       If not provided the translated file will only be returned through a byte-stream
       and its output mime type will be the same as the input file's mime type.
   :param customized_attribution: Optional. This flag is to support user customized
       attribution. If not provided, the default is ``Machine Translated by Google``.
       Customized attribution should follow rules in
       https://cloud.google.com/translate/attribution#attribution_and_logos
   :param is_translate_native_pdf_only: Optional. Param for external customers.
       If true, the page limit of online native PDF translation is 300 and only native PDF pages
       will be translated.
   :param enable_shadow_removal_native_pdf: Optional. If true, use the text removal server to remove the
       shadow text on background image for native PDF translation.
       Shadow removal feature can only be enabled when both ``is_translate_native_pdf_only``,
       ``pdf_native_only`` are False.
   :param enable_rotation_correction: Optional. If true, enable auto rotation
       correction in DVS.
   :param model: Optional. The ``model`` type requested for this translation.
       If not provided, the default Google model (NMT) will be used.
       The format depends on model type:

       -  AutoML Translation models:
          ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``
       -  General (built-in) models:
          ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``

       If not provided, the default Google model (NMT) will be used
       for translation.
   :param glossary_config: Optional. Glossary to be applied.
   :param transliteration_config: Optional. Transliteration to be applied.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('source_language_code', 'target_language_code', 'document_input_config',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: TranslateDocumentBatchOperator(*, project_id = PROVIDE_PROJECT_ID, source_language_code, target_language_codes = None, location = None, input_configs, output_config, customized_attribution = None, format_conversions = None, enable_shadow_removal_native_pdf = False, enable_rotation_correction = False, models = None, glossaries = None, metadata = (), timeout = DEFAULT, retry = DEFAULT, gcp_conn_id = 'google_cloud_default', impersonation_chain = None, **kwargs)


   Bases: :py:obj:`airflow.providers.google.cloud.operators.cloud_base.GoogleCloudBaseOperator`

   Translate documents provided via input and output configurations.

   Up to 10 target languages per operation supported.
   Wraps the Google cloud Translate Text (Advanced) functionality.
   See https://cloud.google.com/translate/docs/advanced/batch-translation.

   For more information on how to use this operator, take a look at the guide:
   :ref:`howto/operator:TranslateDocumentBatchOperator`.

   :param project_id: Required. The ID of the Google Cloud project that the service belongs to.
   :param source_language_code: Optional. The ISO-639 language code of the
       input text if known. If the source language isn't specified, the API attempts to identify
       the source language automatically and returns the source language within the response.
   :param target_language_codes: Required. The ISO-639 language code to use
       for translation of the input document. Specify up to 10 language codes here.
   :param location: Optional. Project or location to make a call. Must refer to
       a caller's project. If not specified, 'global' is used.
       Non-global location is required for requests using AutoML models or custom glossaries.
       Models and glossaries must be within the same region (have the same location-id).
   :param input_configs: Input configurations. The total number of files matched should be <=
       100. The total content size to translate should be <= 100M Unicode codepoints.
       The files must use UTF-8 encoding.
   :param output_config: Output configuration. If 2 input configs match to the same file (that
       is, same input path), no output for duplicate inputs will be generated.
   :param format_conversions: Optional. The file format conversion map that is applied to
       all input files. The map key is the original mime_type.
       The map value is the target mime_type of translated documents.
       Supported file format conversion includes:

       -  ``application/pdf`` to
          ``application/vnd.openxmlformats-officedocument.wordprocessingml.document``

       If nothing specified, output files will be in the same format as the original file.
   :param customized_attribution: Optional. This flag is to support user customized
       attribution. If not provided, the default is ``Machine Translated by Google``.
       Customized attribution should follow rules in
       https://cloud.google.com/translate/attribution#attribution_and_logos
   :param enable_shadow_removal_native_pdf: Optional. If true, use the text removal server to remove the
       shadow text on background image for native PDF translation.
       Shadow removal feature can only be enabled when both ``is_translate_native_pdf_only``,
       ``pdf_native_only`` are False.
   :param enable_rotation_correction: Optional. If true, enable auto rotation
       correction in DVS.
   :param models: Optional. The models to use for translation. Map's key is
       target language code. Map's value is the model name. Value
       can be a built-in general model, or an AutoML Translation model.
       The value format depends on model type:

       -  AutoML Translation models:
          ``projects/{project-number-or-id}/locations/{location-id}/models/{model-id}``

       -  General (built-in) models:
          ``projects/{project-number-or-id}/locations/{location-id}/models/general/nmt``,

       If the map is empty or a specific model is not requested for
       a language pair, then default google model (NMT) is used.
   :param glossaries: Glossaries to be applied. It's keyed by target language code.
   :param retry: Designation of what errors, if any, should be retried.
   :param timeout: The timeout for this request.
   :param metadata:  Strings which should be sent along with the request as metadata.
   :param gcp_conn_id: The connection ID to use connecting to Google Cloud.
   :param impersonation_chain: Optional service account to impersonate using short-term
       credentials, or chained list of accounts required to get the access_token
       of the last account in the list, which will be impersonated in the request.
       If set as a string, the account must grant the originating account
       the Service Account Token Creator IAM role.
       If set as a sequence, the identities from the list must grant
       Service Account Token Creator IAM role to the directly preceding identity, with first
       account from the list granting this role to the originating account (templated).

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('input_configs', 'output_config', 'target_language_codes', 'source_language_code', 'models',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



