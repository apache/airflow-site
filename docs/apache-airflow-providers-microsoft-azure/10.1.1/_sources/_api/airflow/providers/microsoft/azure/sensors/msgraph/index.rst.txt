:py:mod:`airflow.providers.microsoft.azure.sensors.msgraph`
===========================================================

.. py:module:: airflow.providers.microsoft.azure.sensors.msgraph


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.sensors.msgraph.MSGraphSensor




.. py:class:: MSGraphSensor(url, response_type = None, path_parameters = None, url_template = None, method = 'GET', query_parameters = None, headers = None, data = None, conn_id = KiotaRequestAdapterHook.default_conn_name, proxies = None, api_version = None, event_processor = lambda context, e: e.get('status') == 'Succeeded', result_processor = lambda context, result: result, serializer = ResponseSerializer, retry_delay = 60, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   A Microsoft Graph API sensor which allows you to poll an async REST call to the Microsoft Graph API.

   :param url: The url being executed on the Microsoft Graph API (templated).
   :param response_type: The expected return type of the response as a string. Possible value are: `bytes`,
       `str`, `int`, `float`, `bool` and `datetime` (default is None).
   :param method: The HTTP method being used to do the REST call (default is GET).
   :param conn_id: The HTTP Connection ID to run the operator against (templated).
   :param proxies: A dict defining the HTTP proxies to be used (default is None).
   :param api_version: The API version of the Microsoft Graph API to be used (default is v1).
       You can pass an enum named APIVersion which has 2 possible members v1 and beta,
       or you can pass a string as `v1.0` or `beta`.
   :param event_processor: Function which checks the response from MS Graph API (default is the
       `default_event_processor` method) and returns a boolean.  When the result is True, the sensor
       will stop poking, otherwise it will continue until it's True or times out.
   :param result_processor: Function to further process the response from MS Graph API
       (default is lambda: context, response: response).  When the response returned by the
       `KiotaRequestAdapterHook` are bytes, then those will be base64 encoded into a string.
   :param serializer: Class which handles response serialization (default is ResponseSerializer).
       Bytes will be base64 encoded into a string, so it can be stored as an XCom.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('url', 'response_type', 'path_parameters', 'url_template', 'query_parameters', 'headers',...

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: retry_execute(context)


   .. py:method:: execute_complete(context, event = None)

      Execute callback when MSGraphSensor finishes execution.

      This method gets executed automatically when MSGraphTrigger completes its execution.



