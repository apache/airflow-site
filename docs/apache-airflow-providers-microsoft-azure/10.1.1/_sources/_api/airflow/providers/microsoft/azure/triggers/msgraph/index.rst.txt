:py:mod:`airflow.providers.microsoft.azure.triggers.msgraph`
============================================================

.. py:module:: airflow.providers.microsoft.azure.triggers.msgraph


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.triggers.msgraph.ResponseSerializer
   airflow.providers.microsoft.azure.triggers.msgraph.MSGraphTrigger




.. py:class:: ResponseSerializer(encoding = None)


   ResponseSerializer serializes the response as a string.

   .. py:method:: serialize(response)


   .. py:method:: deserialize(response)



.. py:class:: MSGraphTrigger(url, response_type = None, path_parameters = None, url_template = None, method = 'GET', query_parameters = None, headers = None, data = None, conn_id = KiotaRequestAdapterHook.default_conn_name, timeout = None, proxies = None, api_version = None, serializer = ResponseSerializer)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   A Microsoft Graph API trigger which allows you to execute an async REST call to the Microsoft Graph API.

   :param url: The url being executed on the Microsoft Graph API (templated).
   :param response_type: The expected return type of the response as a string. Possible value are: `bytes`,
       `str`, `int`, `float`, `bool` and `datetime` (default is None).
   :param method: The HTTP method being used to do the REST call (default is GET).
   :param conn_id: The HTTP Connection ID to run the operator against (templated).
   :param timeout: The HTTP timeout being used by the `KiotaRequestAdapter` (default is None).
       When no timeout is specified or set to None then there is no HTTP timeout on each request.
   :param proxies: A dict defining the HTTP proxies to be used (default is None).
   :param api_version: The API version of the Microsoft Graph API to be used (default is v1).
       You can pass an enum named APIVersion which has 2 possible members v1 and beta,
       or you can pass a string as `v1.0` or `beta`.
   :param serializer: Class which handles response serialization (default is ResponseSerializer).
       Bytes will be base64 encoded into a string, so it can be stored as an XCom.

   .. py:property:: conn_id
      :type: str


   .. py:property:: timeout
      :type: float | None


   .. py:property:: proxies
      :type: dict | None


   .. py:property:: api_version
      :type: msgraph_core.APIVersion


   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('url', 'response_type', 'path_parameters', 'url_template', 'query_parameters', 'headers',...

      

   .. py:method:: resolve_type(value, default)
      :classmethod:


   .. py:method:: serialize()

      Serialize the HttpTrigger arguments and classpath.


   .. py:method:: get_conn()


   .. py:method:: run()
      :async:

      Make a series of asynchronous HTTP calls via a KiotaRequestAdapterHook.



