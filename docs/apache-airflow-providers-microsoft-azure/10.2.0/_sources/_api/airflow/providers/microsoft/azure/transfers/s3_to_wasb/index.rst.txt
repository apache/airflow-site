:py:mod:`airflow.providers.microsoft.azure.transfers.s3_to_wasb`
================================================================

.. py:module:: airflow.providers.microsoft.azure.transfers.s3_to_wasb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.transfers.s3_to_wasb.S3ToAzureBlobStorageOperator




.. py:exception:: TooManyFilesToMoveException(number_of_files)


   Bases: :py:obj:`Exception`

   Custom exception thrown when attempting to move multiple files from S3 to a single Azure Blob.


.. py:exception:: InvalidAzureBlobParameters


   Bases: :py:obj:`Exception`

   Custom exception raised when neither a blob_prefix or blob_name are passed to the operator.


.. py:exception:: InvalidKeyComponents


   Bases: :py:obj:`Exception`

   Custom exception raised when neither a full_path or file_name + prefix are provided to _create_key.


.. py:class:: S3ToAzureBlobStorageOperator(*, aws_conn_id = 'aws_default', wasb_conn_id = 'wasb_default', s3_bucket, container_name, s3_prefix = None, s3_key = None, blob_prefix = None, blob_name = None, create_container = False, replace = False, s3_verify = False, s3_extra_args = None, wasb_extra_args = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Operator to move data from and AWS S3 Bucket to Microsoft Azure Blob Storage.

   A similar class exists to move data from Microsoft Azure Blob Storage to an AWS S3 Bucket, and lives in
   the airflow/providers/amazon/aws/transfers/azure_blob_to_s3.py file

   Either an explicit S3 key can be provided, or a prefix containing the files that are to be transferred to
   Azure blob storage. The same holds for a Blob name; an explicit name can be passed, or a Blob prefix can
   be provided for the file to be stored to

   .. seealso:
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator::SFTPToWasbOperator`

   :param aws_conn_id: ID for the AWS S3 connection to use.
   :param wasb_conn_id: ID for the Azure Blob Storage connection to use.
   :param s3_bucket: The name of the AWS S3 bucket that an object (or objects)  would be transferred from.
       (templated)
   :param container_name: The name of the Azure Storage Blob container an object (or objects) would be
       transferred to. (templated)
   :param s3_prefix: Prefix string that filters any S3 objects that begin with this prefix. (templated)
   :param s3_key: An explicit S3 key (object) to be transferred. (templated)
   :param blob_prefix: Prefix string that would provide a path in the Azure Storage Blob container for an
       object (or objects) to be moved to. (templated)
   :param blob_name: An explicit blob name that an object would be transferred to. This can only be used
       if a single file is being moved. If there are multiple files in an S3 bucket that are to be moved
       to a single Azure blob, an exception will be raised. (templated)
   :param create_container: True if a container should be created if it did not already exist, False
       otherwise.
   :param replace: If a blob exists in the container and replace takes a value of true, it will be
       overwritten. If replace is False and a blob exists in the container, the file will NOT be
       overwritten.
   :param s3_verify: Whether or not to verify SSL certificates for S3 connection.
       By default, SSL certificates are verified.
       You can provide the following values:

       - ``False``: do not validate SSL certificates. SSL will still be used
                (unless use_ssl is False), but SSL certificates will not be
                verified.
       - ``path/to/cert/bundle.pem``: A filename of the CA cert bundle to uses.
                You can specify this argument if you want to use a different
                CA cert bundle than the one used by botocore.
   :param s3_extra_args: kwargs to pass to S3Hook.
   :param wasb_extra_args: kwargs to pass to WasbHook.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('s3_bucket', 'container_name', 's3_prefix', 's3_key', 'blob_prefix', 'blob_name')

      

   .. py:method:: s3_hook()

      Create and return an S3Hook.


   .. py:method:: wasb_hook()

      Create and return a WasbHook.


   .. py:method:: execute(context)

      Execute logic below when operator is executed as a task.


   .. py:method:: get_files_to_move()

      Determine the list of files that need to be moved, and return the name.


   .. py:method:: move_file(file_name)

      Move file from S3 to Azure Blob storage.



