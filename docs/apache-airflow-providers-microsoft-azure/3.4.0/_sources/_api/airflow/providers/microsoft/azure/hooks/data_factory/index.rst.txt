:mod:`airflow.providers.microsoft.azure.hooks.data_factory`
===========================================================

.. py:module:: airflow.providers.microsoft.azure.hooks.data_factory


Module Contents
---------------

.. function:: provide_targeted_factory(func: Callable) -> Callable
   Provide the targeted factory to the decorated function in case it isn't specified.

   If ``resource_group_name`` or ``factory_name`` is not provided it defaults to the value specified in
   the connection extras.


.. py:class:: AzureDataFactoryPipelineRunStatus

   Azure Data Factory pipeline operation statuses.

   .. attribute:: QUEUED
      :annotation: = Queued

      

   .. attribute:: IN_PROGRESS
      :annotation: = InProgress

      

   .. attribute:: SUCCEEDED
      :annotation: = Succeeded

      

   .. attribute:: FAILED
      :annotation: = Failed

      

   .. attribute:: CANCELING
      :annotation: = Canceling

      

   .. attribute:: CANCELLED
      :annotation: = Cancelled

      

   .. attribute:: TERMINAL_STATUSES
      

      


.. py:exception:: AzureDataFactoryPipelineRunException

   Bases: :class:`airflow.exceptions.AirflowException`

   An exception that indicates a pipeline run failed to complete.


.. py:class:: AzureDataFactoryHook(azure_data_factory_conn_id: Optional[str] = default_conn_name)

   Bases: :class:`airflow.hooks.base.BaseHook`

   A hook to interact with Azure Data Factory.

   :param azure_data_factory_conn_id: The :ref:`Azure Data Factory connection id<howto/connection:adf>`.
   :type azure_data_factory_conn_id: str

   .. attribute:: conn_type
      :annotation: :str = azure_data_factory

      

   .. attribute:: conn_name_attr
      :annotation: :str = azure_data_factory_conn_id

      

   .. attribute:: default_conn_name
      :annotation: :str = azure_data_factory_default

      

   .. attribute:: hook_name
      :annotation: :str = Azure Data Factory

      

   
   .. staticmethod:: get_connection_form_widgets()

      Returns connection widgets to add to connection form



   
   .. staticmethod:: get_ui_field_behaviour()

      Returns custom field behaviour



   
   .. method:: get_conn(self)



   
   .. method:: get_factory(self, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the factory.

      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The factory.



   
   .. method:: update_factory(self, factory: Factory, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Update the factory.

      :param factory: The factory resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the factory does not exist.
      :return: The factory.



   
   .. method:: create_factory(self, factory: Factory, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Create the factory.

      :param factory: The factory resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the factory already exists.
      :return: The factory.



   
   .. method:: delete_factory(self, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Delete the factory.

      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: get_linked_service(self, linked_service_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the linked service.

      :param linked_service_name: The linked service name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The linked service.



   
   .. method:: update_linked_service(self, linked_service_name: str, linked_service: LinkedServiceResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Update the linked service.

      :param linked_service_name: The linked service name.
      :param linked_service: The linked service resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the linked service does not exist.
      :return: The linked service.



   
   .. method:: create_linked_service(self, linked_service_name: str, linked_service: LinkedServiceResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Create the linked service.

      :param linked_service_name: The linked service name.
      :param linked_service: The linked service resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the linked service already exists.
      :return: The linked service.



   
   .. method:: delete_linked_service(self, linked_service_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Delete the linked service.

      :param linked_service_name: The linked service name.
      :param resource_group_name: The linked service name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: get_dataset(self, dataset_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the dataset.

      :param dataset_name: The dataset name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The dataset.



   
   .. method:: update_dataset(self, dataset_name: str, dataset: DatasetResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Update the dataset.

      :param dataset_name: The dataset name.
      :param dataset: The dataset resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset does not exist.
      :return: The dataset.



   
   .. method:: create_dataset(self, dataset_name: str, dataset: DatasetResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Create the dataset.

      :param dataset_name: The dataset name.
      :param dataset: The dataset resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset already exists.
      :return: The dataset.



   
   .. method:: delete_dataset(self, dataset_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Delete the dataset.

      :param dataset_name: The dataset name.
      :param resource_group_name: The dataset name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: get_pipeline(self, pipeline_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline.



   
   .. method:: update_pipeline(self, pipeline_name: str, pipeline: PipelineResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Update the pipeline.

      :param pipeline_name: The pipeline name.
      :param pipeline: The pipeline resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the pipeline does not exist.
      :return: The pipeline.



   
   .. method:: create_pipeline(self, pipeline_name: str, pipeline: PipelineResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Create the pipeline.

      :param pipeline_name: The pipeline name.
      :param pipeline: The pipeline resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the pipeline already exists.
      :return: The pipeline.



   
   .. method:: delete_pipeline(self, pipeline_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Delete the pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The pipeline name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: run_pipeline(self, pipeline_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Run a pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline run.



   
   .. method:: get_pipeline_run(self, run_id: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the pipeline run.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline run.



   
   .. method:: get_pipeline_run_status(self, run_id: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None)

      Get a pipeline run's current status.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :return: The status of the pipeline run.



   
   .. method:: wait_for_pipeline_run_status(self, run_id: str, expected_statuses: Union[str, Set[str]], resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, check_interval: Optional[int] = 60, timeout: Optional[int] = 60 * 60 * 24 * 7)

      Waits for a pipeline run to match an expected status.

      :param run_id: The pipeline run identifier.
      :param expected_statuses: The desired status(es) to check against a pipeline run's current status.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param check_interval: Time in seconds to check on a pipeline run's status.
      :param timeout: Time in seconds to wait for a pipeline to reach a terminal status or the expected
          status.
      :return: Boolean indicating if the pipeline run has reached the ``expected_status``.



   
   .. method:: cancel_pipeline_run(self, run_id: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Cancel the pipeline run.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: get_trigger(self, trigger_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Get the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The trigger.



   
   .. method:: update_trigger(self, trigger_name: str, trigger: TriggerResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Update the trigger.

      :param trigger_name: The trigger name.
      :param trigger: The trigger resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the trigger does not exist.
      :return: The trigger.



   
   .. method:: create_trigger(self, trigger_name: str, trigger: TriggerResource, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Create the trigger.

      :param trigger_name: The trigger name.
      :param trigger: The trigger resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the trigger already exists.
      :return: The trigger.



   
   .. method:: delete_trigger(self, trigger_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Delete the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: start_trigger(self, trigger_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Start the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: An Azure operation poller.



   
   .. method:: stop_trigger(self, trigger_name: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Stop the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: An Azure operation poller.



   
   .. method:: rerun_trigger(self, trigger_name: str, run_id: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Rerun the trigger.

      :param trigger_name: The trigger name.
      :param run_id: The trigger run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



   
   .. method:: cancel_trigger(self, trigger_name: str, run_id: str, resource_group_name: Optional[str] = None, factory_name: Optional[str] = None, **config)

      Cancel the trigger.

      :param trigger_name: The trigger name.
      :param run_id: The trigger run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.




