:py:mod:`airflow.providers.microsoft.azure.triggers.wasb`
=========================================================

.. py:module:: airflow.providers.microsoft.azure.triggers.wasb


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.triggers.wasb.WasbBlobSensorTrigger
   airflow.providers.microsoft.azure.triggers.wasb.WasbPrefixSensorTrigger




.. py:class:: WasbBlobSensorTrigger(container_name, blob_name, wasb_conn_id = 'wasb_default', public_read = False, poke_interval = 5.0)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Checks for existence of the given blob in the provided container.

   WasbBlobSensorTrigger is fired as deferred class with params to run the task in trigger worker.

   :param container_name: name of the container in which the blob should be searched for
   :param blob_name: name of the blob to check existence for
   :param wasb_conn_id: the connection identifier for connecting to Azure WASB
   :param poke_interval:  polling period in seconds to check for the status
   :param public_read: whether an anonymous public read access should be used. Default is False

   .. py:method:: serialize()

      Serializes WasbBlobSensorTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Makes async connection to Azure WASB and polls for existence of the given blob name.



.. py:class:: WasbPrefixSensorTrigger(container_name, prefix, include = None, delimiter = '/', wasb_conn_id = 'wasb_default', public_read = False, poke_interval = 5.0)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Checks for the existence of a blob with the given prefix in the provided container.

   WasbPrefixSensorTrigger is fired as a deferred class with params to run the task in trigger.

   :param container_name: name of the container in which the blob should be searched for
   :param prefix: prefix of the blob to check existence for
   :param include: specifies one or more additional datasets to include in the
           response. Options include: ``snapshots``, ``metadata``, ``uncommittedblobs``,
           ``copy``, ``deleted``
   :param delimiter: filters objects based on the delimiter (for e.g '.csv')
   :param wasb_conn_id: the connection identifier for connecting to Azure WASB
   :param poke_interval:  polling period in seconds to check for the status
   :param public_read: whether an anonymous public read access should be used. Default is False

   .. py:method:: serialize()

      Serializes WasbPrefixSensorTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Makes async connection to Azure WASB and polls for existence of a blob with given prefix.



