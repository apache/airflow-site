:py:mod:`airflow.providers.microsoft.azure.hooks.data_factory`
==============================================================

.. py:module:: airflow.providers.microsoft.azure.hooks.data_factory

.. autoapi-nested-parse::

   Spelling exceptions.

   .. spelling:word-list::
       CreateRunResponse
       DatasetResource
       LinkedServiceResource
       LROPoller
       PipelineResource
       PipelineRun
       TriggerResource
       datafactory
       DataFlow
       DataFlowResource
       mgmt



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.data_factory.AzureDataFactoryPipelineRunStatus
   airflow.providers.microsoft.azure.hooks.data_factory.AzureDataFactoryHook
   airflow.providers.microsoft.azure.hooks.data_factory.AzureDataFactoryAsyncHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.data_factory.provide_targeted_factory
   airflow.providers.microsoft.azure.hooks.data_factory.get_field
   airflow.providers.microsoft.azure.hooks.data_factory.provide_targeted_factory_async



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.data_factory.Credentials
   airflow.providers.microsoft.azure.hooks.data_factory.AsyncCredentials
   airflow.providers.microsoft.azure.hooks.data_factory.T


.. py:data:: Credentials

   

.. py:data:: AsyncCredentials

   

.. py:data:: T

   

.. py:function:: provide_targeted_factory(func)

   Provide the targeted factory to the decorated function in case it isn't specified.

   If ``resource_group_name`` or ``factory_name`` is not provided it defaults to the value specified in
   the connection extras.


.. py:class:: AzureDataFactoryPipelineRunStatus


   Azure Data Factory pipeline operation statuses.

   .. py:attribute:: QUEUED
      :value: 'Queued'

      

   .. py:attribute:: IN_PROGRESS
      :value: 'InProgress'

      

   .. py:attribute:: SUCCEEDED
      :value: 'Succeeded'

      

   .. py:attribute:: FAILED
      :value: 'Failed'

      

   .. py:attribute:: CANCELING
      :value: 'Canceling'

      

   .. py:attribute:: CANCELLED
      :value: 'Cancelled'

      

   .. py:attribute:: TERMINAL_STATUSES

      

   .. py:attribute:: INTERMEDIATE_STATES

      

   .. py:attribute:: FAILURE_STATES

      


.. py:exception:: AzureDataFactoryPipelineRunException


   Bases: :py:obj:`airflow.exceptions.AirflowException`

   An exception that indicates a pipeline run failed to complete.


.. py:function:: get_field(extras, field_name, strict = False)

   Get field from extra, first checking short name, then for backcompat we check for prefixed name.


.. py:class:: AzureDataFactoryHook(azure_data_factory_conn_id = default_conn_name)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   A hook to interact with Azure Data Factory.

   :param azure_data_factory_conn_id: The :ref:`Azure Data Factory connection id<howto/connection:adf>`.

   .. py:attribute:: conn_type
      :type: str
      :value: 'azure_data_factory'

      

   .. py:attribute:: conn_name_attr
      :type: str
      :value: 'azure_data_factory_conn_id'

      

   .. py:attribute:: default_conn_name
      :type: str
      :value: 'azure_data_factory_default'

      

   .. py:attribute:: hook_name
      :type: str
      :value: 'Azure Data Factory'

      

   .. py:method:: get_connection_form_widgets()
      :staticmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: refresh_conn()


   .. py:method:: get_factory(resource_group_name, factory_name, **config)

      Get the factory.

      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The factory.


   .. py:method:: update_factory(factory, resource_group_name, factory_name, if_match = None, **config)

      Update the factory.

      :param factory: The factory resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_match: ETag of the factory entity. Should only be specified for update, for which it
       should match existing entity or can be * for unconditional update. Default value is None.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the factory does not exist.
      :return: The factory.


   .. py:method:: create_factory(factory, resource_group_name, factory_name, **config)

      Create the factory.

      :param factory: The factory resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the factory already exists.
      :return: The factory.


   .. py:method:: delete_factory(resource_group_name, factory_name, **config)

      Delete the factory.

      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_linked_service(linked_service_name, resource_group_name, factory_name, if_none_match = None, **config)

      Get the linked service.

      :param linked_service_name: The linked service name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_none_match: ETag of the linked service entity. Should only be specified for get. If
       the ETag matches the existing entity tag, or if * was provided, then no content will be
       returned. Default value is None.
      :param config: Extra parameters for the ADF client.
      :return: The linked service.


   .. py:method:: update_linked_service(linked_service_name, linked_service, resource_group_name, factory_name, **config)

      Update the linked service.

      :param linked_service_name: The linked service name.
      :param linked_service: The linked service resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the linked service does not exist.
      :return: The linked service.


   .. py:method:: create_linked_service(linked_service_name, linked_service, resource_group_name, factory_name, **config)

      Create the linked service.

      :param linked_service_name: The linked service name.
      :param linked_service: The linked service resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the linked service already exists.
      :return: The linked service.


   .. py:method:: delete_linked_service(linked_service_name, resource_group_name, factory_name, **config)

      Delete the linked service.

      :param linked_service_name: The linked service name.
      :param resource_group_name: The linked service name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_dataset(dataset_name, resource_group_name, factory_name, **config)

      Get the dataset.

      :param dataset_name: The dataset name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The dataset.


   .. py:method:: update_dataset(dataset_name, dataset, resource_group_name, factory_name, **config)

      Update the dataset.

      :param dataset_name: The dataset name.
      :param dataset: The dataset resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset does not exist.
      :return: The dataset.


   .. py:method:: create_dataset(dataset_name, dataset, resource_group_name, factory_name, **config)

      Create the dataset.

      :param dataset_name: The dataset name.
      :param dataset: The dataset resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset already exists.
      :return: The dataset.


   .. py:method:: delete_dataset(dataset_name, resource_group_name, factory_name, **config)

      Delete the dataset.

      :param dataset_name: The dataset name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_dataflow(dataflow_name, resource_group_name, factory_name, if_none_match = None, **config)

      Get the dataflow.

      :param dataflow_name: The dataflow name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_none_match: ETag of the data flow entity. Should only be specified for get. If the
       ETag matches the existing entity tag, or if * was provided, then no content will be returned.
       Default value is None.
      :param config: Extra parameters for the ADF client.
      :return: The DataFlowResource.


   .. py:method:: update_dataflow(dataflow_name, dataflow, resource_group_name, factory_name, if_match = None, **config)

      Update the dataflow.

      :param dataflow_name: The dataflow name.
      :param dataflow: The dataflow resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_match: ETag of the data flow entity. Should only be specified for update, for which
       it should match existing entity or can be * for unconditional update. Default value is None.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset does not exist.
      :return: DataFlowResource.


   .. py:method:: create_dataflow(dataflow_name, dataflow, resource_group_name, factory_name, if_match = None, **config)

      Create the dataflow.

      :param dataflow_name: The dataflow name.
      :param dataflow: The dataflow resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_match: ETag of the factory entity. Should only be specified for update, for which it
       should match existing entity or can be * for unconditional update. Default value is None.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the dataset already exists.
      :return: The dataset.


   .. py:method:: delete_dataflow(dataflow_name, resource_group_name, factory_name, **config)

      Delete the dataflow.

      :param dataflow_name: The dataflow name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_pipeline(pipeline_name, resource_group_name, factory_name, **config)

      Get the pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline.


   .. py:method:: update_pipeline(pipeline_name, pipeline, resource_group_name, factory_name, **config)

      Update the pipeline.

      :param pipeline_name: The pipeline name.
      :param pipeline: The pipeline resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the pipeline does not exist.
      :return: The pipeline.


   .. py:method:: create_pipeline(pipeline_name, pipeline, resource_group_name, factory_name, **config)

      Create the pipeline.

      :param pipeline_name: The pipeline name.
      :param pipeline: The pipeline resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the pipeline already exists.
      :return: The pipeline.


   .. py:method:: delete_pipeline(pipeline_name, resource_group_name, factory_name, **config)

      Delete the pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The pipeline name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: run_pipeline(pipeline_name, resource_group_name, factory_name, **config)

      Run a pipeline.

      :param pipeline_name: The pipeline name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline run.


   .. py:method:: get_pipeline_run(run_id, resource_group_name, factory_name, **config)

      Get the pipeline run.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The pipeline run.


   .. py:method:: get_pipeline_run_status(run_id, resource_group_name, factory_name)

      Get a pipeline run's current status.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :return: The status of the pipeline run.


   .. py:method:: wait_for_pipeline_run_status(run_id, expected_statuses, resource_group_name, factory_name, check_interval = 60, timeout = 60 * 60 * 24 * 7)

      Waits for a pipeline run to match an expected status.

      :param run_id: The pipeline run identifier.
      :param expected_statuses: The desired status(es) to check against a pipeline run's current status.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param check_interval: Time in seconds to check on a pipeline run's status.
      :param timeout: Time in seconds to wait for a pipeline to reach a terminal status or the expected
          status.
      :return: Boolean indicating if the pipeline run has reached the ``expected_status``.


   .. py:method:: cancel_pipeline_run(run_id, resource_group_name, factory_name, **config)

      Cancel the pipeline run.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_trigger(trigger_name, resource_group_name, factory_name, **config)

      Get the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: The trigger.


   .. py:method:: update_trigger(trigger_name, trigger, resource_group_name, factory_name, if_match = None, **config)

      Update the trigger.

      :param trigger_name: The trigger name.
      :param trigger: The trigger resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param if_match: ETag of the trigger entity.  Should only be specified for update, for which it
       should match existing entity or can be * for unconditional update. Default value is None.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the trigger does not exist.
      :return: The trigger.


   .. py:method:: create_trigger(trigger_name, trigger, resource_group_name, factory_name, **config)

      Create the trigger.

      :param trigger_name: The trigger name.
      :param trigger: The trigger resource definition.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :raise AirflowException: If the trigger already exists.
      :return: The trigger.


   .. py:method:: delete_trigger(trigger_name, resource_group_name, factory_name, **config)

      Delete the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: start_trigger(trigger_name, resource_group_name, factory_name, **config)

      Start the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: An Azure operation poller.


   .. py:method:: stop_trigger(trigger_name, resource_group_name, factory_name, **config)

      Stop the trigger.

      :param trigger_name: The trigger name.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.
      :return: An Azure operation poller.


   .. py:method:: rerun_trigger(trigger_name, run_id, resource_group_name, factory_name, **config)

      Rerun the trigger.

      :param trigger_name: The trigger name.
      :param run_id: The trigger run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: cancel_trigger(trigger_name, run_id, resource_group_name, factory_name, **config)

      Cancel the trigger.

      :param trigger_name: The trigger name.
      :param run_id: The trigger run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: test_connection()

      Test a configured Azure Data Factory connection.



.. py:function:: provide_targeted_factory_async(func)

   Provide the targeted factory to the async decorated function in case it isn't specified.

   If ``resource_group_name`` or ``factory_name`` is not provided it defaults to the value specified in
   the connection extras.


.. py:class:: AzureDataFactoryAsyncHook(azure_data_factory_conn_id = default_conn_name)


   Bases: :py:obj:`AzureDataFactoryHook`

   An Async Hook that connects to Azure DataFactory to perform pipeline operations.

   :param azure_data_factory_conn_id: The :ref:`Azure Data Factory connection id<howto/connection:adf>`.

   .. py:attribute:: default_conn_name
      :type: str
      :value: 'azure_data_factory_default'

      

   .. py:method:: get_async_conn()
      :async:

      Get async connection and connect to azure data factory.


   .. py:method:: refresh_conn()
      :async:


   .. py:method:: get_pipeline_run(run_id, resource_group_name, factory_name, **config)
      :async:

      Connect to Azure Data Factory asynchronously to get the pipeline run details by run id.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.


   .. py:method:: get_adf_pipeline_run_status(run_id, resource_group_name, factory_name)
      :async:

      Connect to Azure Data Factory asynchronously and get the pipeline status by run_id.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.


   .. py:method:: cancel_pipeline_run(run_id, resource_group_name, factory_name, **config)
      :async:

      Cancel the pipeline run.

      :param run_id: The pipeline run identifier.
      :param resource_group_name: The resource group name.
      :param factory_name: The factory name.
      :param config: Extra parameters for the ADF client.



