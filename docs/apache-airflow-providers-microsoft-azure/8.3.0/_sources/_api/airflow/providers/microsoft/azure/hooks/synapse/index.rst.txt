:py:mod:`airflow.providers.microsoft.azure.hooks.synapse`
=========================================================

.. py:module:: airflow.providers.microsoft.azure.hooks.synapse


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.synapse.AzureSynapseSparkBatchRunStatus
   airflow.providers.microsoft.azure.hooks.synapse.AzureSynapseHook
   airflow.providers.microsoft.azure.hooks.synapse.AzureSynapsePipelineRunStatus
   airflow.providers.microsoft.azure.hooks.synapse.AzureSynapsePipelineHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.hooks.synapse.Credentials


.. py:data:: Credentials

   

.. py:class:: AzureSynapseSparkBatchRunStatus


   Azure Synapse Spark Job operation statuses.

   .. py:attribute:: NOT_STARTED
      :value: 'not_started'

      

   .. py:attribute:: STARTING
      :value: 'starting'

      

   .. py:attribute:: RUNNING
      :value: 'running'

      

   .. py:attribute:: IDLE
      :value: 'idle'

      

   .. py:attribute:: BUSY
      :value: 'busy'

      

   .. py:attribute:: SHUTTING_DOWN
      :value: 'shutting_down'

      

   .. py:attribute:: ERROR
      :value: 'error'

      

   .. py:attribute:: DEAD
      :value: 'dead'

      

   .. py:attribute:: KILLED
      :value: 'killed'

      

   .. py:attribute:: SUCCESS
      :value: 'success'

      

   .. py:attribute:: TERMINAL_STATUSES

      


.. py:class:: AzureSynapseHook(azure_synapse_conn_id = default_conn_name, spark_pool = '')


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   A hook to interact with Azure Synapse.

   :param azure_synapse_conn_id: The :ref:`Azure Synapse connection id<howto/connection:synapse>`.
   :param spark_pool: The Apache Spark pool used to submit the job

   .. py:attribute:: conn_type
      :type: str
      :value: 'azure_synapse'

      

   .. py:attribute:: conn_name_attr
      :type: str
      :value: 'azure_synapse_conn_id'

      

   .. py:attribute:: default_conn_name
      :type: str
      :value: 'azure_synapse_default'

      

   .. py:attribute:: hook_name
      :type: str
      :value: 'Azure Synapse'

      

   .. py:method:: get_connection_form_widgets()
      :staticmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: run_spark_job(payload)

      Run a job in an Apache Spark pool.

      :param payload: Livy compatible payload which represents the spark job that a user wants to submit.


   .. py:method:: get_job_run_status()

      Get the job run status.


   .. py:method:: wait_for_job_run_status(job_id, expected_statuses, check_interval = 60, timeout = 60 * 60 * 24 * 7)

      Waits for a job run to match an expected status.

      :param job_id: The job run identifier.
      :param expected_statuses: The desired status(es) to check against a job run's current status.
      :param check_interval: Time in seconds to check on a job run's status.
      :param timeout: Time in seconds to wait for a job to reach a terminal status or the expected
          status.



   .. py:method:: cancel_job_run(job_id)

      Cancel the spark job run.

      :param job_id: The synapse spark job identifier.



.. py:class:: AzureSynapsePipelineRunStatus


   Azure Synapse pipeline operation statuses.

   .. py:attribute:: QUEUED
      :value: 'Queued'

      

   .. py:attribute:: IN_PROGRESS
      :value: 'InProgress'

      

   .. py:attribute:: SUCCEEDED
      :value: 'Succeeded'

      

   .. py:attribute:: FAILED
      :value: 'Failed'

      

   .. py:attribute:: CANCELING
      :value: 'Canceling'

      

   .. py:attribute:: CANCELLED
      :value: 'Cancelled'

      

   .. py:attribute:: TERMINAL_STATUSES

      

   .. py:attribute:: INTERMEDIATE_STATES

      

   .. py:attribute:: FAILURE_STATES

      


.. py:exception:: AzureSynapsePipelineRunException


   Bases: :py:obj:`airflow.exceptions.AirflowException`

   An exception that indicates a pipeline run failed to complete.


.. py:class:: AzureSynapsePipelineHook(azure_synapse_workspace_dev_endpoint, azure_synapse_conn_id = default_conn_name)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   A hook to interact with Azure Synapse Pipeline.

   :param azure_synapse_conn_id: The :ref:`Azure Synapse connection id<howto/connection:synapse>`.
   :param azure_synapse_workspace_dev_endpoint: The Azure Synapse Workspace development endpoint.

   .. py:attribute:: conn_type
      :type: str
      :value: 'azure_synapse_pipeline'

      

   .. py:attribute:: conn_name_attr
      :type: str
      :value: 'azure_synapse_conn_id'

      

   .. py:attribute:: default_conn_name
      :type: str
      :value: 'azure_synapse_connection'

      

   .. py:attribute:: hook_name
      :type: str
      :value: 'Azure Synapse Pipeline'

      

   .. py:method:: get_connection_form_widgets()
      :staticmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: run_pipeline(pipeline_name, **config)

      Run a Synapse pipeline.

      :param pipeline_name: The pipeline name.
      :param config: Extra parameters for the Synapse Artifact Client.
      :return: The pipeline run Id.


   .. py:method:: get_pipeline_run(run_id)

      Get the pipeline run.

      :param run_id: The pipeline run identifier.
      :return: The pipeline run.


   .. py:method:: get_pipeline_run_status(run_id)

      Get a pipeline run's current status.

      :param run_id: The pipeline run identifier.

      :return: The status of the pipeline run.


   .. py:method:: refresh_conn()


   .. py:method:: wait_for_pipeline_run_status(run_id, expected_statuses, check_interval = 60, timeout = 60 * 60 * 24 * 7)

      Waits for a pipeline run to match an expected status.

      :param run_id: The pipeline run identifier.
      :param expected_statuses: The desired status(es) to check against a pipeline run's current status.
      :param check_interval: Time in seconds to check on a pipeline run's status.
      :param timeout: Time in seconds to wait for a pipeline to reach a terminal status or the expected
          status.

      :return: Boolean indicating if the pipeline run has reached the ``expected_status``.


   .. py:method:: cancel_run_pipeline(run_id)

      Cancel the pipeline run.

      :param run_id: The pipeline run identifier.



