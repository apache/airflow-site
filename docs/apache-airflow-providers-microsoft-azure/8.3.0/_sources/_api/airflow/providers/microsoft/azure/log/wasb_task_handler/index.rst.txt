:py:mod:`airflow.providers.microsoft.azure.log.wasb_task_handler`
=================================================================

.. py:module:: airflow.providers.microsoft.azure.log.wasb_task_handler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.log.wasb_task_handler.WasbTaskHandler



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.log.wasb_task_handler.get_default_delete_local_copy



.. py:function:: get_default_delete_local_copy()

   Load delete_local_logs conf if Airflow version > 2.6 and return False if not.

   TODO: delete this function when min airflow version >= 2.6


.. py:class:: WasbTaskHandler(base_log_folder, wasb_log_folder, wasb_container, *, filename_template = None, **kwargs)


   Bases: :py:obj:`airflow.utils.log.file_task_handler.FileTaskHandler`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   WasbTaskHandler is a python log handler that handles and reads task instance logs.

   It extends airflow FileTaskHandler and uploads to and reads from Wasb remote storage.

   .. py:attribute:: trigger_should_wrap
      :value: True

      

   .. py:method:: hook()

      Returns WasbHook.


   .. py:method:: set_context(ti, *, identifier = None)

      Provide task_instance context to airflow task handler.

      Generally speaking returns None.  But if attr `maintain_propagate` has
      been set to propagate, then returns sentinel MAINTAIN_PROPAGATE. This
      has the effect of overriding the default behavior to set `propagate`
      to False whenever set_context is called.  At time of writing, this
      functionality is only used in unit testing.

      :param ti: task instance object
      :param identifier: if set, adds suffix to log file. For use when relaying exceptional messages
          to task logs from a context other than task or trigger run


   .. py:method:: close()

      Close and upload local log file to remote storage Wasb.


   .. py:method:: wasb_log_exists(remote_log_location)

      Check if remote_log_location exists in remote storage.

      :param remote_log_location: log's location in remote storage
      :return: True if location exists else False


   .. py:method:: wasb_read(remote_log_location, return_error = False)

      Return the log found at the remote_log_location. Returns '' if no logs are found or there is an error.

      :param remote_log_location: the log's location in remote storage
      :param return_error: if True, returns a string error message if an
          error occurs. Otherwise returns '' when an error occurs.


   .. py:method:: wasb_write(log, remote_log_location, append = True)

      Writes the log to the remote_log_location. Fails silently if no hook was created.

      :param log: the log to write to the remote_log_location
      :param remote_log_location: the log's location in remote storage
      :param append: if False, any existing log file is overwritten. If True,
          the new log is appended to any existing logs.



