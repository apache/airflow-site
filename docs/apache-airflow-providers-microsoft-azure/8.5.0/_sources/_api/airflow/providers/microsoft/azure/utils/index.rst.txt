:py:mod:`airflow.providers.microsoft.azure.utils`
=================================================

.. py:module:: airflow.providers.microsoft.azure.utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.utils.AzureIdentityCredentialAdapter



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.utils.get_field
   airflow.providers.microsoft.azure.utils.add_managed_identity_connection_widgets



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.microsoft.azure.utils.get_sync_default_azure_credential
   airflow.providers.microsoft.azure.utils.get_async_default_azure_credential


.. py:function:: get_field(*, conn_id, conn_type, extras, field_name)

   Get field from extra, first checking short name, then for backcompat we check for prefixed name.


.. py:data:: get_sync_default_azure_credential
   :type: functools.partial[azure.identity.DefaultAzureCredential]

   

.. py:data:: get_async_default_azure_credential
   :type: functools.partial[azure.identity.aio.DefaultAzureCredential]

   

.. py:function:: add_managed_identity_connection_widgets(func)


.. py:class:: AzureIdentityCredentialAdapter(credential=None, resource_id='https://management.azure.com/.default', *, managed_identity_client_id = None, workload_identity_tenant_id = None, **kwargs)


   Bases: :py:obj:`msrest.authentication.BasicTokenAuthentication`

   Adapt azure-identity credentials for backward compatibility.

   Adapt credentials from azure-identity to be compatible with SD
   that needs msrestazure or azure.common.credentials

   Check https://stackoverflow.com/questions/63384092/exception-attributeerror-defaultazurecredential-object-has-no-attribute-sig

   .. py:method:: set_token()

      Ask the azure-core BearerTokenCredentialPolicy policy to get a token.

      Using the policy gives us for free the caching system of azure-core.
      We could make this code simpler by using private method, but by definition
      I can't assure they will be there forever, so mocking a fake call to the policy
      to extract the token, using 100% public API.


   .. py:method:: signed_session(azure_session=None)

      Create requests session with any required auth headers
      applied.

      If a session object is provided, configure it directly. Otherwise,
      create a new session and return it.

      :param session: The session to configure for authentication
      :type session: requests.Session
      :rtype: requests.Session



