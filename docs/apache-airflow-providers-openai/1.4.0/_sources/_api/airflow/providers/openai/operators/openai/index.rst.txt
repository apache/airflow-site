:py:mod:`airflow.providers.openai.operators.openai`
===================================================

.. py:module:: airflow.providers.openai.operators.openai


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openai.operators.openai.OpenAIEmbeddingOperator
   airflow.providers.openai.operators.openai.OpenAITriggerBatchOperator




.. py:class:: OpenAIEmbeddingOperator(conn_id, input_text, model = 'text-embedding-ada-002', embedding_kwargs = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Operator that accepts input text to generate OpenAI embeddings using the specified model.

   :param conn_id: The OpenAI connection ID to use.
   :param input_text: The text to generate OpenAI embeddings for. This can be a string, a list of strings,
                   a list of integers, or a list of lists of integers.
   :param model: The OpenAI model to be used for generating the embeddings.
   :param embedding_kwargs: Additional keyword arguments to pass to the OpenAI `create_embeddings` method.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:OpenAIEmbeddingOperator`
       For possible options for `embedding_kwargs`, see:
       https://platform.openai.com/docs/api-reference/embeddings/create

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('input_text',)

      

   .. py:method:: hook()

      Return an instance of the OpenAIHook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: OpenAITriggerBatchOperator(file_id, endpoint, conn_id = OpenAIHook.default_conn_name, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), wait_seconds = 3, timeout = 24 * 60 * 60, wait_for_completion = True, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Operator that triggers an OpenAI Batch API endpoint and waits for the batch to complete.

   :param file_id: Required. The ID of the batch file to trigger.
   :param endpoint: Required. The OpenAI Batch API endpoint to trigger.
   :param conn_id: Optional. The OpenAI connection ID to use. Defaults to 'openai_default'.
   :param deferrable: Optional. Run operator in the deferrable mode.
   :param wait_seconds: Optional. Number of seconds between checks. Only used when ``deferrable`` is False.
       Defaults to 3 seconds.
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Only used when ``deferrable`` is False. Defaults to 24 hour, which is the SLA for OpenAI Batch API.
   :param wait_for_completion: Optional. Whether to wait for the batch to complete. If set to False, the operator
       will return immediately after triggering the batch. Defaults to True.

   .. seealso::
       For more information on how to use this operator, please take a look at the guide:
       :ref:`howto/operator:OpenAITriggerBatchOperator`

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('file_id',)

      

   .. py:method:: hook()

      Return an instance of the OpenAIHook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)

      Invoke this callback when the trigger fires; return immediately.

      Relies on trigger to throw an exception, otherwise it assumes execution was
      successful.


   .. py:method:: on_kill()

      Cancel the batch if task is cancelled.



