:py:mod:`airflow.providers.openlineage.plugins.macros`
======================================================

.. py:module:: airflow.providers.openlineage.plugins.macros


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.plugins.macros.lineage_job_namespace
   airflow.providers.openlineage.plugins.macros.lineage_job_name
   airflow.providers.openlineage.plugins.macros.lineage_run_id
   airflow.providers.openlineage.plugins.macros.lineage_parent_id



.. py:function:: lineage_job_namespace()

   Macro function which returns Airflow OpenLineage namespace.

   .. seealso::
       For more information take a look at the guide:
       :ref:`howto/macros:openlineage`


.. py:function:: lineage_job_name(task_instance)

   Macro function which returns Airflow task name in OpenLineage format (`<dag_id>.<task_id>`).

   .. seealso::
       For more information take a look at the guide:
       :ref:`howto/macros:openlineage`


.. py:function:: lineage_run_id(task_instance)

   Macro function which returns the generated run id (UUID) for a given task.

   This can be used to forward the run id from a task to a child run so the job hierarchy is preserved.

   .. seealso::
       For more information take a look at the guide:
       :ref:`howto/macros:openlineage`


.. py:function:: lineage_parent_id(task_instance)

   Macro function which returns a unique identifier of given task that can be used to create ParentRunFacet.

   This identifier is composed of the namespace, job name, and generated run id for given task, structured
   as '{namespace}/{job_name}/{run_id}'. This can be used to forward task information from a task to a child
   run so the job hierarchy is preserved. Child run can easily create ParentRunFacet from these information.

   .. seealso::
       For more information take a look at the guide:
       :ref:`howto/macros:openlineage`


