:py:mod:`airflow.providers.openlineage.plugins.adapter`
=======================================================

.. py:module:: airflow.providers.openlineage.plugins.adapter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.openlineage.plugins.adapter.OpenLineageAdapter




.. py:class:: OpenLineageAdapter(client = None, secrets_masker = None)


   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Translate Airflow metadata to OpenLineage events instead of creating them from Airflow code.

   .. py:method:: get_or_create_openlineage_client()


   .. py:method:: get_openlineage_config()


   .. py:method:: build_dag_run_id(dag_id, dag_run_id)
      :staticmethod:


   .. py:method:: build_task_instance_run_id(task_id, execution_date, try_number)
      :staticmethod:


   .. py:method:: emit(event)


   .. py:method:: start_task(run_id, job_name, job_description, event_time, parent_job_name, parent_run_id, code_location, nominal_start_time, nominal_end_time, owners, task, run_facets = None)

      Emits openlineage event of type START.

      :param run_id: globally unique identifier of task in dag run
      :param job_name: globally unique identifier of task in dag
      :param job_description: user provided description of job
      :param event_time:
      :param parent_job_name: the name of the parent job (typically the DAG,
              but possibly a task group)
      :param parent_run_id: identifier of job spawning this task
      :param code_location: file path or URL of DAG file
      :param nominal_start_time: scheduled time of dag run
      :param nominal_end_time: following schedule of dag run
      :param owners: list of owners of DAG
      :param task: metadata container with information extracted from operator
      :param run_facets: custom run facets


   .. py:method:: complete_task(run_id, job_name, parent_job_name, parent_run_id, end_time, task)

      Emits openlineage event of type COMPLETE.

      :param run_id: globally unique identifier of task in dag run
      :param job_name: globally unique identifier of task between dags
      :param parent_job_name: the name of the parent job (typically the DAG,
              but possibly a task group)
      :param parent_run_id: identifier of job spawning this task
      :param end_time: time of task completion
      :param task: metadata container with information extracted from operator


   .. py:method:: fail_task(run_id, job_name, parent_job_name, parent_run_id, end_time, task)

      Emits openlineage event of type FAIL.

      :param run_id: globally unique identifier of task in dag run
      :param job_name: globally unique identifier of task between dags
      :param parent_job_name: the name of the parent job (typically the DAG,
              but possibly a task group)
      :param parent_run_id: identifier of job spawning this task
      :param end_time: time of task completion
      :param task: metadata container with information extracted from operator


   .. py:method:: dag_started(dag_run, msg, nominal_start_time, nominal_end_time)


   .. py:method:: dag_success(dag_run, msg)


   .. py:method:: dag_failed(dag_run, msg)



