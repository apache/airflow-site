:py:mod:`airflow.providers.oracle.operators.oracle`
===================================================

.. py:module:: airflow.providers.oracle.operators.oracle


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.oracle.operators.oracle.OracleOperator
   airflow.providers.oracle.operators.oracle.OracleStoredProcedureOperator




.. py:class:: OracleOperator(*, sql: Union[str, List[str]], oracle_conn_id: str = 'oracle_default', parameters: Optional[Union[Mapping, Iterable]] = None, autocommit: bool = False, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes sql code in a specific Oracle database.

   :param sql: the sql code to be executed. Can receive a str representing a sql statement,
       a list of str (sql statements), or reference to a template file.
       Template reference are recognized by str ending in '.sql'
       (templated)
   :type sql: str or list[str]
   :param oracle_conn_id: The :ref:`Oracle connection id <howto/connection:oracle>`
       reference to a specific Oracle database.
   :type oracle_conn_id: str
   :param parameters: (optional) the parameters to render the SQL query with.
   :type parameters: dict or iterable
   :param autocommit: if True, each command is automatically committed.
       (default value: False)
   :type autocommit: bool

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sql']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = ['.sql']

      

   .. py:attribute:: ui_color
      :annotation: = #ededed

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> None

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



.. py:class:: OracleStoredProcedureOperator(*, procedure: str, oracle_conn_id: str = 'oracle_default', parameters: Optional[Union[Dict, List]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes stored procedure in a specific Oracle database.

   :param procedure: name of stored procedure to call (templated)
   :type procedure: str
   :param oracle_conn_id: The :ref:`Oracle connection id <howto/connection:oracle>`
       reference to a specific Oracle database.
   :type oracle_conn_id: str
   :param parameters: (optional) the parameters provided in the call
   :type parameters: dict or iterable

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['procedure']

      

   .. py:attribute:: ui_color
      :annotation: = #ededed

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> Optional[Union[List, Dict]]

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



