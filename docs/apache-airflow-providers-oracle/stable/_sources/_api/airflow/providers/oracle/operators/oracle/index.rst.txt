:py:mod:`airflow.providers.oracle.operators.oracle`
===================================================

.. py:module:: airflow.providers.oracle.operators.oracle


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.oracle.operators.oracle.OracleStoredProcedureOperator




.. py:class:: OracleStoredProcedureOperator(*, procedure, oracle_conn_id = 'oracle_default', parameters = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes stored procedure in a specific Oracle database.

   :param procedure: name of stored procedure to call (templated)
   :param oracle_conn_id: The :ref:`Oracle connection id <howto/connection:oracle>`
       reference to a specific Oracle database.
   :param parameters: (optional, templated) the parameters provided in the call

   If *do_xcom_push* is *True*, the numeric exit code emitted by
   the database is pushed to XCom under key ``ORA`` in case of failure.

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('parameters', 'procedure')

      

   .. py:attribute:: ui_color
      :value: '#ededed'

      

   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



