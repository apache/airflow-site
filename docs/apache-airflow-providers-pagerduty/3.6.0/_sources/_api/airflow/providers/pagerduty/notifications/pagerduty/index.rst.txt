:py:mod:`airflow.providers.pagerduty.notifications.pagerduty`
=============================================================

.. py:module:: airflow.providers.pagerduty.notifications.pagerduty


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.pagerduty.notifications.pagerduty.PagerdutyNotifier




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.pagerduty.notifications.pagerduty.send_pagerduty_notification


.. py:class:: PagerdutyNotifier(*, summary, severity, source = 'airflow', action = 'trigger', dedup_key = None, custom_details = None, group = None, component = None, class_type = None, images = None, links = None, pagerduty_events_conn_id = 'pagerduty_events_default', integration_key = None)


   Bases: :py:obj:`airflow.notifications.basenotifier.BaseNotifier`

   Pagerduty BaseNotifier.

   :param summary: Summary for the event
   :param severity: Severity for the event, needs to be one of: info, warning, error, critical
   :param source: Specific human-readable unique identifier, such as a
       hostname, for the system having the problem.
   :param action: Event action, needs to be one of: trigger, acknowledge,
       resolve. Default to trigger if not specified.
   :param dedup_key: A string which identifies the alert triggered for the given event.
       Required for the actions acknowledge and resolve.
   :param custom_details: Free-form details from the event. Can be a dictionary or a string.
       If a dictionary is passed it will show up in PagerDuty as a table.
   :param group: A cluster or grouping of sources. For example, sources
       "prod-datapipe-02" and "prod-datapipe-03" might both be part of "prod-datapipe"
   :param component: The part or component of the affected system that is broken.
   :param class_type: The class/type of the event.
   :param images: List of images to include. Each dictionary in the list accepts the following keys:
       `src`: The source (URL) of the image being attached to the incident. This image must be served via
       HTTPS.
       `href`: [Optional] URL to make the image a clickable link.
       `alt`: [Optional] Alternative text for the image.
   :param links: List of links to include. Each dictionary in the list accepts the following keys:
       `href`: URL of the link to be attached.
       `text`: [Optional] Plain text that describes the purpose of the link, and can be used as the
       link's text.
   :param integration_key: PagerDuty Events API token
   :param pagerduty_events_conn_id: connection that has PagerDuty integration key in the Pagerduty
    API token field

   .. py:attribute:: template_fields
      :value: ('summary', 'severity', 'source', 'action', 'dedup_key', 'custom_details', 'group', 'component',...

      

   .. py:method:: hook()

      Pagerduty Events Hook.


   .. py:method:: notify(context)

      Send a alert to a pagerduty event v2 API.



.. py:data:: send_pagerduty_notification

   

