:py:mod:`airflow.providers.papermill.operators.papermill`
=========================================================

.. py:module:: airflow.providers.papermill.operators.papermill


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.papermill.operators.papermill.NoteBook
   airflow.providers.papermill.operators.papermill.PapermillOperator




.. py:class:: NoteBook

   Bases: :py:obj:`airflow.lineage.entities.File`

   Jupyter notebook

   .. py:attribute:: type_hint
      :annotation: :Optional[str] = jupyter_notebook

      

   .. py:attribute:: parameters
      :annotation: :Optional[Dict]

      

   .. py:attribute:: meta_schema
      :annotation: :str

      


.. py:class:: PapermillOperator(*, input_nb = None, output_nb = None, parameters = None, kernel_name = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes a jupyter notebook through papermill that is annotated with parameters

   :param input_nb: input notebook (can also be a NoteBook or a File inlet)
   :param output_nb: output notebook (can also be a NoteBook or File outlet)
   :param parameters: the notebook parameters to set
   :param kernel_name: (optional) name of kernel to execute the notebook against
       (ignores kernel name in the notebook document metadata)

   .. py:attribute:: supports_lineage
      :annotation: = True

      

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['input_nb', 'output_nb', 'parameters', 'kernel_name']

      

   .. py:method:: execute(self, context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



