:py:mod:`airflow.providers.papermill.hooks.kernel`
==================================================

.. py:module:: airflow.providers.papermill.hooks.kernel


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.papermill.hooks.kernel.KernelConnection
   airflow.providers.papermill.hooks.kernel.KernelHook
   airflow.providers.papermill.hooks.kernel.RemoteKernelManager
   airflow.providers.papermill.hooks.kernel.RemoteKernelEngine



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.papermill.hooks.kernel.register_remote_kernel_engine



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.papermill.hooks.kernel.JUPYTER_KERNEL_SHELL_PORT
   airflow.providers.papermill.hooks.kernel.JUPYTER_KERNEL_IOPUB_PORT
   airflow.providers.papermill.hooks.kernel.JUPYTER_KERNEL_STDIN_PORT
   airflow.providers.papermill.hooks.kernel.JUPYTER_KERNEL_CONTROL_PORT
   airflow.providers.papermill.hooks.kernel.JUPYTER_KERNEL_HB_PORT
   airflow.providers.papermill.hooks.kernel.REMOTE_KERNEL_ENGINE


.. py:data:: JUPYTER_KERNEL_SHELL_PORT
   :value: 60316

   

.. py:data:: JUPYTER_KERNEL_IOPUB_PORT
   :value: 60317

   

.. py:data:: JUPYTER_KERNEL_STDIN_PORT
   :value: 60318

   

.. py:data:: JUPYTER_KERNEL_CONTROL_PORT
   :value: 60319

   

.. py:data:: JUPYTER_KERNEL_HB_PORT
   :value: 60320

   

.. py:data:: REMOTE_KERNEL_ENGINE
   :value: 'remote_kernel_engine'

   

.. py:class:: KernelConnection


   Class to represent kernel connection object.

   .. py:attribute:: ip
      :type: str

      

   .. py:attribute:: shell_port
      :type: int

      

   .. py:attribute:: iopub_port
      :type: int

      

   .. py:attribute:: stdin_port
      :type: int

      

   .. py:attribute:: control_port
      :type: int

      

   .. py:attribute:: hb_port
      :type: int

      

   .. py:attribute:: session_key
      :type: str

      


.. py:class:: KernelHook(kernel_conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   The KernelHook can be used to interact with remote jupyter kernel.

   Takes kernel host/ip from connection and refers to jupyter kernel ports and session_key
    from ``extra`` field.

   :param kernel_conn_id: connection that has kernel host/ip

   .. py:attribute:: conn_name_attr
      :value: 'kernel_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'jupyter_kernel_default'

      

   .. py:attribute:: conn_type
      :value: 'jupyter_kernel'

      

   .. py:attribute:: hook_name
      :value: 'Jupyter Kernel'

      

   .. py:method:: get_conn()

      Return connection for the hook.



.. py:function:: register_remote_kernel_engine()

   Registers ``RemoteKernelEngine`` papermill engine.


.. py:class:: RemoteKernelManager(*args, **kwargs)


   Bases: :py:obj:`jupyter_client.AsyncKernelManager`

   Jupyter kernel manager that connects to a remote kernel.

   .. py:property:: has_kernel
      :type: bool

      Has a kernel process been started that we are actively managing.


   .. py:attribute:: session_key

      

   .. py:method:: shutdown_kernel(now = False, restart = False)


   .. py:method:: client(**kwargs)

      Create a client configured to connect to our kernel.



.. py:class:: RemoteKernelEngine


   Bases: :py:obj:`papermill.engines.NBClientEngine`

   Papermill engine to use ``RemoteKernelManager`` to connect to remote kernel and execute notebook.

   .. py:method:: execute_managed_notebook(nb_man, kernel_name, log_output=False, stdout_file=None, stderr_file=None, start_timeout=60, execution_timeout=None, **kwargs)
      :classmethod:

      Performs the actual execution of the parameterized notebook locally.



