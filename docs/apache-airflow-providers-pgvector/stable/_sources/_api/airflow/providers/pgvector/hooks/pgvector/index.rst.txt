:py:mod:`airflow.providers.pgvector.hooks.pgvector`
===================================================

.. py:module:: airflow.providers.pgvector.hooks.pgvector


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.pgvector.hooks.pgvector.PgVectorHook




.. py:class:: PgVectorHook(*args, **kwargs)


   Bases: :py:obj:`airflow.providers.postgres.hooks.postgres.PostgresHook`

   Extend PostgresHook for working with PostgreSQL and pgvector extension for vector data types.

   .. py:method:: create_table(table_name, columns, if_not_exists = True)

      Create a table in the Postgres database.

      :param table_name: The name of the table to create.
      :param columns: A list of column definitions for the table.
      :param if_not_exists: If True, only create the table if it does not already exist.


   .. py:method:: create_extension(extension_name, if_not_exists = True)

      Create a PostgreSQL extension.

      :param extension_name: The name of the extension to create.
      :param if_not_exists: If True, only create the extension if it does not already exist.


   .. py:method:: drop_table(table_name, if_exists = True)

      Drop a table from the Postgres database.

      :param table_name: The name of the table to drop.
      :param if_exists: If True, only drop the table if it exists.


   .. py:method:: truncate_table(table_name, restart_identity = True)

      Truncate a table, removing all rows.

      :param table_name: The name of the table to truncate.
      :param restart_identity: If True, restart the serial sequence if the table has one.



