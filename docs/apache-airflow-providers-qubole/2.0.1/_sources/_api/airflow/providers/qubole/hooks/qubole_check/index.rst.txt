:py:mod:`airflow.providers.qubole.hooks.qubole_check`
=====================================================

.. py:module:: airflow.providers.qubole.hooks.qubole_check


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.qubole.hooks.qubole_check.QuboleCheckHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.qubole.hooks.qubole_check.isint
   airflow.providers.qubole.hooks.qubole_check.isfloat
   airflow.providers.qubole.hooks.qubole_check.isbool
   airflow.providers.qubole.hooks.qubole_check.parse_first_row



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.qubole.hooks.qubole_check.log
   airflow.providers.qubole.hooks.qubole_check.COL_DELIM
   airflow.providers.qubole.hooks.qubole_check.ROW_DELIM


.. py:data:: log
   

   

.. py:data:: COL_DELIM
   :annotation: = 	

   

.. py:data:: ROW_DELIM
   :annotation: = 


   

.. py:function:: isint(value) -> bool

   Whether Qubole column are integer


.. py:function:: isfloat(value) -> bool

   Whether Qubole column are float


.. py:function:: isbool(value) -> bool

   Whether Qubole column are boolean


.. py:function:: parse_first_row(row_list) -> List[Union[bool, float, int, str]]

   Parse Qubole first record list


.. py:class:: QuboleCheckHook(context, *args, **kwargs)

   Bases: :py:obj:`airflow.providers.qubole.hooks.qubole.QuboleHook`, :py:obj:`airflow.hooks.dbapi.DbApiHook`

   Qubole check hook

   .. py:method:: handle_failure_retry(context) -> None
      :staticmethod:

      Handle retries in case of failures


   .. py:method:: get_first(self, sql)

      Get Qubole query first record list


   .. py:method:: get_query_results(self) -> Optional[str]

      Get Qubole query result



