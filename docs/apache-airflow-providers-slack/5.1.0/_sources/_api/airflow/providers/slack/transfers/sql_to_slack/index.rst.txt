:py:mod:`airflow.providers.slack.transfers.sql_to_slack`
========================================================

.. py:module:: airflow.providers.slack.transfers.sql_to_slack


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.slack.transfers.sql_to_slack.SqlToSlackOperator




.. py:class:: SqlToSlackOperator(*, sql, sql_conn_id, sql_hook_params = None, slack_conn_id = None, slack_webhook_token = None, slack_channel = None, slack_message, results_df_name = 'results_df', parameters = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes an SQL statement in a given SQL connection and sends the results to Slack. The results of the
   query are rendered into the 'slack_message' parameter as a Pandas dataframe using a JINJA variable called
   '{{ results_df }}'. The 'results_df' variable name can be changed by specifying a different
   'results_df_name' parameter. The Tabulate library is added to the JINJA environment as a filter to
   allow the dataframe to be rendered nicely. For example, set 'slack_message' to {{ results_df |
   tabulate(tablefmt="pretty", headers="keys") }} to send the results to Slack as an ascii rendered table.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SqlToSlackOperator`

   :param sql: The SQL query to be executed (templated)
   :param slack_message: The templated Slack message to send with the data returned from the SQL connection.
       You can use the default JINJA variable {{ results_df }} to access the pandas dataframe containing the
       SQL results
   :param sql_conn_id: reference to a specific database.
   :param sql_hook_params: Extra config params to be passed to the underlying hook.
          Should match the desired hook constructor params.
   :param slack_conn_id: The connection id for Slack.
   :param slack_webhook_token: The token to use to authenticate to Slack. If this is not provided, the
       'slack_conn_id' attribute needs to be specified in the 'password' field.
   :param slack_channel: The channel to send message. Override default from Slack connection.
   :param results_df_name: The name of the JINJA template's dataframe variable, default is 'results_df'
   :param parameters: The parameters to pass to the SQL query

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sql', 'slack_message']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = ['.sql', '.jinja', '.j2']

      

   .. py:attribute:: template_fields_renderers
      

      

   .. py:attribute:: times_rendered
      :annotation: = 0

      

   .. py:method:: render_template_fields(context, jinja_env=None)

      Template all attributes listed in template_fields.

      This mutates the attributes in-place and is irreversible.

      :param context: Dict with values to apply on content
      :param jinja_env: Jinja environment


   .. py:method:: execute(context)

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



