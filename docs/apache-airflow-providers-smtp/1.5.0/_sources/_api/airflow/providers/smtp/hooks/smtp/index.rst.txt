:py:mod:`airflow.providers.smtp.hooks.smtp`
===========================================

.. py:module:: airflow.providers.smtp.hooks.smtp

.. autoapi-nested-parse::

   Search in emails for a specific attachment and also to download it.

   It uses the smtplib library that is already integrated in python 3.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.smtp.hooks.smtp.SmtpHook




.. py:class:: SmtpHook(smtp_conn_id = default_conn_name)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   This hook connects to a mail server by using the smtp protocol.

   .. note:: Please call this Hook as context manager via `with`
       to automatically open and close the connection to the mail server.

   :param smtp_conn_id: The :ref:`smtp connection id <howto/connection:smtp>`
       that contains the information used to authenticate the client.

   .. py:property:: conn
      :type: airflow.models.connection.Connection


   .. py:property:: smtp_retry_limit
      :type: int


   .. py:property:: from_email
      :type: str | None


   .. py:property:: smtp_user
      :type: str


   .. py:property:: smtp_password
      :type: str


   .. py:property:: smtp_starttls
      :type: bool


   .. py:property:: host
      :type: str


   .. py:property:: port
      :type: int


   .. py:property:: timeout
      :type: int


   .. py:property:: use_ssl
      :type: bool


   .. py:attribute:: conn_name_attr
      :value: 'smtp_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'smtp_default'

      

   .. py:attribute:: conn_type
      :value: 'smtp'

      

   .. py:attribute:: hook_name
      :value: 'SMTP'

      

   .. py:method:: __enter__()


   .. py:method:: __exit__(exc_type, exc_val, exc_tb)


   .. py:method:: get_conn()

      Login to the smtp server.

      .. note:: Please call this Hook as context manager via `with`
          to automatically open and close the connection to the smtp server.

      :return: an authorized SmtpHook object.


   .. py:method:: get_connection_form_widgets()
      :classmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: test_connection()

      Test SMTP connectivity from UI.


   .. py:method:: send_email_smtp(*, to, subject, html_content, from_email = None, files = None, dryrun = False, cc = None, bcc = None, mime_subtype = 'mixed', mime_charset = 'utf-8', custom_headers = None, **kwargs)

      Send an email with html content.

      :param to: Recipient email address or list of addresses.
      :param subject: Email subject.
      :param html_content: Email body in HTML format.
      :param from_email: Sender email address. If it's None, the hook will check if there is an email
          provided in the connection, and raises an exception if not.
      :param files: List of file paths to attach to the email.
      :param dryrun: If True, the email will not be sent, but all other actions will be performed.
      :param cc: Carbon copy recipient email address or list of addresses.
      :param bcc: Blind carbon copy recipient email address or list of addresses.
      :param mime_subtype: MIME subtype of the email.
      :param mime_charset: MIME charset of the email.
      :param custom_headers: Dictionary of custom headers to include in the email.
      :param kwargs: Additional keyword arguments.

      >>> send_email_smtp(
              'test@example.com', 'foo', '<b>Foo</b> bar', ['/dev/null'], dryrun=True
          )


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behaviour.



