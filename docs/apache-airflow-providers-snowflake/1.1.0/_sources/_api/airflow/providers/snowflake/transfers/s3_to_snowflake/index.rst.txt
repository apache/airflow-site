:mod:`airflow.providers.snowflake.transfers.s3_to_snowflake`
============================================================

.. py:module:: airflow.providers.snowflake.transfers.s3_to_snowflake

.. autoapi-nested-parse::

   This module contains AWS S3 to Snowflake operator.



Module Contents
---------------

.. py:class:: S3ToSnowflakeOperator(*, s3_keys: Optional[list] = None, table: str, stage: str, prefix: Optional[str] = None, file_format: str, schema: str, columns_array: Optional[list] = None, warehouse: Optional[str] = None, database: Optional[str] = None, autocommit: bool = True, snowflake_conn_id: str = 'snowflake_default', role: Optional[str] = None, authenticator: Optional[str] = None, session_parameters: Optional[dict] = None, **kwargs)

   Bases: :class:`airflow.models.BaseOperator`

   Executes an COPY command to load files from s3 to Snowflake

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:S3ToSnowflakeOperator`

   :param s3_keys: reference to a list of S3 keys
   :type s3_keys: list
   :param table: reference to a specific table in snowflake database
   :type table: str
   :param schema: name of schema (will overwrite schema defined in
       connection)
   :type schema: str
   :param stage: reference to a specific snowflake stage. If the stage's schema is not the same as the
       table one, it must be specified
   :type stage: str
   :param prefix: cloud storage location specified to limit the set of files to load
   :type prefix: str
   :param file_format: reference to a specific file format
   :type file_format: str
   :param warehouse: name of warehouse (will overwrite any warehouse
       defined in the connection's extra JSON)
   :type warehouse: str
   :param database: reference to a specific database in Snowflake connection
   :type database: str
   :param columns_array: reference to a specific columns array in snowflake database
   :type columns_array: list
   :param snowflake_conn_id: reference to a specific snowflake connection
   :type snowflake_conn_id: str
   :param role: name of role (will overwrite any role defined in
       connection's extra JSON)
   :type role: str
   :param authenticator: authenticator for Snowflake.
       'snowflake' (default) to use the internal Snowflake authenticator
       'externalbrowser' to authenticate using your web browser and
       Okta, ADFS or any other SAML 2.0-compliant identify provider
       (IdP) that has been defined for your account
       'https://<your_okta_account_name>.okta.com' to authenticate
       through native Okta.
   :type authenticator: str
   :param session_parameters: You can set session-level parameters at
       the time you connect to Snowflake
   :type session_parameters: dict

   
   .. method:: execute(self, context: Any)




