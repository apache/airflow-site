:py:mod:`airflow.providers.snowflake.triggers.snowflake_trigger`
================================================================

.. py:module:: airflow.providers.snowflake.triggers.snowflake_trigger


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.snowflake.triggers.snowflake_trigger.SnowflakeSqlApiTrigger




.. py:class:: SnowflakeSqlApiTrigger(poll_interval, query_ids, snowflake_conn_id, token_life_time, token_renewal_delta)


   Bases: :py:obj:`airflow.triggers.base.BaseTrigger`

   Fetch the status for the query ids passed.

   :param poll_interval:  polling period in seconds to check for the status
   :param query_ids: List of Query ids to run and poll for the status
   :param snowflake_conn_id: Reference to Snowflake connection id
   :param token_life_time: lifetime of the JWT Token in timedelta
   :param token_renewal_delta: Renewal time of the JWT Token in timedelta

   .. py:method:: serialize()

      Serializes SnowflakeSqlApiTrigger arguments and classpath.


   .. py:method:: run()
      :async:

      Wait for the query the snowflake query to complete.


   .. py:method:: get_query_status(query_id)
      :async:

      Return True if the SQL query is still running otherwise return False.



