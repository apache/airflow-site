:py:mod:`airflow.providers.snowflake.operators.snowpark`
========================================================

.. py:module:: airflow.providers.snowflake.operators.snowpark


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.snowflake.operators.snowpark.SnowparkOperator




.. py:class:: SnowparkOperator(*, snowflake_conn_id = 'snowflake_default', python_callable, op_args = None, op_kwargs = None, templates_dict = None, templates_exts = None, show_return_value_in_logs = True, warehouse = None, database = None, schema = None, role = None, authenticator = None, session_parameters = None, **kwargs)


   Bases: :py:obj:`airflow.operators.python.PythonOperator`

   Executes a Python function with Snowpark Python code.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SnowparkOperator`

   :param snowflake_conn_id: Reference to
       :ref:`Snowflake connection id<howto/connection:snowflake>`
   :param python_callable: A reference to an object that is callable
   :param op_args: a list of positional arguments that will get unpacked when
       calling your callable
   :param op_kwargs: a dictionary of keyword arguments that will get unpacked
       in your function
   :param templates_dict: a dictionary where the values are templates that
       will get templated by the Airflow engine sometime between
       ``__init__`` and ``execute`` takes place and are made available
       in your callable's context after the template has been applied. (templated)
   :param templates_exts: a list of file extensions to resolve while
       processing templated fields, for examples ``['.sql', '.hql']``
   :param show_return_value_in_logs: a bool value whether to show return_value
       logs. Defaults to True, which allows return value log output.
       It can be set to False to prevent log output of return value when you return huge data
       such as transmission a large amount of XCom to TaskAPI.
   :param warehouse: name of warehouse (will overwrite any warehouse
       defined in the connection's extra JSON)
   :param database: name of database (will overwrite database defined
       in connection)
   :param schema: name of schema (will overwrite schema defined in
       connection)
   :param role: name of role (will overwrite any role defined in
       connection's extra JSON)
   :param authenticator: authenticator for Snowflake.
       'snowflake' (default) to use the internal Snowflake authenticator
       'externalbrowser' to authenticate using your web browser and
       Okta, ADFS or any other SAML 2.0-compliant identify provider
       (IdP) that has been defined for your account
       'https://<your_okta_account_name>.okta.com' to authenticate
       through native Okta.
   :param session_parameters: You can set session-level parameters at
       the time you connect to Snowflake

   .. py:method:: execute_callable()

      Call the python callable with the given arguments.

      :return: the return value of the call.



