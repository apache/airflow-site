:py:mod:`airflow.providers.sqlite.operators.sqlite`
===================================================

.. py:module:: airflow.providers.sqlite.operators.sqlite


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.sqlite.operators.sqlite.SqliteOperator




.. py:class:: SqliteOperator(*, sql: Union[str, List[str]], sqlite_conn_id: str = 'sqlite_default', parameters: Optional[Union[Mapping, Iterable]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes sql code in a specific Sqlite database

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:SqliteOperator`

   :param sql: the sql code to be executed. Can receive a str representing a
       sql statement, a list of str (sql statements), or reference to a template file.
       Template reference are recognized by str ending in '.sql'
       (templated)
   :type sql: str or list[str]
   :param sqlite_conn_id: reference to a specific sqlite database
   :type sqlite_conn_id: str
   :param parameters: (optional) the parameters to render the SQL query with.
   :type parameters: dict or iterable

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sql']

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str] = ['.sql']

      

   .. py:attribute:: ui_color
      :annotation: = #cdaaed

      

   .. py:method:: execute(self, context: Mapping[Any, Any]) -> None

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



