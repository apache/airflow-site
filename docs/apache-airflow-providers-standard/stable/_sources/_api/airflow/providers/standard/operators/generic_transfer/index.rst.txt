:py:mod:`airflow.providers.standard.operators.generic_transfer`
===============================================================

.. py:module:: airflow.providers.standard.operators.generic_transfer


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.standard.operators.generic_transfer.GenericTransfer




.. py:class:: GenericTransfer(*, sql, destination_table, source_conn_id, source_hook_params = None, destination_conn_id, destination_hook_params = None, preoperator = None, insert_args = None, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Moves data from a connection to another.

   Assuming that they both provide the required methods in their respective hooks.
   The source hook needs to expose a `get_records` method, and the destination a
   `insert_rows` method.

   This is meant to be used on small-ish datasets that fit in memory.

   :param sql: SQL query to execute against the source database. (templated)
   :param destination_table: target table. (templated)
   :param source_conn_id: source connection. (templated)
   :param destination_conn_id: destination connection. (templated)
   :param preoperator: sql statement or list of statements to be
       executed prior to loading the data. (templated)
   :param insert_args: extra params for `insert_rows` method.

   .. py:attribute:: template_fields
      :type: collections.abc.Sequence[str]
      :value: ('source_conn_id', 'destination_conn_id', 'sql', 'destination_table', 'preoperator', 'insert_args')

      

   .. py:attribute:: template_ext
      :type: collections.abc.Sequence[str]
      :value: ('.sql', '.hql')

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: ui_color
      :value: '#b0f07c'

      

   .. py:method:: get_hook(conn_id, hook_params = None)
      :classmethod:

      Return default hook for this connection id.

      :param conn_id: connection id
      :param hook_params: hook parameters
      :return: default hook for this connection


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



