:py:mod:`airflow.providers.teradata.hooks.teradata`
===================================================

.. py:module:: airflow.providers.teradata.hooks.teradata

.. autoapi-nested-parse::

   An Airflow Hook for interacting with Teradata SQL Server.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.teradata.hooks.teradata.TeradataHook




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.teradata.hooks.teradata.PARAM_TYPES


.. py:data:: PARAM_TYPES

   

.. py:class:: TeradataHook(*args, database = None, **kwargs)


   Bases: :py:obj:`airflow.providers.common.sql.hooks.sql.DbApiHook`

   General hook for interacting with Teradata SQL Database.

   This module contains basic APIs to connect to and interact with Teradata SQL Database. It uses teradatasql
   client internally as a database driver for connecting to Teradata database. The config parameters like
   Teradata DB Server URL, username, password and database name are fetched from the predefined connection
   config connection_id. It raises an airflow error if the given connection id doesn't exist.

   You can also specify ssl parameters in the extra field of your connection
   as ``{"sslmode": "require", "sslcert": "/path/to/cert.pem", etc}``.

   .. seealso::
       - :ref:`Teradata API connection <howto/connection:teradata>`

   :param args: passed to DbApiHook
   :param database: The Teradata database to connect to.
   :param kwargs: passed to DbApiHook

   .. py:attribute:: conn_name_attr
      :value: 'teradata_conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'teradata_default'

      

   .. py:attribute:: supports_autocommit
      :value: True

      

   .. py:attribute:: supports_executemany
      :value: True

      

   .. py:attribute:: conn_type
      :value: 'teradata'

      

   .. py:attribute:: hook_name
      :value: 'Teradata'

      

   .. py:attribute:: placeholder
      :type: str
      :value: '?'

      

   .. py:method:: get_conn()

      Create and return a Teradata Connection object using teradatasql client.

      Establishes connection to a Teradata SQL database using config corresponding to teradata_conn_id.

      :return: a Teradata connection object


   .. py:method:: bulk_insert_rows(table, rows, target_fields = None, commit_every = 5000)

      Use :func:`insert_rows` instead, this is deprecated.

      Insert bulk of records into Teradata SQL Database.

      This uses prepared statements via `executemany()`. For best performance,
      pass in `rows` as an iterator.

      :param table: target Teradata database table, use dot notation to target a
          specific database
      :param rows: the rows to insert into the table
      :param target_fields: the names of the columns to fill in the table, default None.
          If None, each row should have some order as table columns name
      :param commit_every: the maximum number of rows to insert in one transaction
          Default 5000. Set greater than 0. Set 1 to insert each row in each transaction


   .. py:method:: get_sqlalchemy_engine(engine_kwargs=None)

      Return a connection object using sqlalchemy.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Return custom field behaviour.


   .. py:method:: callproc(identifier, autocommit = False, parameters = None)

      Call the stored procedure identified by the provided string.

      Any OUT parameters must be provided with a value of either the
      expected Python type (e.g., `int`) or an instance of that type.

      :param identifier: stored procedure name
      :param autocommit: What to set the connection's autocommit setting to
          before executing the query.
      :param parameters: The `IN`, `OUT` and `INOUT` parameters for Teradata
          stored procedure

      The return value is a list or mapping that includes parameters in
      both directions; the actual return type depends on the type of the
      provided `parameters` argument.




