:py:mod:`airflow.providers.teradata.transfers.teradata_to_teradata`
===================================================================

.. py:module:: airflow.providers.teradata.transfers.teradata_to_teradata


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.teradata.transfers.teradata_to_teradata.TeradataToTeradataOperator




.. py:class:: TeradataToTeradataOperator(*, dest_teradata_conn_id, destination_table, source_teradata_conn_id, sql, sql_params = None, rows_chunk = 5000, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Moves data from Teradata source database to Teradata destination database.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:TeradataToTeradataOperator`

   :param dest_teradata_conn_id: destination Teradata connection.
   :param destination_table: destination table to insert rows.
   :param source_teradata_conn_id: :ref:`Source Teradata connection <howto/connection:Teradata>`.
   :param sql: SQL query to execute against the source Teradata database
   :param sql_params: Parameters to use in sql query.
   :param rows_chunk: number of rows per chunk to commit.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('sql', 'sql_params')

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.sql',)

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: ui_color
      :value: '#e07c24'

      

   .. py:method:: src_hook()


   .. py:method:: dest_hook()


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



