:py:mod:`airflow.providers.weaviate.hooks.weaviate`
===================================================

.. py:module:: airflow.providers.weaviate.hooks.weaviate


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.WeaviateHook




.. py:class:: WeaviateHook(conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Weaviate database to store vectors. This hook uses the `conn_id`.

   :param conn_id: The connection id to use when connecting to Weaviate. <howto/connection:weaviate>

   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'weaviate_default'

      

   .. py:attribute:: conn_type
      :value: 'weaviate'

      

   .. py:attribute:: hook_name
      :value: 'Weaviate'

      

   .. py:method:: get_connection_form_widgets()
      :staticmethod:

      Returns connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :staticmethod:

      Returns custom field behaviour.


   .. py:method:: get_client()


   .. py:method:: test_connection()


   .. py:method:: create_class(class_json)

      Create a new class.


   .. py:method:: create_schema(schema_json)

      Create a new Schema.

      Instead of adding classes one by one , you can upload a full schema in JSON format at once.

      :param schema_json: The schema to create


   .. py:method:: batch_data(class_name, data, batch_config_params = None)


   .. py:method:: delete_class(class_name)

      Delete an existing class.


   .. py:method:: query_with_vector(embeddings, class_name, *properties, certainty = 0.7, limit = 1)

      Query weaviate database with near vectors.

      This method uses a vector search using a Get query. we are using a with_near_vector to provide
      weaviate with a query with vector itself. This is needed for query a  Weaviate class with a custom,
      external vectorizer. Weaviate then converts this into a vector through the inference API
      (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: query_without_vector(search_text, class_name, *properties, limit = 1)

      Query using near text.

      This method uses a vector search using a Get query. we are using a nearText operator to provide
      weaviate with a query search_text. Weaviate then converts this into a vector through the inference
      API (OpenAI in this particular example) and uses that vector as the basis for a vector search.



