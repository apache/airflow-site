:py:mod:`airflow.providers.weaviate.hooks.weaviate`
===================================================

.. py:module:: airflow.providers.weaviate.hooks.weaviate


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.WeaviateHook



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.check_http_error_is_retryable



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.weaviate.hooks.weaviate.ExitingSchemaOptions
   airflow.providers.weaviate.hooks.weaviate.HTTP_RETRY_STATUS_CODE
   airflow.providers.weaviate.hooks.weaviate.REQUESTS_EXCEPTIONS_TYPES


.. py:data:: ExitingSchemaOptions

   

.. py:data:: HTTP_RETRY_STATUS_CODE
   :value: [429, 500, 503, 504]

   

.. py:data:: REQUESTS_EXCEPTIONS_TYPES
   :value: ()

   

.. py:function:: check_http_error_is_retryable(exc)


.. py:class:: WeaviateHook(conn_id = default_conn_name, *args, **kwargs)


   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   Interact with Weaviate database to store vectors. This hook uses the 'conn_id'.

   :param conn_id: The connection id to use when connecting to Weaviate. <howto/connection:weaviate>

   .. py:attribute:: conn_name_attr
      :value: 'conn_id'

      

   .. py:attribute:: default_conn_name
      :value: 'weaviate_default'

      

   .. py:attribute:: conn_type
      :value: 'weaviate'

      

   .. py:attribute:: hook_name
      :value: 'Weaviate'

      

   .. py:method:: get_connection_form_widgets()
      :classmethod:

      Return connection widgets to add to connection form.


   .. py:method:: get_ui_field_behaviour()
      :classmethod:

      Return custom field behaviour.


   .. py:method:: get_conn()

      Return connection for the hook.


   .. py:method:: conn()

      Returns a Weaviate client.


   .. py:method:: test_connection()


   .. py:method:: create_collection(name, **kwargs)

      Create a new collection.


   .. py:method:: get_collection(name)

      Get a collection by name.

      :param name: The name of the collection to get.


   .. py:method:: delete_collections(collection_names, if_error = 'stop')

      Delete all or specific collections if collection_names are provided.

      :param collection_names: list of collection names to be deleted.
      :param if_error: define the actions to be taken if there is an error while deleting a collection, possible
       options are `stop` and `continue`
      :return: if `if_error=continue` return list of collections which we failed to delete.
          if `if_error=stop` returns None.


   .. py:method:: get_collection_configuration(collection_name)

      Get the collection configuration from Weaviate.

      :param collection_name: The collection for which to return the collection configuration.


   .. py:method:: update_collection_configuration(collection_name, **kwargs)

      Update the collection configuration.


   .. py:method:: batch_data(collection_name, data, vector_col = 'Vector', uuid_col = 'id', retry_attempts_per_object = 5, references = None)

      Add multiple objects or object references at once into weaviate.

      :param collection_name: The name of the collection that objects belongs to.
      :param data: list or dataframe of objects we want to add.
      :param vector_col: name of the column containing the vector.
      :param uuid_col: Name of the column containing the UUID.
      :param retry_attempts_per_object: number of time to try in case of failure before giving up.
      :param references: The references of the object to be added as a dictionary. Use `wvc.Reference.to` to create the correct values in the dict.


   .. py:method:: query_with_vector(embeddings, collection_name, properties, certainty = 0.7, limit = 1, **kwargs)

      Query weaviate database with near vectors.

      This method uses a vector search using a Get query. we are using a with_near_vector to provide
      weaviate with a query with vector itself. This is needed for query a Weaviate class with a custom,
      external vectorizer. Weaviate then converts this into a vector through the inference API
      (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: query_with_text(search_text, collection_name, properties, limit = 1, **kwargs)

      Query using near text.

      This method uses a vector search using a Get query. we are using a nearText operator to provide
      weaviate with a query search_text. Weaviate then converts this into a vector through the inference
      API (OpenAI in this particular example) and uses that vector as the basis for a vector search.


   .. py:method:: create_object(data_object, collection_name, **kwargs)

      Create a new object.

      :param data_object: Object to be added. If type is str it should be either a URL or a file.
      :param collection_name: Collection name associated with the object given.
      :param kwargs: Additional parameters to be passed to weaviate_client.data_object.create()


   .. py:method:: get_or_create_object(collection_name, data_object, vector = None, **kwargs)

      Get or Create a new object.

      Returns the object if already exists, return UUID if not

      :param collection_name: Collection name associated with the object given..
      :param data_object: Object to be added.
      :param vector: Vector associated with the object given. This argument is only used when creating object.
      :param kwargs: parameters to be passed to collection.data.fetch_object_by_id() or
          collection.data.fetch_objects()


   .. py:method:: get_object(collection_name, **kwargs)

      Get objects or an object from weaviate.

      :param kwargs: parameters to be passed to collection.query.fetch_objects()


   .. py:method:: get_all_objects(collection_name, after = None, as_dataframe = False, **kwargs)

      Get all objects from weaviate.

      if after is provided, it will be used as the starting point for the listing.

      :param after: uuid of the object to start listing from
      :param as_dataframe: if True, returns a pandas dataframe
      :param kwargs: parameters to be passed to weaviate_client.data_object.get()


   .. py:method:: delete_object(collection_name, uuid)

      Delete an object from weaviate.

      :param collection_name: Collection name associated with the object given.
      :param uuid: uuid of the object to be deleted


   .. py:method:: update_object(collection_name, uuid, properties = None, **kwargs)

      Update an object in weaviate.

      :param collection_name: Collection name associated with the object given.
      :param uuid: uuid of the object to be updated
      :param properties: The properties of the object.
      :param kwargs: Optional parameters to be passed to collection.data.update()


   .. py:method:: replace_object(collection_name, uuid, properties, references = None, **kwargs)

      Replace an object in weaviate.

      :param collection_name: Collection name associated with the object given.
      :param uuid: uuid of the object to be updated
      :param properties: The properties of the object.
      :param references: Any references to other objects in Weaviate.
      :param kwargs: Optional parameters to be passed to collection.data.replace()


   .. py:method:: object_exists(collection_name, uuid)

      Check if an object exists in weaviate.

      :param collection_name: Collection name associated with the object given.
      :param uuid: The UUID of the object that may or may not exist within Weaviate.


   .. py:method:: create_or_replace_document_objects(data, collection_name, document_column, existing = 'skip', uuid_column = None, vector_column = 'Vector', verbose = False)

      create or replace objects belonging to documents.

      In real-world scenarios, information sources like Airflow docs, Stack Overflow, or other issues
      are considered 'documents' here. It's crucial to keep the database objects in sync with these sources.
      If any changes occur in these documents, this function aims to reflect those changes in the database.

      .. note::

          This function assumes responsibility for identifying changes in documents, dropping relevant
          database objects, and recreating them based on updated information. It's crucial to handle this
          process with care, ensuring backups and validation are in place to prevent data loss or
          inconsistencies.

      Provides users with multiple ways of dealing with existing values.
      replace: replace the existing objects with new objects. This option requires to identify the
      objects belonging to a document. which by default is done by using document_column field.
      skip: skip the existing objects and only add the missing objects of a document.
      error: raise an error if an object belonging to a existing document is tried to be created.

      :param data: A single pandas DataFrame or a list of dicts to be ingested.
      :param colleciton_name: Name of the collection in Weaviate schema where data is to be ingested.
      :param existing: Strategy for handling existing data: 'skip', or 'replace'. Default is 'skip'.
      :param document_column: Column in DataFrame that identifying source document.
      :param uuid_column: Column with pre-generated UUIDs. If not provided, UUIDs will be generated.
      :param vector_column: Column with embedding vectors for pre-embedded data.
      :param verbose: Flag to enable verbose output during the ingestion process.
      :return: list of UUID which failed to create



