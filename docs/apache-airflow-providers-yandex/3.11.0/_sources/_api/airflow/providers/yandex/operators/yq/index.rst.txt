:py:mod:`airflow.providers.yandex.operators.yq`
===============================================

.. py:module:: airflow.providers.yandex.operators.yq


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.yandex.operators.yq.YQExecuteQueryOperator




.. py:class:: YQExecuteQueryOperator(*, name = None, folder_id = None, yandex_conn_id = None, public_ssh_key = None, service_account_id = None, sql, **kwargs)


   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes sql code using Yandex Query service.

   :param sql: the SQL code to be executed as a single string
   :param name: name of the query in YandexQuery
   :param folder_id: cloud folder id where to create query
   :param yandex_conn_id: Airflow connection ID to get parameters from

   .. py:attribute:: operator_extra_links
      :value: ()

      

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('sql',)

      

   .. py:attribute:: template_fields_renderers

      

   .. py:attribute:: template_ext
      :type: Sequence[str]
      :value: ('.sql',)

      

   .. py:attribute:: ui_color
      :value: '#ededed'

      

   .. py:method:: hook()

      Get valid hook.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: on_kill()

      Override this method to clean up subprocesses when a task instance gets killed.

      Any use of the threading, subprocess or multiprocessing module within an
      operator needs to be cleaned up, or it will leave ghost processes behind.



