:py:mod:`airflow.decorators.task_group`
=======================================

.. py:module:: airflow.decorators.task_group

.. autoapi-nested-parse::

   Implements the ``@task_group`` function decorator.

   When the decorated function is called, a task group will be created to represent
   a collection of closely related tasks on the same DAG that should be grouped
   together when the DAG is displayed graphically.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   airflow.decorators.task_group.task_group



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.decorators.task_group.FParams
   airflow.decorators.task_group.FReturn
   airflow.decorators.task_group.task_group_sig


.. py:data:: FParams

   

.. py:data:: FReturn

   

.. py:data:: task_group_sig

   

.. py:function:: task_group(group_id: str | None = None, prefix_group_id: bool = True, parent_group: airflow.utils.task_group.TaskGroup | None = None, dag: airflow.models.dag.DAG | None = None, default_args: dict[str, Any] | None = None, tooltip: str = '', ui_color: str = 'CornflowerBlue', ui_fgcolor: str = '#000', add_suffix_on_collision: bool = False) -> Callable[[Callable[FParams, FReturn]], _TaskGroupFactory[FParams, FReturn]]
                 task_group(python_callable: Callable[FParams, FReturn]) -> _TaskGroupFactory[FParams, FReturn]

   Python TaskGroup decorator.

   This wraps a function into an Airflow TaskGroup. When used as the
   ``@task_group()`` form, all arguments are forwarded to the underlying
   TaskGroup class. Can be used to parametrize TaskGroup.

   :param python_callable: Function to decorate.
   :param tg_kwargs: Keyword arguments for the TaskGroup object.


