:py:mod:`airflow.sensors.filesystem`
====================================

.. py:module:: airflow.sensors.filesystem


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.sensors.filesystem.FileSensor




.. py:class:: FileSensor(*, filepath, fs_conn_id='fs_default', recursive=False, deferrable = conf.getboolean('operators', 'default_deferrable', fallback=False), start_from_trigger = False, trigger_kwargs = None, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a file or folder to land in a filesystem.

   If the path given is a directory then this sensor will only return true if
   any files exist inside it (either directly, or within a subdirectory)

   :param fs_conn_id: reference to the File (path)
       connection id
   :param filepath: File or folder name (relative to
       the base path set within the connection), can be a glob.
   :param recursive: when set to ``True``, enables recursive directory matching behavior of
       ``**`` in glob filepath parameter. Defaults to ``False``.
   :param deferrable: If waiting for completion, whether to defer the task until done,
       default is ``False``.
   :param start_from_trigger: Start the task directly from the triggerer without going into the worker.
   :param trigger_kwargs: The keyword arguments passed to the trigger when start_from_trigger is set to True
       during dynamic task mapping. This argument is not used in standard usage.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:FileSensor`



   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('filepath',)

      

   .. py:attribute:: ui_color
      :value: '#91818a'

      

   .. py:attribute:: start_trigger_args

      

   .. py:attribute:: start_from_trigger
      :value: False

      

   .. py:method:: path()


   .. py:method:: poke(context)

      Override when deriving this class.


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)



