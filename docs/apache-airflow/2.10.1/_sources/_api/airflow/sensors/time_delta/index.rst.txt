:py:mod:`airflow.sensors.time_delta`
====================================

.. py:module:: airflow.sensors.time_delta


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.sensors.time_delta.TimeDeltaSensor
   airflow.sensors.time_delta.TimeDeltaSensorAsync




.. py:class:: TimeDeltaSensor(*, delta, **kwargs)


   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a timedelta after the run's data interval.

   :param delta: time length to wait after the data interval before succeeding.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:TimeDeltaSensor`



   .. py:method:: poke(context)

      Override when deriving this class.



.. py:class:: TimeDeltaSensorAsync(*, end_from_trigger = False, delta, **kwargs)


   Bases: :py:obj:`TimeDeltaSensor`

   A deferrable drop-in replacement for TimeDeltaSensor.

   Will defers itself to avoid taking up a worker slot while it is waiting.

   :param delta: time length to wait after the data interval before succeeding.
   :param end_from_trigger: End the task directly from the triggerer without going into the worker.

   .. seealso::
       For more information on how to use this sensor, take a look at the guide:
       :ref:`howto/operator:TimeDeltaSensorAsync`


   .. py:method:: execute(context)

      Derive when creating an operator.

      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.


   .. py:method:: execute_complete(context, event = None)

      Handle the event when the trigger fires and return immediately.



