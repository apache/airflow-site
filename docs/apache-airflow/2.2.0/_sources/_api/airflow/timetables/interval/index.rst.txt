:mod:`airflow.timetables.interval`
==================================

.. py:module:: airflow.timetables.interval


Module Contents
---------------

.. data:: Delta
   

   

.. py:class:: CronDataIntervalTimetable(cron: str, timezone: Timezone)

   Bases: :class:`airflow.timetables.interval._DataIntervalTimetable`

   Timetable that schedules data intervals with a cron expression.

   This corresponds to ``schedule_interval=<cron>``, where ``<cron>`` is either
   a five/six-segment representation, or one of ``cron_presets``.

   The implementation extends on croniter to add timezone awareness. This is
   because croniter works only with naive timestamps, and cannot consider DST
   when determining the next/previous time.

   Don't pass ``@once`` in here; use ``OnceTimetable`` instead.

   .. attribute:: summary
      

      

   
   .. classmethod:: deserialize(cls, data: Dict[str, Any])



   
   .. method:: __eq__(self, other: Any)

      Both expression and timezone should match.

      This is only for testing purposes and should not be relied on otherwise.



   
   .. method:: serialize(self)



   
   .. method:: validate(self)



   
   .. method:: infer_manual_data_interval(self, *, run_after: DateTime)




.. py:class:: DeltaDataIntervalTimetable(delta: Delta)

   Bases: :class:`airflow.timetables.interval._DataIntervalTimetable`

   Timetable that schedules data intervals with a time delta.

   This corresponds to ``schedule_interval=<delta>``, where ``<delta>`` is
   either a ``datetime.timedelta`` or ``dateutil.relativedelta.relativedelta``
   instance.

   .. attribute:: summary
      

      

   
   .. classmethod:: deserialize(cls, data: Dict[str, Any])



   
   .. method:: __eq__(self, other: Any)

      The offset should match.

      This is only for testing purposes and should not be relied on otherwise.



   
   .. method:: serialize(self)



   
   .. method:: validate(self)



   
   .. method:: infer_manual_data_interval(self, run_after: DateTime)




