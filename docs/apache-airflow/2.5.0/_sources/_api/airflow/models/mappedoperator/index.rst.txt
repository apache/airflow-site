:py:mod:`airflow.models.mappedoperator`
=======================================

.. py:module:: airflow.models.mappedoperator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.models.mappedoperator.OperatorPartial
   airflow.models.mappedoperator.MappedOperator



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.models.mappedoperator.validate_mapping_kwargs
   airflow.models.mappedoperator.ensure_xcomarg_return_value



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.models.mappedoperator.ValidationSource


.. py:data:: ValidationSource
   

   

.. py:function:: validate_mapping_kwargs(op, func, value)


.. py:function:: ensure_xcomarg_return_value(arg)


.. py:class:: OperatorPartial

   An "intermediate state" returned by ``BaseOperator.partial()``.

   This only exists at DAG-parsing time; the only intended usage is for the
   user to call ``.expand()`` on it at some point (usually in a method chain) to
   create a ``MappedOperator`` to add into the DAG.

   .. py:attribute:: operator_class
      :annotation: :type[airflow.models.baseoperator.BaseOperator]

      

   .. py:attribute:: kwargs
      :annotation: :dict[str, Any]

      

   .. py:attribute:: params
      :annotation: :ParamsDict | dict

      

   .. py:method:: __attrs_post_init__()


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __del__()


   .. py:method:: expand(**mapped_kwargs)


   .. py:method:: expand_kwargs(kwargs, *, strict = True)



.. py:class:: MappedOperator(context=None)

   Bases: :py:obj:`airflow.models.abstractoperator.AbstractOperator`

   Object representing a mapped operator in a DAG.

   .. py:property:: task_type
      :type: str

      Implementing Operator.


   .. py:property:: operator_name
      :type: str


   .. py:property:: inherits_from_empty_operator
      :type: bool

      Implementing Operator.


   .. py:property:: roots
      :type: Sequence[airflow.models.abstractoperator.AbstractOperator]

      Implementing DAGNode.


   .. py:property:: leaves
      :type: Sequence[airflow.models.abstractoperator.AbstractOperator]

      Implementing DAGNode.


   .. py:property:: owner
      :type: str


   .. py:property:: email
      :type: None | str | Iterable[str]


   .. py:property:: trigger_rule
      :type: airflow.utils.trigger_rule.TriggerRule


   .. py:property:: depends_on_past
      :type: bool


   .. py:property:: ignore_first_depends_on_past
      :type: bool


   .. py:property:: wait_for_downstream
      :type: bool


   .. py:property:: retries
      :type: int | None


   .. py:property:: queue
      :type: str


   .. py:property:: pool
      :type: str


   .. py:property:: pool_slots
      :type: str | None


   .. py:property:: execution_timeout
      :type: datetime.timedelta | None


   .. py:property:: max_retry_delay
      :type: datetime.timedelta | None


   .. py:property:: retry_delay
      :type: datetime.timedelta


   .. py:property:: retry_exponential_backoff
      :type: bool


   .. py:property:: priority_weight
      :type: int


   .. py:property:: weight_rule
      :type: int


   .. py:property:: sla
      :type: datetime.timedelta | None


   .. py:property:: max_active_tis_per_dag
      :type: int | None


   .. py:property:: resources
      :type: Resources | None


   .. py:property:: on_execute_callback
      :type: TaskStateChangeCallback | None


   .. py:property:: on_failure_callback
      :type: TaskStateChangeCallback | None


   .. py:property:: on_retry_callback
      :type: TaskStateChangeCallback | None


   .. py:property:: on_success_callback
      :type: TaskStateChangeCallback | None


   .. py:property:: run_as_user
      :type: str | None


   .. py:property:: executor_config
      :type: dict


   .. py:property:: inlets
      :type: list[Any]


   .. py:property:: outlets
      :type: list[Any]


   .. py:property:: doc
      :type: str | None


   .. py:property:: doc_md
      :type: str | None


   .. py:property:: doc_json
      :type: str | None


   .. py:property:: doc_yaml
      :type: str | None


   .. py:property:: doc_rst
      :type: str | None


   .. py:property:: output
      :type: airflow.models.xcom_arg.XComArg

      Returns reference to XCom pushed by current operator


   .. py:attribute:: operator_class
      :annotation: :type[BaseOperator] | dict[str, Any]

      

   .. py:attribute:: expand_input
      :annotation: :airflow.models.expandinput.ExpandInput

      

   .. py:attribute:: partial_kwargs
      :annotation: :dict[str, Any]

      

   .. py:attribute:: task_id
      :annotation: :str

      

   .. py:attribute:: params
      :annotation: :ParamsDict | dict

      

   .. py:attribute:: deps
      :annotation: :frozenset[airflow.ti_deps.deps.base_ti_dep.BaseTIDep]

      

   .. py:attribute:: operator_extra_links
      :annotation: :Collection[airflow.models.baseoperator.BaseOperatorLink]

      

   .. py:attribute:: template_ext
      :annotation: :Sequence[str]

      

   .. py:attribute:: template_fields
      :annotation: :Collection[str]

      

   .. py:attribute:: template_fields_renderers
      :annotation: :dict[str, str]

      

   .. py:attribute:: ui_color
      :annotation: :str

      

   .. py:attribute:: ui_fgcolor
      :annotation: :str

      

   .. py:attribute:: dag
      :annotation: :DAG | None

      

   .. py:attribute:: task_group
      :annotation: :TaskGroup | None

      

   .. py:attribute:: start_date
      :annotation: :pendulum.DateTime | None

      

   .. py:attribute:: end_date
      :annotation: :pendulum.DateTime | None

      

   .. py:attribute:: upstream_task_ids
      :annotation: :set[str]

      

   .. py:attribute:: downstream_task_ids
      :annotation: :set[str]

      

   .. py:attribute:: subdag
      :annotation: :None

      

   .. py:attribute:: HIDE_ATTRS_FROM_UI
      :annotation: :ClassVar[frozenset[str]]

      

   .. py:method:: __hash__()

      Return hash(self).


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: __attrs_post_init__()


   .. py:method:: get_serialized_fields()
      :classmethod:


   .. py:method:: deps_for(operator_class)
      :staticmethod:


   .. py:method:: get_dag()

      Implementing Operator.


   .. py:method:: serialize_for_task_group()

      Implementing DAGNode.


   .. py:method:: unmap(resolve)

      Get the "normal" Operator after applying the current mapping.

      The *resolve* argument is only used if ``operator_class`` is a real
      class, i.e. if this operator is not serialized. If ``operator_class`` is
      not a class (i.e. this DAG has been deserialized), this returns a
      SerializedBaseOperator that "looks like" the actual unmapping result.

      If *resolve* is a two-tuple (context, session), the information is used
      to resolve the mapped arguments into init arguments. If it is a mapping,
      no resolving happens, the mapping directly provides those init arguments
      resolved from mapped kwargs.

      :meta private:


   .. py:method:: prepare_for_execution()


   .. py:method:: iter_mapped_dependencies()

      Upstream dependencies that provide XComs used by this task for task mapping.


   .. py:method:: get_parse_time_mapped_ti_count()

      Number of mapped task instances that can be created on DAG run creation.

      This only considers literal mapped arguments, and would return *None*
      when any non-literal values are used for mapping.

      :raise NotFullyPopulated: If non-literal mapped arguments are encountered.
      :raise NotMapped: If the operator is neither mapped, nor has any parent
          mapped task groups.
      :return: Total number of mapped TIs this task should have.


   .. py:method:: get_mapped_ti_count(run_id, *, session)

      Number of mapped TaskInstances that can be created at run time.

      This considers both literal and non-literal mapped arguments, and the
      result is therefore available when all depended tasks have finished. The
      return value should be identical to ``parse_time_mapped_ti_count`` if
      all mapped arguments are literal.

      :raise NotFullyPopulated: If upstream tasks are not all complete yet.
      :raise NotMapped: If the operator is neither mapped, nor has any parent
          mapped task groups.
      :return: Total number of mapped TIs this task should have.


   .. py:method:: render_template_fields(context, jinja_env = None)

      Template all attributes listed in *self.template_fields*.

      This updates *context* to reference the map-expanded task and relevant
      information, without modifying the mapped operator. The expanded task
      in *context* is then rendered in-place.

      :param context: Context dict with values to apply on content.
      :param jinja_env: Jinja environment to use for rendering.



