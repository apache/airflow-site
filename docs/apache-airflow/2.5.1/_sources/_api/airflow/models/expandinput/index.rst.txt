:py:mod:`airflow.models.expandinput`
====================================

.. py:module:: airflow.models.expandinput


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.models.expandinput.MappedArgument
   airflow.models.expandinput.DictOfListsExpandInput
   airflow.models.expandinput.ListOfDictsExpandInput



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.models.expandinput.is_mappable
   airflow.models.expandinput.get_map_type_key
   airflow.models.expandinput.create_expand_input



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.models.expandinput.ExpandInput
   airflow.models.expandinput.OperatorExpandArgument
   airflow.models.expandinput.OperatorExpandKwargsArgument
   airflow.models.expandinput.EXPAND_INPUT_EMPTY


.. py:data:: ExpandInput

   

.. py:data:: OperatorExpandArgument

   

.. py:data:: OperatorExpandKwargsArgument

   

.. py:class:: MappedArgument

   Bases: :py:obj:`airflow.utils.mixins.ResolveMixin`

   Stand-in stub for task-group-mapping arguments.

   This is very similar to an XComArg, but resolved differently. Declared here
   (instead of in the task group module) to avoid import cycles.

   .. py:method:: get_task_map_length(run_id, *, session)
      :abstractmethod:


   .. py:method:: iter_references()

      Find underlying XCom references this contains.

      This is used by the DAG parser to recursively find task dependencies.

      :meta private:


   .. py:method:: resolve(context, *, session = NEW_SESSION)

      Resolve this value for runtime.

      :meta private:



.. py:function:: is_mappable(v)


.. py:exception:: NotFullyPopulated(missing)

   Bases: :py:obj:`RuntimeError`

   Raise when ``get_map_lengths`` cannot populate all mapping metadata.

   This is generally due to not all upstream tasks have finished when the
   function is called.

   .. py:method:: __str__()

      Return str(self).



.. py:class:: DictOfListsExpandInput

   Bases: :py:obj:`NamedTuple`

   Storage type of a mapped operator's mapped kwargs.

   This is created from ``expand(**kwargs)``.

   .. py:attribute:: value
      :type: dict[str, OperatorExpandArgument]

      

   .. py:method:: get_parse_time_mapped_ti_count()


   .. py:method:: get_total_map_length(run_id, *, session)


   .. py:method:: iter_references()


   .. py:method:: resolve(context, session)



.. py:class:: ListOfDictsExpandInput

   Bases: :py:obj:`NamedTuple`

   Storage type of a mapped operator's mapped kwargs.

   This is created from ``expand_kwargs(xcom_arg)``.

   .. py:attribute:: value
      :type: OperatorExpandKwargsArgument

      

   .. py:method:: get_parse_time_mapped_ti_count()


   .. py:method:: get_total_map_length(run_id, *, session)


   .. py:method:: iter_references()


   .. py:method:: resolve(context, session)



.. py:data:: EXPAND_INPUT_EMPTY

   

.. py:function:: get_map_type_key(expand_input)


.. py:function:: create_expand_input(kind, value)


