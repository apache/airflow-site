:py:mod:`airflow.models.connection`
===================================

.. py:module:: airflow.models.connection


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.models.connection.Connection



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.models.connection.parse_netloc_to_hostname



Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.models.connection.log


.. py:data:: log

   

.. py:function:: parse_netloc_to_hostname(*args, **kwargs)

   Do not use, this method is deprecated.


.. py:class:: Connection(conn_id = None, conn_type = None, description = None, host = None, login = None, password = None, schema = None, port = None, extra = None, uri = None)


   Bases: :py:obj:`airflow.models.base.Base`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   Placeholder to store information about different database instances connection information.

   The idea here is that scripts use references to database instances (conn_id)
   instead of hard coding hostname, logins and passwords when using operators or hooks.

   .. seealso::
       For more information on how to use this class, see: :doc:`/howto/connection`

   :param conn_id: The connection ID.
   :param conn_type: The connection type.
   :param description: The connection description.
   :param host: The host.
   :param login: The login.
   :param password: The password.
   :param schema: The schema.
   :param port: The port number.
   :param extra: Extra metadata. Non-standard data such as private/SSH keys can be saved here. JSON
       encoded object.
   :param uri: URI address describing connection parameters.

   .. py:property:: password

      Password. The value is decrypted/encrypted when reading/setting the value.


   .. py:property:: extra

      Extra data. The value is decrypted/encrypted when reading/setting the value.


   .. py:property:: extra_dejson
      :type: dict

      Returns the extra property by deserializing json.


   .. py:attribute:: EXTRA_KEY
      :value: '__extra__'

      

   .. py:attribute:: __tablename__
      :value: 'connection'

      

   .. py:attribute:: id

      

   .. py:attribute:: conn_id

      

   .. py:attribute:: conn_type

      

   .. py:attribute:: description

      

   .. py:attribute:: host

      

   .. py:attribute:: schema

      

   .. py:attribute:: login

      

   .. py:attribute:: port

      

   .. py:attribute:: is_encrypted

      

   .. py:attribute:: is_extra_encrypted

      

   .. py:method:: on_db_load()


   .. py:method:: parse_from_uri(**uri)

      Use uri parameter in constructor, this method is deprecated.


   .. py:method:: get_uri()

      Return connection in URI format.


   .. py:method:: get_password()

      Return encrypted password.


   .. py:method:: set_password(value)

      Encrypt password and set in object attribute.


   .. py:method:: get_extra()

      Return encrypted extra-data.


   .. py:method:: set_extra(value)

      Encrypt extra-data and save in object attribute to object.


   .. py:method:: rotate_fernet_key()

      Encrypts data with a new key. See: :ref:`security/fernet`.


   .. py:method:: get_hook(*, hook_params=None)

      Return hook based on conn_type.


   .. py:method:: __repr__()

      Return repr(self).


   .. py:method:: log_info()

      Read each field individually or use the default representation (`__repr__`).

      This method is deprecated.


   .. py:method:: debug_info()

      Read each field individually or use the default representation (`__repr__`).

      This method is deprecated.


   .. py:method:: test_connection()

      Calls out get_hook method and executes test_connection method on that.


   .. py:method:: get_connection_from_secrets(conn_id)
      :classmethod:

      Get connection by conn_id.

      :param conn_id: connection id
      :return: connection


   .. py:method:: from_json(value, conn_id=None)
      :classmethod:



