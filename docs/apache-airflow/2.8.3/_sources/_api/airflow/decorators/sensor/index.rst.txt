:py:mod:`airflow.decorators.sensor`
===================================

.. py:module:: airflow.decorators.sensor


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.decorators.sensor.DecoratedSensorOperator



Functions
~~~~~~~~~

.. autoapisummary::

   airflow.decorators.sensor.sensor_task



.. py:class:: DecoratedSensorOperator(*, task_id, **kwargs)


   Bases: :py:obj:`airflow.sensors.python.PythonSensor`

   Wraps a Python callable and captures args/kwargs when called for execution.

   :param python_callable: A reference to an object that is callable
   :param task_id: task Id
   :param op_args: a list of positional arguments that will get unpacked when
       calling your callable (templated)
   :param op_kwargs: a dictionary of keyword arguments that will get unpacked
       in your function (templated)
   :param kwargs_to_upstream: For certain operators, we might need to upstream certain arguments
       that would otherwise be absorbed by the DecoratedOperator (for example python_callable for the
       PythonOperator). This gives a user the option to upstream kwargs as needed.

   .. py:attribute:: template_fields
      :type: Sequence[str]
      :value: ('op_args', 'op_kwargs')

      

   .. py:attribute:: template_fields_renderers
      :type: dict[str, str]

      

   .. py:attribute:: custom_operator_name
      :value: '@task.sensor'

      

   .. py:attribute:: shallow_copy_attrs
      :type: Sequence[str]
      :value: ('python_callable',)

      


.. py:function:: sensor_task(python_callable = None, **kwargs)

   Wrap a function into an Airflow operator.

   Accepts kwargs for operator kwarg. Can be reused in a single DAG.
   :param python_callable: Function to decorate


